{"version":3,"file":"blazor.webassembly.js","sources":["../../../../JSInterop/Microsoft.JSInterop.JS/src/dist/src/Microsoft.JSInterop.js","../../src/Environment.ts","../../src/Rendering/RenderBatch/RenderBatch.ts","../../src/Rendering/Events/EventFieldInfo.ts","../../src/Rendering/Events/EventTypes.ts","../../src/Rendering/JSRootComponents.ts","../../src/Rendering/WebRendererInteropMethods.ts","../../src/Rendering/Events/EventDelegator.ts","../../src/Rendering/LogicalElements.ts","../../src/Rendering/ElementReferenceCapture.ts","../../src/Rendering/DomSpecialPropertyUtil.ts","../../src/Rendering/BrowserRenderer.ts","../../src/Services/NavigationManager.ts","../../src/Services/NavigationUtils.ts","../../src/Rendering/Renderer.ts","../../src/DomWrapper.ts","../../src/Virtualize.ts","../../src/PageTitle.ts","../../src/InputFile.ts","../../src/NavigationLock.ts","../../src/StreamingInterop.ts","../../src/GlobalExports.ts","../../src/Platform/Mono/MonoDebugger.ts","../../src/BootErrors.ts","../../src/Rendering/WebRendererId.ts","../../src/Platform/Logging/Logger.ts","../../src/JSInitializers/JSInitializers.ts","../../src/Platform/Mono/MonoPlatform.ts","../../src/JSInitializers/JSInitializers.WebAssembly.ts","../../src/Rendering/RenderBatch/SharedMemoryRenderBatch.ts","../../src/Services/ComponentDescriptorDiscovery.ts","../../src/Boot.WebAssembly.Common.ts","../../src/Platform/WebAssemblyComponentAttacher.ts","../../src/Services/InitialRootComponentsList.ts","../../src/Services/JSEventRegistry.ts","../../src/Boot.WebAssembly.ts","../../src/BootCommon.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n// This is a single-file self-contained module to avoid the need for a Webpack build\nexport var DotNet;\n(function (DotNet) {\n    const jsonRevivers = [];\n    const jsObjectIdKey = \"__jsObjectId\";\n    const dotNetObjectRefKey = \"__dotNetObject\";\n    const byteArrayRefKey = \"__byte[]\";\n    const dotNetStreamRefKey = \"__dotNetStream\";\n    const jsStreamReferenceLengthKey = \"__jsStreamReferenceLength\";\n    // If undefined, no dispatcher has been attached yet.\n    // If null, this means more than one dispatcher was attached, so no default can be determined.\n    // Otherwise, there was only one dispatcher registered. We keep track of this instance to keep legacy APIs working.\n    let defaultCallDispatcher;\n    // Provides access to the \"current\" call dispatcher without having to flow it through nested function calls.\n    let currentCallDispatcher;\n    class JSObject {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        constructor(_jsObject) {\n            this._jsObject = _jsObject;\n            this._cachedFunctions = new Map();\n        }\n        findFunction(identifier) {\n            const cachedFunction = this._cachedFunctions.get(identifier);\n            if (cachedFunction) {\n                return cachedFunction;\n            }\n            let result = this._jsObject;\n            let lastSegmentValue;\n            identifier.split(\".\").forEach(segment => {\n                if (segment in result) {\n                    lastSegmentValue = result;\n                    result = result[segment];\n                }\n                else {\n                    throw new Error(`Could not find '${identifier}' ('${segment}' was undefined).`);\n                }\n            });\n            if (result instanceof Function) {\n                result = result.bind(lastSegmentValue);\n                this._cachedFunctions.set(identifier, result);\n                return result;\n            }\n            throw new Error(`The value '${identifier}' is not a function.`);\n        }\n        getWrappedObject() {\n            return this._jsObject;\n        }\n    }\n    const windowJSObjectId = 0;\n    const cachedJSObjectsById = {\n        [windowJSObjectId]: new JSObject(window)\n    };\n    cachedJSObjectsById[windowJSObjectId]._cachedFunctions.set(\"import\", (url) => {\n        // In most cases developers will want to resolve dynamic imports relative to the base HREF.\n        // However since we're the one calling the import keyword, they would be resolved relative to\n        // this framework bundle URL. Fix this by providing an absolute URL.\n        if (typeof url === \"string\" && url.startsWith(\"./\")) {\n            url = new URL(url.substring(2), document.baseURI).toString();\n        }\n        return import(/* webpackIgnore: true */ url);\n    });\n    let nextJsObjectId = 1; // Start at 1 because zero is reserved for \"window\"\n    /**\n     * Creates a .NET call dispatcher to use for handling invocations between JavaScript and a .NET runtime.\n     *\n     * @param dotNetCallDispatcher An object that can dispatch calls from JavaScript to a .NET runtime.\n     */\n    function attachDispatcher(dotNetCallDispatcher) {\n        const result = new CallDispatcher(dotNetCallDispatcher);\n        if (defaultCallDispatcher === undefined) {\n            // This was the first dispatcher registered, so it becomes the default. This exists purely for\n            // backwards compatibility.\n            defaultCallDispatcher = result;\n        }\n        else if (defaultCallDispatcher) {\n            // There is already a default dispatcher. Now that there are multiple to choose from, there can\n            // be no acceptable default, so we nullify the default dispatcher.\n            defaultCallDispatcher = null;\n        }\n        return result;\n    }\n    DotNet.attachDispatcher = attachDispatcher;\n    /**\n     * Adds a JSON reviver callback that will be used when parsing arguments received from .NET.\n     * @param reviver The reviver to add.\n     */\n    function attachReviver(reviver) {\n        jsonRevivers.push(reviver);\n    }\n    DotNet.attachReviver = attachReviver;\n    /**\n     * Invokes the specified .NET public method synchronously. Not all hosting scenarios support\n     * synchronous invocation, so if possible use invokeMethodAsync instead.\n     *\n     * @deprecated Use DotNetObject to invoke instance methods instead.\n     * @param assemblyName The short name (without key/version or .dll extension) of the .NET assembly containing the method.\n     * @param methodIdentifier The identifier of the method to invoke. The method must have a [JSInvokable] attribute specifying this identifier.\n     * @param args Arguments to pass to the method, each of which must be JSON-serializable.\n     * @returns The result of the operation.\n     */\n    function invokeMethod(assemblyName, methodIdentifier, ...args) {\n        const dispatcher = getDefaultCallDispatcher();\n        return dispatcher.invokeDotNetStaticMethod(assemblyName, methodIdentifier, ...args);\n    }\n    DotNet.invokeMethod = invokeMethod;\n    /**\n     * Invokes the specified .NET public method asynchronously.\n     *\n     * @deprecated Use DotNetObject to invoke instance methods instead.\n     * @param assemblyName The short name (without key/version or .dll extension) of the .NET assembly containing the method.\n     * @param methodIdentifier The identifier of the method to invoke. The method must have a [JSInvokable] attribute specifying this identifier.\n     * @param args Arguments to pass to the method, each of which must be JSON-serializable.\n     * @returns A promise representing the result of the operation.\n     */\n    function invokeMethodAsync(assemblyName, methodIdentifier, ...args) {\n        const dispatcher = getDefaultCallDispatcher();\n        return dispatcher.invokeDotNetStaticMethodAsync(assemblyName, methodIdentifier, ...args);\n    }\n    DotNet.invokeMethodAsync = invokeMethodAsync;\n    /**\n     * Creates a JavaScript object reference that can be passed to .NET via interop calls.\n     *\n     * @param jsObject The JavaScript Object used to create the JavaScript object reference.\n     * @returns The JavaScript object reference (this will be the same instance as the given object).\n     * @throws Error if the given value is not an Object.\n     */\n    function createJSObjectReference(jsObject) {\n        if (jsObject && typeof jsObject === \"object\") {\n            cachedJSObjectsById[nextJsObjectId] = new JSObject(jsObject);\n            const result = {\n                [jsObjectIdKey]: nextJsObjectId\n            };\n            nextJsObjectId++;\n            return result;\n        }\n        throw new Error(`Cannot create a JSObjectReference from the value '${jsObject}'.`);\n    }\n    DotNet.createJSObjectReference = createJSObjectReference;\n    /**\n     * Creates a JavaScript data reference that can be passed to .NET via interop calls.\n     *\n     * @param streamReference The ArrayBufferView or Blob used to create the JavaScript stream reference.\n     * @returns The JavaScript data reference (this will be the same instance as the given object).\n     * @throws Error if the given value is not an Object or doesn't have a valid byteLength.\n     */\n    function createJSStreamReference(streamReference) {\n        let length = -1;\n        // If we're given a raw Array Buffer, we interpret it as a `Uint8Array` as\n        // ArrayBuffers' aren't directly readable.\n        if (streamReference instanceof ArrayBuffer) {\n            streamReference = new Uint8Array(streamReference);\n        }\n        if (streamReference instanceof Blob) {\n            length = streamReference.size;\n        }\n        else if (streamReference.buffer instanceof ArrayBuffer) {\n            if (streamReference.byteLength === undefined) {\n                throw new Error(`Cannot create a JSStreamReference from the value '${streamReference}' as it doesn't have a byteLength.`);\n            }\n            length = streamReference.byteLength;\n        }\n        else {\n            throw new Error(\"Supplied value is not a typed array or blob.\");\n        }\n        const result = {\n            [jsStreamReferenceLengthKey]: length\n        };\n        try {\n            const jsObjectReference = createJSObjectReference(streamReference);\n            result[jsObjectIdKey] = jsObjectReference[jsObjectIdKey];\n        }\n        catch (error) {\n            throw new Error(`Cannot create a JSStreamReference from the value '${streamReference}'.`);\n        }\n        return result;\n    }\n    DotNet.createJSStreamReference = createJSStreamReference;\n    /**\n     * Disposes the given JavaScript object reference.\n     *\n     * @param jsObjectReference The JavaScript Object reference.\n     */\n    function disposeJSObjectReference(jsObjectReference) {\n        const id = jsObjectReference && jsObjectReference[jsObjectIdKey];\n        if (typeof id === \"number\") {\n            disposeJSObjectReferenceById(id);\n        }\n    }\n    DotNet.disposeJSObjectReference = disposeJSObjectReference;\n    function parseJsonWithRevivers(callDispatcher, json) {\n        currentCallDispatcher = callDispatcher;\n        const result = json ? JSON.parse(json, (key, initialValue) => {\n            // Invoke each reviver in order, passing the output from the previous reviver,\n            // so that each one gets a chance to transform the value\n            return jsonRevivers.reduce((latestValue, reviver) => reviver(key, latestValue), initialValue);\n        }) : null;\n        currentCallDispatcher = undefined;\n        return result;\n    }\n    function getDefaultCallDispatcher() {\n        if (defaultCallDispatcher === undefined) {\n            throw new Error(\"No call dispatcher has been set.\");\n        }\n        else if (defaultCallDispatcher === null) {\n            throw new Error(\"There are multiple .NET runtimes present, so a default dispatcher could not be resolved. Use DotNetObject to invoke .NET instance methods.\");\n        }\n        else {\n            return defaultCallDispatcher;\n        }\n    }\n    /**\n     * Represents the type of result expected from a JS interop call.\n     */\n    // eslint-disable-next-line no-shadow\n    let JSCallResultType;\n    (function (JSCallResultType) {\n        JSCallResultType[JSCallResultType[\"Default\"] = 0] = \"Default\";\n        JSCallResultType[JSCallResultType[\"JSObjectReference\"] = 1] = \"JSObjectReference\";\n        JSCallResultType[JSCallResultType[\"JSStreamReference\"] = 2] = \"JSStreamReference\";\n        JSCallResultType[JSCallResultType[\"JSVoidResult\"] = 3] = \"JSVoidResult\";\n    })(JSCallResultType = DotNet.JSCallResultType || (DotNet.JSCallResultType = {}));\n    class CallDispatcher {\n        // eslint-disable-next-line no-empty-function\n        constructor(_dotNetCallDispatcher) {\n            this._dotNetCallDispatcher = _dotNetCallDispatcher;\n            this._byteArraysToBeRevived = new Map();\n            this._pendingDotNetToJSStreams = new Map();\n            this._pendingAsyncCalls = {};\n            this._nextAsyncCallId = 1; // Start at 1 because zero signals \"no response needed\"\n        }\n        getDotNetCallDispatcher() {\n            return this._dotNetCallDispatcher;\n        }\n        invokeJSFromDotNet(identifier, argsJson, resultType, targetInstanceId) {\n            const args = parseJsonWithRevivers(this, argsJson);\n            const jsFunction = findJSFunction(identifier, targetInstanceId);\n            const returnValue = jsFunction(...(args || []));\n            const result = createJSCallResult(returnValue, resultType);\n            return result === null || result === undefined\n                ? null\n                : stringifyArgs(this, result);\n        }\n        beginInvokeJSFromDotNet(asyncHandle, identifier, argsJson, resultType, targetInstanceId) {\n            // Coerce synchronous functions into async ones, plus treat\n            // synchronous exceptions the same as async ones\n            const promise = new Promise(resolve => {\n                const args = parseJsonWithRevivers(this, argsJson);\n                const jsFunction = findJSFunction(identifier, targetInstanceId);\n                const synchronousResultOrPromise = jsFunction(...(args || []));\n                resolve(synchronousResultOrPromise);\n            });\n            // We only listen for a result if the caller wants to be notified about it\n            if (asyncHandle) {\n                // On completion, dispatch result back to .NET\n                // Not using \"await\" because it codegens a lot of boilerplate\n                promise.\n                    then(result => stringifyArgs(this, [\n                    asyncHandle,\n                    true,\n                    createJSCallResult(result, resultType)\n                ])).\n                    then(result => this._dotNetCallDispatcher.endInvokeJSFromDotNet(asyncHandle, true, result), error => this._dotNetCallDispatcher.endInvokeJSFromDotNet(asyncHandle, false, JSON.stringify([\n                    asyncHandle,\n                    false,\n                    formatError(error)\n                ])));\n            }\n        }\n        endInvokeDotNetFromJS(asyncCallId, success, resultJsonOrExceptionMessage) {\n            const resultOrError = success\n                ? parseJsonWithRevivers(this, resultJsonOrExceptionMessage)\n                : new Error(resultJsonOrExceptionMessage);\n            this.completePendingCall(parseInt(asyncCallId, 10), success, resultOrError);\n        }\n        invokeDotNetStaticMethod(assemblyName, methodIdentifier, ...args) {\n            return this.invokeDotNetMethod(assemblyName, methodIdentifier, null, args);\n        }\n        invokeDotNetStaticMethodAsync(assemblyName, methodIdentifier, ...args) {\n            return this.invokeDotNetMethodAsync(assemblyName, methodIdentifier, null, args);\n        }\n        invokeDotNetMethod(assemblyName, methodIdentifier, dotNetObjectId, args) {\n            if (this._dotNetCallDispatcher.invokeDotNetFromJS) {\n                const argsJson = stringifyArgs(this, args);\n                const resultJson = this._dotNetCallDispatcher.invokeDotNetFromJS(assemblyName, methodIdentifier, dotNetObjectId, argsJson);\n                return resultJson ? parseJsonWithRevivers(this, resultJson) : null;\n            }\n            throw new Error(\"The current dispatcher does not support synchronous calls from JS to .NET. Use invokeDotNetMethodAsync instead.\");\n        }\n        invokeDotNetMethodAsync(assemblyName, methodIdentifier, dotNetObjectId, args) {\n            if (assemblyName && dotNetObjectId) {\n                throw new Error(`For instance method calls, assemblyName should be null. Received '${assemblyName}'.`);\n            }\n            const asyncCallId = this._nextAsyncCallId++;\n            const resultPromise = new Promise((resolve, reject) => {\n                this._pendingAsyncCalls[asyncCallId] = { resolve, reject };\n            });\n            try {\n                const argsJson = stringifyArgs(this, args);\n                this._dotNetCallDispatcher.beginInvokeDotNetFromJS(asyncCallId, assemblyName, methodIdentifier, dotNetObjectId, argsJson);\n            }\n            catch (ex) {\n                // Synchronous failure\n                this.completePendingCall(asyncCallId, false, ex);\n            }\n            return resultPromise;\n        }\n        receiveByteArray(id, data) {\n            this._byteArraysToBeRevived.set(id, data);\n        }\n        processByteArray(id) {\n            const result = this._byteArraysToBeRevived.get(id);\n            if (!result) {\n                return null;\n            }\n            this._byteArraysToBeRevived.delete(id);\n            return result;\n        }\n        supplyDotNetStream(streamId, stream) {\n            if (this._pendingDotNetToJSStreams.has(streamId)) {\n                // The receiver is already waiting, so we can resolve the promise now and stop tracking this\n                const pendingStream = this._pendingDotNetToJSStreams.get(streamId);\n                this._pendingDotNetToJSStreams.delete(streamId);\n                pendingStream.resolve(stream);\n            }\n            else {\n                // The receiver hasn't started waiting yet, so track a pre-completed entry it can attach to later\n                const pendingStream = new PendingStream();\n                pendingStream.resolve(stream);\n                this._pendingDotNetToJSStreams.set(streamId, pendingStream);\n            }\n        }\n        getDotNetStreamPromise(streamId) {\n            // We might already have started receiving the stream, or maybe it will come later.\n            // We have to handle both possible orderings, but we can count on it coming eventually because\n            // it's not something the developer gets to control, and it would be an error if it doesn't.\n            let result;\n            if (this._pendingDotNetToJSStreams.has(streamId)) {\n                // We've already started receiving the stream, so no longer need to track it as pending\n                result = this._pendingDotNetToJSStreams.get(streamId).streamPromise;\n                this._pendingDotNetToJSStreams.delete(streamId);\n            }\n            else {\n                // We haven't started receiving it yet, so add an entry to track it as pending\n                const pendingStream = new PendingStream();\n                this._pendingDotNetToJSStreams.set(streamId, pendingStream);\n                result = pendingStream.streamPromise;\n            }\n            return result;\n        }\n        completePendingCall(asyncCallId, success, resultOrError) {\n            if (!this._pendingAsyncCalls.hasOwnProperty(asyncCallId)) {\n                throw new Error(`There is no pending async call with ID ${asyncCallId}.`);\n            }\n            const asyncCall = this._pendingAsyncCalls[asyncCallId];\n            delete this._pendingAsyncCalls[asyncCallId];\n            if (success) {\n                asyncCall.resolve(resultOrError);\n            }\n            else {\n                asyncCall.reject(resultOrError);\n            }\n        }\n    }\n    function formatError(error) {\n        if (error instanceof Error) {\n            return `${error.message}\\n${error.stack}`;\n        }\n        return error ? error.toString() : \"null\";\n    }\n    function findJSFunction(identifier, targetInstanceId) {\n        const targetInstance = cachedJSObjectsById[targetInstanceId];\n        if (targetInstance) {\n            return targetInstance.findFunction(identifier);\n        }\n        throw new Error(`JS object instance with ID ${targetInstanceId} does not exist (has it been disposed?).`);\n    }\n    DotNet.findJSFunction = findJSFunction;\n    function disposeJSObjectReferenceById(id) {\n        delete cachedJSObjectsById[id];\n    }\n    DotNet.disposeJSObjectReferenceById = disposeJSObjectReferenceById;\n    class DotNetObject {\n        // eslint-disable-next-line no-empty-function\n        constructor(_id, _callDispatcher) {\n            this._id = _id;\n            this._callDispatcher = _callDispatcher;\n        }\n        invokeMethod(methodIdentifier, ...args) {\n            return this._callDispatcher.invokeDotNetMethod(null, methodIdentifier, this._id, args);\n        }\n        invokeMethodAsync(methodIdentifier, ...args) {\n            return this._callDispatcher.invokeDotNetMethodAsync(null, methodIdentifier, this._id, args);\n        }\n        dispose() {\n            const promise = this._callDispatcher.invokeDotNetMethodAsync(null, \"__Dispose\", this._id, null);\n            promise.catch(error => console.error(error));\n        }\n        serializeAsArg() {\n            return { [dotNetObjectRefKey]: this._id };\n        }\n    }\n    DotNet.DotNetObject = DotNetObject;\n    attachReviver(function reviveReference(key, value) {\n        if (value && typeof value === \"object\") {\n            if (value.hasOwnProperty(dotNetObjectRefKey)) {\n                return new DotNetObject(value[dotNetObjectRefKey], currentCallDispatcher);\n            }\n            else if (value.hasOwnProperty(jsObjectIdKey)) {\n                const id = value[jsObjectIdKey];\n                const jsObject = cachedJSObjectsById[id];\n                if (jsObject) {\n                    return jsObject.getWrappedObject();\n                }\n                throw new Error(`JS object instance with Id '${id}' does not exist. It may have been disposed.`);\n            }\n            else if (value.hasOwnProperty(byteArrayRefKey)) {\n                const index = value[byteArrayRefKey];\n                const byteArray = currentCallDispatcher.processByteArray(index);\n                if (byteArray === undefined) {\n                    throw new Error(`Byte array index '${index}' does not exist.`);\n                }\n                return byteArray;\n            }\n            else if (value.hasOwnProperty(dotNetStreamRefKey)) {\n                const streamId = value[dotNetStreamRefKey];\n                const streamPromise = currentCallDispatcher.getDotNetStreamPromise(streamId);\n                return new DotNetStream(streamPromise);\n            }\n        }\n        // Unrecognized - let another reviver handle it\n        return value;\n    });\n    class DotNetStream {\n        // eslint-disable-next-line no-empty-function\n        constructor(_streamPromise) {\n            this._streamPromise = _streamPromise;\n        }\n        /**\n         * Supplies a readable stream of data being sent from .NET.\n         */\n        stream() {\n            return this._streamPromise;\n        }\n        /**\n         * Supplies a array buffer of data being sent from .NET.\n         * Note there is a JavaScript limit on the size of the ArrayBuffer equal to approximately 2GB.\n         */\n        async arrayBuffer() {\n            return new Response(await this.stream()).arrayBuffer();\n        }\n    }\n    class PendingStream {\n        constructor() {\n            this.streamPromise = new Promise((resolve, reject) => {\n                this.resolve = resolve;\n                this.reject = reject;\n            });\n        }\n    }\n    function createJSCallResult(returnValue, resultType) {\n        switch (resultType) {\n            case JSCallResultType.Default:\n                return returnValue;\n            case JSCallResultType.JSObjectReference:\n                return createJSObjectReference(returnValue);\n            case JSCallResultType.JSStreamReference:\n                return createJSStreamReference(returnValue);\n            case JSCallResultType.JSVoidResult:\n                return null;\n            default:\n                throw new Error(`Invalid JS call result type '${resultType}'.`);\n        }\n    }\n    let nextByteArrayIndex = 0;\n    function stringifyArgs(callDispatcher, args) {\n        nextByteArrayIndex = 0;\n        currentCallDispatcher = callDispatcher;\n        const result = JSON.stringify(args, argReplacer);\n        currentCallDispatcher = undefined;\n        return result;\n    }\n    function argReplacer(key, value) {\n        if (value instanceof DotNetObject) {\n            return value.serializeAsArg();\n        }\n        else if (value instanceof Uint8Array) {\n            const dotNetCallDispatcher = currentCallDispatcher.getDotNetCallDispatcher();\n            dotNetCallDispatcher.sendByteArray(nextByteArrayIndex, value);\n            const jsonValue = { [byteArrayRefKey]: nextByteArrayIndex };\n            nextByteArrayIndex++;\n            return jsonValue;\n        }\n        return value;\n    }\n})(DotNet || (DotNet = {}));\n//# sourceMappingURL=Microsoft.JSInterop.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Expose an export called 'platform' of the interface type 'Platform',\r\n// so that consumers can be agnostic about which implementation they use.\r\n// Basic alternative to having an actual DI container.\r\nimport { Platform } from './Platform/Platform';\r\n\r\nexport let platform: Platform;\r\n\r\nexport function setPlatform(platformInstance: Platform): Platform {\r\n  platform = platformInstance;\r\n  return platform;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nexport interface RenderBatch {\r\n  updatedComponents(): ArrayRange<RenderTreeDiff>;\r\n  referenceFrames(): ArrayRange<RenderTreeFrame>;\r\n  disposedComponentIds(): ArrayRange<number>;\r\n  disposedEventHandlerIds(): ArrayRange<number>;\r\n\r\n  updatedComponentsEntry(values: ArrayValues<RenderTreeDiff>, index: number): RenderTreeDiff;\r\n  referenceFramesEntry(values: ArrayValues<RenderTreeFrame>, index: number): RenderTreeFrame;\r\n  disposedComponentIdsEntry(values: ArrayValues<number>, index: number): number;\r\n  disposedEventHandlerIdsEntry(values: ArrayValues<number>, index: number): number;\r\n\r\n  diffReader: RenderTreeDiffReader;\r\n  editReader: RenderTreeEditReader;\r\n  frameReader: RenderTreeFrameReader;\r\n  arrayRangeReader: ArrayRangeReader;\r\n  arrayBuilderSegmentReader: ArrayBuilderSegmentReader;\r\n}\r\n\r\nexport interface ArrayRangeReader {\r\n  count<T>(arrayRange: ArrayRange<T>): number;\r\n  values<T>(arrayRange: ArrayRange<T>): ArrayValues<T>;\r\n}\r\n\r\nexport interface ArrayBuilderSegmentReader {\r\n  offset<T>(arrayBuilderSegment: ArrayBuilderSegment<T>): number;\r\n  count<T>(arrayBuilderSegment: ArrayBuilderSegment<T>): number;\r\n  values<T>(arrayBuilderSegment: ArrayBuilderSegment<T>): ArrayValues<T>;\r\n}\r\n\r\nexport interface RenderTreeDiffReader {\r\n  componentId(diff: RenderTreeDiff): number;\r\n  edits(diff: RenderTreeDiff): ArrayBuilderSegment<RenderTreeEdit>;\r\n  editsEntry(values: ArrayValues<RenderTreeEdit>, index: number): RenderTreeEdit;\r\n}\r\n\r\nexport interface RenderTreeEditReader {\r\n  editType(edit: RenderTreeEdit): EditType;\r\n  siblingIndex(edit: RenderTreeEdit): number;\r\n  newTreeIndex(edit: RenderTreeEdit): number;\r\n  moveToSiblingIndex(edit: RenderTreeEdit): number;\r\n  removedAttributeName(edit: RenderTreeEdit): string | null;\r\n}\r\n\r\nexport interface RenderTreeFrameReader {\r\n  frameType(frame: RenderTreeFrame): FrameType;\r\n  subtreeLength(frame: RenderTreeFrame): number;\r\n  elementReferenceCaptureId(frame: RenderTreeFrame): string | null;\r\n  componentId(frame: RenderTreeFrame): number;\r\n  elementName(frame: RenderTreeFrame): string | null;\r\n  textContent(frame: RenderTreeFrame): string | null;\r\n  markupContent(frame: RenderTreeFrame): string;\r\n  attributeName(frame: RenderTreeFrame): string | null;\r\n  attributeValue(frame: RenderTreeFrame): string | null;\r\n  attributeEventHandlerId(frame: RenderTreeFrame): number;\r\n}\r\n\r\nexport interface ArrayRange<T> { ArrayRange__DO_NOT_IMPLEMENT: unknown }\r\nexport interface ArrayBuilderSegment<T> { ArrayBuilderSegment__DO_NOT_IMPLEMENT: unknown }\r\nexport interface ArrayValues<T> { ArrayValues__DO_NOT_IMPLEMENT: unknown }\r\n\r\nexport interface RenderTreeDiff { RenderTreeDiff__DO_NOT_IMPLEMENT: unknown }\r\nexport interface RenderTreeFrame { RenderTreeFrame__DO_NOT_IMPLEMENT: unknown }\r\nexport interface RenderTreeEdit { RenderTreeEdit__DO_NOT_IMPLEMENT: unknown }\r\n\r\nexport enum EditType {\r\n  // The values must be kept in sync with the .NET equivalent in RenderTreeEditType.cs\r\n  prependFrame = 1,\r\n  removeFrame = 2,\r\n  setAttribute = 3,\r\n  removeAttribute = 4,\r\n  updateText = 5,\r\n  stepIn = 6,\r\n  stepOut = 7,\r\n  updateMarkup = 8,\r\n  permutationListEntry = 9,\r\n  permutationListEnd = 10,\r\n}\r\n\r\nexport enum FrameType {\r\n  // The values must be kept in sync with the .NET equivalent in RenderTreeFrameType.cs\r\n  element = 1,\r\n  text = 2,\r\n  attribute = 3,\r\n  component = 4,\r\n  region = 5,\r\n  elementReferenceCapture = 6,\r\n  markup = 8,\r\n  namedEvent = 10,\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nexport class EventFieldInfo {\r\n  constructor(public componentId: number, public fieldValue: string | boolean) {\r\n  }\r\n\r\n  public static fromEvent(componentId: number, event: Event): EventFieldInfo | null {\r\n    const elem = event.target;\r\n    if (elem instanceof Element) {\r\n      const fieldData = getFormFieldData(elem);\r\n      if (fieldData) {\r\n        return new EventFieldInfo(componentId, fieldData.value);\r\n      }\r\n    }\r\n\r\n    // This event isn't happening on a form field that we can reverse-map back to some incoming attribute\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction getFormFieldData(elem: Element) {\r\n  // The logic in here should be the inverse of the logic in BrowserRenderer's tryApplySpecialProperty.\r\n  // That is, we're doing the reverse mapping, starting from an HTML property and reconstructing which\r\n  // \"special\" attribute would have been mapped to that property.\r\n  if (elem instanceof HTMLInputElement) {\r\n    return (elem.type && elem.type.toLowerCase() === 'checkbox')\r\n      ? { value: elem.checked }\r\n      : { value: elem.value };\r\n  }\r\n\r\n  if (elem instanceof HTMLSelectElement || elem instanceof HTMLTextAreaElement) {\r\n    return { value: elem.value };\r\n  }\r\n\r\n  return null;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nexport interface EventTypeOptions {\r\n  browserEventName?: string;\r\n  createEventArgs?: (event: Event) => unknown;\r\n}\r\n\r\nconst eventTypeRegistry: Map<string, EventTypeOptions> = new Map();\r\nconst browserEventNamesToAliases: Map<string, string[]> = new Map();\r\nconst createBlankEventArgsOptions: EventTypeOptions = { createEventArgs: () => ({}) };\r\n\r\nexport const eventNameAliasRegisteredCallbacks: ((aliasEventName: string, browserEventName) => void)[] = [];\r\n\r\nexport function registerCustomEventType(eventName: string, options: EventTypeOptions): void {\r\n  if (!options) {\r\n    throw new Error('The options parameter is required.');\r\n  }\r\n\r\n  // There can't be more than one registration for the same event name because then we wouldn't\r\n  // know which eventargs data to supply.\r\n  if (eventTypeRegistry.has(eventName)) {\r\n    throw new Error(`The event '${eventName}' is already registered.`);\r\n  }\r\n\r\n  // If applicable, register this as an alias of the given browserEventName\r\n  if (options.browserEventName) {\r\n    const aliasGroup = browserEventNamesToAliases.get(options.browserEventName);\r\n    if (aliasGroup) {\r\n      aliasGroup.push(eventName);\r\n    } else {\r\n      browserEventNamesToAliases.set(options.browserEventName, [eventName]);\r\n    }\r\n\r\n    // For developer convenience, it's allowed to register the custom event type *after*\r\n    // some listeners for it are already present. Once the event name alias gets registered,\r\n    // we have to notify any existing event delegators so they can update their delegated\r\n    // events list.\r\n    eventNameAliasRegisteredCallbacks.forEach(callback => callback(eventName, options.browserEventName));\r\n  }\r\n\r\n  eventTypeRegistry.set(eventName, options);\r\n}\r\n\r\nexport function getEventTypeOptions(eventName: string): EventTypeOptions | undefined {\r\n  return eventTypeRegistry.get(eventName);\r\n}\r\n\r\nexport function getEventNameAliases(eventName: string): string[] | undefined {\r\n  return browserEventNamesToAliases.get(eventName);\r\n}\r\n\r\nexport function getBrowserEventName(possibleAliasEventName: string): string {\r\n  const eventOptions = eventTypeRegistry.get(possibleAliasEventName);\r\n  return eventOptions?.browserEventName || possibleAliasEventName;\r\n}\r\n\r\nfunction registerBuiltInEventType(eventNames: string[], options: EventTypeOptions) {\r\n  eventNames.forEach(eventName => eventTypeRegistry.set(eventName, options));\r\n}\r\n\r\nregisterBuiltInEventType(['input', 'change'], {\r\n  createEventArgs: parseChangeEvent,\r\n});\r\n\r\nregisterBuiltInEventType([\r\n  'copy',\r\n  'cut',\r\n  'paste',\r\n], {\r\n  createEventArgs: e => parseClipboardEvent(e as ClipboardEvent),\r\n});\r\n\r\nregisterBuiltInEventType([\r\n  'drag',\r\n  'dragend',\r\n  'dragenter',\r\n  'dragleave',\r\n  'dragover',\r\n  'dragstart',\r\n  'drop',\r\n], {\r\n  createEventArgs: e => parseDragEvent(e as DragEvent),\r\n});\r\n\r\nregisterBuiltInEventType([\r\n  'focus',\r\n  'blur',\r\n  'focusin',\r\n  'focusout',\r\n], {\r\n  createEventArgs: e => parseFocusEvent(e as FocusEvent),\r\n});\r\n\r\nregisterBuiltInEventType([\r\n  'keydown',\r\n  'keyup',\r\n  'keypress',\r\n], {\r\n  createEventArgs: e => parseKeyboardEvent(e as KeyboardEvent),\r\n});\r\n\r\nregisterBuiltInEventType([\r\n  'contextmenu',\r\n  'click',\r\n  'mouseover',\r\n  'mouseout',\r\n  'mousemove',\r\n  'mousedown',\r\n  'mouseup',\r\n  'mouseleave',\r\n  'mouseenter',\r\n  'dblclick',\r\n], {\r\n  createEventArgs: e => parseMouseEvent(e as MouseEvent),\r\n});\r\n\r\nregisterBuiltInEventType(['error'], {\r\n  createEventArgs: e => parseErrorEvent(e as ErrorEvent),\r\n});\r\n\r\nregisterBuiltInEventType([\r\n  'loadstart',\r\n  'timeout',\r\n  'abort',\r\n  'load',\r\n  'loadend',\r\n  'progress',\r\n], {\r\n  createEventArgs: e => parseProgressEvent(e as ProgressEvent),\r\n});\r\n\r\nregisterBuiltInEventType([\r\n  'touchcancel',\r\n  'touchend',\r\n  'touchmove',\r\n  'touchenter',\r\n  'touchleave',\r\n  'touchstart',\r\n], {\r\n  createEventArgs: e => parseTouchEvent(e as TouchEvent),\r\n});\r\n\r\nregisterBuiltInEventType([\r\n  'gotpointercapture',\r\n  'lostpointercapture',\r\n  'pointercancel',\r\n  'pointerdown',\r\n  'pointerenter',\r\n  'pointerleave',\r\n  'pointermove',\r\n  'pointerout',\r\n  'pointerover',\r\n  'pointerup',\r\n], {\r\n  createEventArgs: e => parsePointerEvent(e as PointerEvent),\r\n});\r\n\r\nregisterBuiltInEventType(['wheel', 'mousewheel'], {\r\n  createEventArgs: e => parseWheelEvent(e as WheelEvent),\r\n});\r\n\r\nregisterBuiltInEventType(['cancel', 'close', 'toggle'], createBlankEventArgsOptions);\r\n\r\nfunction parseChangeEvent(event: Event): ChangeEventArgs {\r\n  const element = event.target as Element;\r\n  if (isTimeBasedInput(element)) {\r\n    const normalizedValue = normalizeTimeBasedValue(element);\r\n    return { value: normalizedValue };\r\n  } else if (isMultipleSelectInput(element)) {\r\n    const selectElement = element as HTMLSelectElement;\r\n    const selectedValues = Array.from(selectElement.options)\r\n      .filter(option => option.selected)\r\n      .map(option => option.value);\r\n    return { value: selectedValues };\r\n  } else {\r\n    const targetIsCheckbox = isCheckbox(element);\r\n    const newValue = targetIsCheckbox ? !!element['checked'] : element['value'];\r\n    return { value: newValue };\r\n  }\r\n}\r\n\r\nfunction parseWheelEvent(event: WheelEvent): WheelEventArgs {\r\n  return {\r\n    ...parseMouseEvent(event),\r\n    deltaX: event.deltaX,\r\n    deltaY: event.deltaY,\r\n    deltaZ: event.deltaZ,\r\n    deltaMode: event.deltaMode,\r\n  };\r\n}\r\n\r\nfunction parsePointerEvent(event: PointerEvent): PointerEventArgs {\r\n  return {\r\n    ...parseMouseEvent(event),\r\n    pointerId: event.pointerId,\r\n    width: event.width,\r\n    height: event.height,\r\n    pressure: event.pressure,\r\n    tiltX: event.tiltX,\r\n    tiltY: event.tiltY,\r\n    pointerType: event.pointerType,\r\n    isPrimary: event.isPrimary,\r\n  };\r\n}\r\n\r\nfunction parseTouchEvent(event: TouchEvent): TouchEventArgs {\r\n  return {\r\n    detail: event.detail,\r\n    touches: parseTouch(event.touches),\r\n    targetTouches: parseTouch(event.targetTouches),\r\n    changedTouches: parseTouch(event.changedTouches),\r\n    ctrlKey: event.ctrlKey,\r\n    shiftKey: event.shiftKey,\r\n    altKey: event.altKey,\r\n    metaKey: event.metaKey,\r\n    type: event.type,\r\n  };\r\n}\r\n\r\nfunction parseFocusEvent(event: FocusEvent): FocusEventArgs {\r\n  return {\r\n    type: event.type,\r\n  };\r\n}\r\n\r\nfunction parseClipboardEvent(event: ClipboardEvent): ClipboardEventArgs {\r\n  return {\r\n    type: event.type,\r\n  };\r\n}\r\n\r\nfunction parseProgressEvent(event: ProgressEvent<EventTarget>): ProgressEventArgs {\r\n  return {\r\n    lengthComputable: event.lengthComputable,\r\n    loaded: event.loaded,\r\n    total: event.total,\r\n    type: event.type,\r\n  };\r\n}\r\n\r\nfunction parseErrorEvent(event: ErrorEvent): ErrorEventArgs {\r\n  return {\r\n    message: event.message,\r\n    filename: event.filename,\r\n    lineno: event.lineno,\r\n    colno: event.colno,\r\n    type: event.type,\r\n  };\r\n}\r\n\r\nfunction parseKeyboardEvent(event: KeyboardEvent): KeyboardEventArgs {\r\n  return {\r\n    key: event.key,\r\n    code: event.code,\r\n    location: event.location,\r\n    repeat: event.repeat,\r\n    ctrlKey: event.ctrlKey,\r\n    shiftKey: event.shiftKey,\r\n    altKey: event.altKey,\r\n    metaKey: event.metaKey,\r\n    type: event.type,\r\n    isComposing: event.isComposing,\r\n  };\r\n}\r\n\r\nfunction parseDragEvent(event: DragEvent): DragEventArgs {\r\n  return {\r\n    ...parseMouseEvent(event),\r\n    dataTransfer: event.dataTransfer ? {\r\n      dropEffect: event.dataTransfer.dropEffect,\r\n      effectAllowed: event.dataTransfer.effectAllowed,\r\n      files: Array.from(event.dataTransfer.files).map(f => f.name),\r\n      items: Array.from(event.dataTransfer.items).map(i => ({ kind: i.kind, type: i.type })),\r\n      types: event.dataTransfer.types,\r\n    } : null,\r\n  };\r\n}\r\n\r\nfunction parseTouch(touchList: TouchList): TouchPoint[] {\r\n  const touches: TouchPoint[] = [];\r\n\r\n  for (let i = 0; i < touchList.length; i++) {\r\n    const touch = touchList[i];\r\n    touches.push({\r\n      identifier: touch.identifier,\r\n      clientX: touch.clientX,\r\n      clientY: touch.clientY,\r\n      screenX: touch.screenX,\r\n      screenY: touch.screenY,\r\n      pageX: touch.pageX,\r\n      pageY: touch.pageY,\r\n    });\r\n  }\r\n  return touches;\r\n}\r\n\r\nfunction parseMouseEvent(event: MouseEvent): MouseEventArgs {\r\n  return {\r\n    detail: event.detail,\r\n    screenX: event.screenX,\r\n    screenY: event.screenY,\r\n    clientX: event.clientX,\r\n    clientY: event.clientY,\r\n    offsetX: event.offsetX,\r\n    offsetY: event.offsetY,\r\n    pageX: event.pageX,\r\n    pageY: event.pageY,\r\n    movementX: event.movementX,\r\n    movementY: event.movementY,\r\n    button: event.button,\r\n    buttons: event.buttons,\r\n    ctrlKey: event.ctrlKey,\r\n    shiftKey: event.shiftKey,\r\n    altKey: event.altKey,\r\n    metaKey: event.metaKey,\r\n    type: event.type,\r\n  };\r\n}\r\n\r\nfunction isCheckbox(element: Element | null): boolean {\r\n  return !!element && element.tagName === 'INPUT' && element.getAttribute('type') === 'checkbox';\r\n}\r\n\r\nconst timeBasedInputs = [\r\n  'date',\r\n  'datetime-local',\r\n  'month',\r\n  'time',\r\n  'week',\r\n];\r\n\r\nfunction isTimeBasedInput(element: Element): element is HTMLInputElement {\r\n  return timeBasedInputs.indexOf(element.getAttribute('type')!) !== -1;\r\n}\r\n\r\nfunction isMultipleSelectInput(element: Element): element is HTMLSelectElement {\r\n  return element instanceof HTMLSelectElement && element.type === 'select-multiple';\r\n}\r\n\r\nfunction normalizeTimeBasedValue(element: HTMLInputElement): string {\r\n  const value = element.value;\r\n  const type = element.type;\r\n  switch (type) {\r\n    case 'date':\r\n    case 'month':\r\n      return value;\r\n    case 'datetime-local':\r\n      return value.length === 16 ? value + ':00' : value; // Convert yyyy-MM-ddTHH:mm to yyyy-MM-ddTHH:mm:00\r\n    case 'time':\r\n      return value.length === 5 ? value + ':00' : value; // Convert hh:mm to hh:mm:00\r\n    case 'week':\r\n      // For now we are not going to normalize input type week as it is not trivial\r\n      return value;\r\n  }\r\n\r\n  throw new Error(`Invalid element type '${type}'.`);\r\n}\r\n\r\n// The following interfaces must be kept in sync with the EventArgs C# classes\r\n\r\ninterface ChangeEventArgs {\r\n  value: string | boolean | string[];\r\n}\r\n\r\ninterface DragEventArgs {\r\n  detail: number;\r\n  dataTransfer: DataTransferEventArgs | null;\r\n  screenX: number;\r\n  screenY: number;\r\n  clientX: number;\r\n  clientY: number;\r\n  button: number;\r\n  buttons: number;\r\n  ctrlKey: boolean;\r\n  shiftKey: boolean;\r\n  altKey: boolean;\r\n  metaKey: boolean;\r\n}\r\n\r\ninterface DataTransferEventArgs {\r\n  dropEffect: string;\r\n  effectAllowed: string;\r\n  files: readonly string[];\r\n  items: readonly DataTransferItem[];\r\n  types: readonly string[];\r\n}\r\n\r\ninterface DataTransferItem {\r\n  kind: string;\r\n  type: string;\r\n}\r\n\r\ninterface ErrorEventArgs {\r\n  message: string;\r\n  filename: string;\r\n  lineno: number;\r\n  colno: number;\r\n  type: string;\r\n\r\n  // omitting 'error' here since we'd have to serialize it, and it's not clear we will want to\r\n  // do that. https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\r\n}\r\n\r\ninterface KeyboardEventArgs {\r\n  key: string;\r\n  code: string;\r\n  location: number;\r\n  repeat: boolean;\r\n  ctrlKey: boolean;\r\n  shiftKey: boolean;\r\n  altKey: boolean;\r\n  metaKey: boolean;\r\n  type: string;\r\n  isComposing: boolean;\r\n}\r\n\r\ninterface MouseEventArgs {\r\n  detail: number;\r\n  screenX: number;\r\n  screenY: number;\r\n  clientX: number;\r\n  clientY: number;\r\n  offsetX: number;\r\n  offsetY: number;\r\n  pageX: number;\r\n  pageY: number;\r\n  movementX: number;\r\n  movementY: number;\r\n  button: number;\r\n  buttons: number;\r\n  ctrlKey: boolean;\r\n  shiftKey: boolean;\r\n  altKey: boolean;\r\n  metaKey: boolean;\r\n  type: string;\r\n}\r\n\r\ninterface PointerEventArgs extends MouseEventArgs {\r\n  pointerId: number;\r\n  width: number;\r\n  height: number;\r\n  pressure: number;\r\n  tiltX: number;\r\n  tiltY: number;\r\n  pointerType: string;\r\n  isPrimary: boolean;\r\n}\r\n\r\ninterface ProgressEventArgs {\r\n  lengthComputable: boolean;\r\n  loaded: number;\r\n  total: number;\r\n  type: string;\r\n}\r\n\r\ninterface TouchEventArgs {\r\n  detail: number;\r\n  touches: TouchPoint[];\r\n  targetTouches: TouchPoint[];\r\n  changedTouches: TouchPoint[];\r\n  ctrlKey: boolean;\r\n  shiftKey: boolean;\r\n  altKey: boolean;\r\n  metaKey: boolean;\r\n  type: string;\r\n}\r\n\r\ninterface TouchPoint {\r\n  identifier: number;\r\n  screenX: number;\r\n  screenY: number;\r\n  clientX: number;\r\n  clientY: number;\r\n  pageX: number;\r\n  pageY: number;\r\n}\r\n\r\ninterface WheelEventArgs extends MouseEventArgs {\r\n  deltaX: number;\r\n  deltaY: number;\r\n  deltaZ: number;\r\n  deltaMode: number;\r\n}\r\n\r\ninterface FocusEventArgs {\r\n  type: string;\r\n}\r\n\r\ninterface ClipboardEventArgs {\r\n  type: string;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DotNet } from '@microsoft/dotnet-js-interop';\r\n\r\nconst pendingRootComponentContainerNamePrefix = '__bl-dynamic-root:';\r\nconst pendingRootComponentContainers = new Map<string, Element>();\r\nlet nextPendingDynamicRootComponentIdentifier = 0;\r\n\r\ntype ComponentParameters = object | null | undefined;\r\n\r\nlet manager: DotNet.DotNetObject | undefined;\r\nlet jsComponentParametersByIdentifier: JSComponentParametersByIdentifier;\r\n\r\n// These are the public APIs at Blazor.rootComponents.*\r\nexport const RootComponentsFunctions = {\r\n  async add(toElement: Element, componentIdentifier: string, initialParameters: ComponentParameters): Promise<DynamicRootComponent> {\r\n    if (!initialParameters) {\r\n      throw new Error('initialParameters must be an object, even if empty.');\r\n    }\r\n\r\n    // Track the container so we can use it when the component gets attached to the document via a selector\r\n    const containerIdentifier = pendingRootComponentContainerNamePrefix + (++nextPendingDynamicRootComponentIdentifier).toString();\r\n    pendingRootComponentContainers.set(containerIdentifier, toElement);\r\n\r\n    // Instruct .NET to add and render the new root component\r\n    const componentId = await getRequiredManager().invokeMethodAsync<number>('AddRootComponent', componentIdentifier, containerIdentifier);\r\n    const component = new DynamicRootComponent(componentId, jsComponentParametersByIdentifier[componentIdentifier]);\r\n    await component.setParameters(initialParameters);\r\n    return component;\r\n  },\r\n};\r\n\r\nexport function getAndRemovePendingRootComponentContainer(containerIdentifier: string): Element | undefined {\r\n  const container = pendingRootComponentContainers.get(containerIdentifier);\r\n  if (container) {\r\n    pendingRootComponentContainers.delete(containerIdentifier);\r\n    return container;\r\n  }\r\n}\r\n\r\nclass EventCallbackWrapper {\r\n  private _callback: any;\r\n\r\n  private _selfJSObjectReference: unknown;\r\n\r\n  invoke(arg: unknown) {\r\n    return this._callback(arg);\r\n  }\r\n\r\n  setCallback(callback: unknown): void {\r\n    if (!this._selfJSObjectReference) {\r\n      this._selfJSObjectReference = DotNet.createJSObjectReference(this);\r\n    }\r\n\r\n    this._callback = callback;\r\n  }\r\n\r\n  getJSObjectReference() {\r\n    return this._selfJSObjectReference;\r\n  }\r\n\r\n  dispose() {\r\n    if (this._selfJSObjectReference) {\r\n      DotNet.disposeJSObjectReference(this._selfJSObjectReference);\r\n    }\r\n  }\r\n}\r\n\r\nclass DynamicRootComponent {\r\n  private _componentId: number | null;\r\n\r\n  private readonly _jsEventCallbackWrappers = new Map<string, EventCallbackWrapper>();\r\n\r\n  constructor(componentId: number, parameters: JSComponentParameter[]) {\r\n    this._componentId = componentId;\r\n\r\n    for (const parameter of parameters) {\r\n      if (parameter.type === 'eventcallback') {\r\n        this._jsEventCallbackWrappers.set(parameter.name.toLowerCase(), new EventCallbackWrapper());\r\n      }\r\n    }\r\n  }\r\n\r\n  setParameters(parameters: ComponentParameters) {\r\n    const mappedParameters = {};\r\n    const entries = Object.entries(parameters || {});\r\n    const parameterCount = entries.length;\r\n\r\n    for (const [key, value] of entries) {\r\n      const callbackWrapper = this._jsEventCallbackWrappers.get(key.toLowerCase());\r\n\r\n      if (!callbackWrapper || !value) {\r\n        mappedParameters[key] = value;\r\n        continue;\r\n      }\r\n\r\n      callbackWrapper.setCallback(value);\r\n      mappedParameters[key] = callbackWrapper.getJSObjectReference();\r\n    }\r\n\r\n    return getRequiredManager().invokeMethodAsync('SetRootComponentParameters', this._componentId, parameterCount, mappedParameters);\r\n  }\r\n\r\n  async dispose() {\r\n    if (this._componentId !== null) {\r\n      await getRequiredManager().invokeMethodAsync('RemoveRootComponent', this._componentId);\r\n      this._componentId = null; // Ensure it can't be used again\r\n\r\n      for (const jsEventCallbackWrapper of this._jsEventCallbackWrappers.values()) {\r\n        jsEventCallbackWrapper.dispose();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Called by the framework\r\nexport function enableJSRootComponents(\r\n  managerInstance: DotNet.DotNetObject,\r\n  jsComponentParameters: JSComponentParametersByIdentifier,\r\n  jsComponentInitializers: JSComponentIdentifiersByInitializer\r\n): void {\r\n  if (manager) {\r\n    // This will only happen in very nonstandard cases where someone has multiple hosts.\r\n    // It's up to the developer to ensure that only one of them enables dynamic root components.\r\n    throw new Error('Dynamic root components have already been enabled.');\r\n  }\r\n\r\n  manager = managerInstance;\r\n  jsComponentParametersByIdentifier = jsComponentParameters;\r\n\r\n  // Call the registered initializers. This is an arbitrary subset of the JS component types that are registered\r\n  // on the .NET side - just those of them that require some JS-side initialization (e.g., to register them\r\n  // as custom elements).\r\n  for (const [initializerIdentifier, componentIdentifiers] of Object.entries(jsComponentInitializers)) {\r\n    const initializerFunc = DotNet.findJSFunction(initializerIdentifier, 0) as JSComponentInitializerCallback;\r\n    for (const componentIdentifier of componentIdentifiers) {\r\n      const parameters = jsComponentParameters[componentIdentifier];\r\n      initializerFunc(componentIdentifier, parameters);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getRequiredManager(): DotNet.DotNetObject {\r\n  if (!manager) {\r\n    throw new Error('Dynamic root components have not been enabled in this application.');\r\n  }\r\n\r\n  return manager;\r\n}\r\n\r\n// Keep in sync with equivalent in JSComponentConfigurationStore.cs\r\n// These are an internal implementation detail not exposed in the registration APIs.\r\nexport type JSComponentParametersByIdentifier = { [identifier: string]: JSComponentParameter[] };\r\nexport type JSComponentIdentifiersByInitializer = { [initializer: string]: string[] };\r\n\r\n// The following is public API\r\nexport interface JSComponentInitializerCallback {\r\n  (identifier: string, parameters: JSComponentParameter[]): void;\r\n}\r\n\r\nexport interface JSComponentParameter {\r\n  name: string;\r\n  type: JSComponentParameterType;\r\n}\r\n\r\n// JSON-primitive types, plus for those whose .NET equivalent isn't nullable, a '?' to indicate nullability\r\n// This allows custom element authors to coerce attribute strings into the appropriate type\r\nexport type JSComponentParameterType = 'string' | 'boolean' | 'boolean?' | 'number' | 'number?' | 'object' | 'eventcallback';\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DotNet } from '@microsoft/dotnet-js-interop';\r\nimport { EventDescriptor } from './Events/EventDelegator';\r\nimport { enableJSRootComponents, JSComponentParametersByIdentifier, JSComponentIdentifiersByInitializer } from './JSRootComponents';\r\n\r\nconst interopMethodsByRenderer = new Map<number, DotNet.DotNetObject>();\r\nconst rendererAttachedListeners: ((browserRendererId: number) => void)[] = [];\r\nconst rendererByIdResolverMap: Map<number, [() => void | undefined, Promise<void> | undefined]> = new Map();\r\n\r\nexport function attachRendererIdResolver(rendererId: number, resolver: () => void | undefined, promise: Promise<void> | undefined) {\r\n  rendererByIdResolverMap.set(rendererId, [resolver, promise]);\r\n}\r\n\r\nexport function getRendererAttachedPromise(rendererId: number): Promise<void> | undefined {\r\n  return rendererByIdResolverMap.get(rendererId)?.[1];\r\n}\r\n\r\nexport function attachWebRendererInterop(\r\n  rendererId: number,\r\n  interopMethods: DotNet.DotNetObject,\r\n  jsComponentParameters?: JSComponentParametersByIdentifier,\r\n  jsComponentInitializers?: JSComponentIdentifiersByInitializer,\r\n): void {\r\n  if (interopMethodsByRenderer.has(rendererId)) {\r\n    throw new Error(`Interop methods are already registered for renderer ${rendererId}`);\r\n  }\r\n\r\n  interopMethodsByRenderer.set(rendererId, interopMethods);\r\n\r\n  if (jsComponentParameters && jsComponentInitializers && Object.keys(jsComponentParameters).length > 0) {\r\n    const manager = getInteropMethods(rendererId);\r\n    enableJSRootComponents(manager, jsComponentParameters, jsComponentInitializers);\r\n  }\r\n\r\n  rendererByIdResolverMap.get(rendererId)?.[0]?.();\r\n\r\n  invokeRendererAttachedListeners(rendererId);\r\n}\r\n\r\nexport function detachWebRendererInterop(rendererId: number): DotNet.DotNetObject {\r\n  const interopMethods = interopMethodsByRenderer.get(rendererId);\r\n  if (!interopMethods) {\r\n    throw new Error(`Interop methods are not registered for renderer ${rendererId}`);\r\n  }\r\n\r\n  interopMethodsByRenderer.delete(rendererId);\r\n  return interopMethods;\r\n}\r\n\r\nexport function isRendererAttached(browserRendererId: number): boolean {\r\n  return interopMethodsByRenderer.has(browserRendererId);\r\n}\r\n\r\nexport function registerRendererAttachedListener(listener: (browserRendererId: number) => void) {\r\n  rendererAttachedListeners.push(listener);\r\n}\r\n\r\nfunction invokeRendererAttachedListeners(browserRendererId: number) {\r\n  for (const listener of rendererAttachedListeners) {\r\n    listener(browserRendererId);\r\n  }\r\n}\r\n\r\nexport function dispatchEvent(browserRendererId: number, eventDescriptor: EventDescriptor, eventArgs: any): void {\r\n  return dispatchEventMiddleware(browserRendererId, eventDescriptor.eventHandlerId, () => {\r\n    const interopMethods = getInteropMethods(browserRendererId);\r\n    return interopMethods.invokeMethodAsync('DispatchEventAsync', eventDescriptor, eventArgs);\r\n  });\r\n}\r\n\r\nexport function updateRootComponents(browserRendererId: number, operationsJson: string): Promise<void> {\r\n  const interopMethods = getInteropMethods(browserRendererId);\r\n  return interopMethods.invokeMethodAsync('UpdateRootComponents', operationsJson);\r\n}\r\n\r\nfunction getInteropMethods(rendererId: number): DotNet.DotNetObject {\r\n  const interopMethods = interopMethodsByRenderer.get(rendererId);\r\n  if (!interopMethods) {\r\n    throw new Error(`No interop methods are registered for renderer ${rendererId}`);\r\n  }\r\n\r\n  return interopMethods;\r\n}\r\n\r\n// On some hosting platforms, we may need to defer the event dispatch, so they can register this middleware to do so\r\ntype DispatchEventMiddlware = (browserRendererId: number, eventHandlerId: number, continuation: () => void) => void;\r\n\r\nlet dispatchEventMiddleware: DispatchEventMiddlware = (browserRendererId, eventHandlerId, continuation) => continuation();\r\nexport function addDispatchEventMiddleware(middleware: DispatchEventMiddlware): void {\r\n  const next = dispatchEventMiddleware;\r\n  dispatchEventMiddleware = (browserRendererId, eventHandlerId, continuation) => {\r\n    middleware(browserRendererId, eventHandlerId, () => next(browserRendererId, eventHandlerId, continuation));\r\n  };\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { EventFieldInfo } from './EventFieldInfo';\r\nimport { eventNameAliasRegisteredCallbacks, getBrowserEventName, getEventNameAliases, getEventTypeOptions } from './EventTypes';\r\nimport { dispatchEvent } from '../WebRendererInteropMethods';\r\n\r\nconst nonBubblingEvents = toLookup([\r\n  'abort',\r\n  'blur',\r\n  'cancel',\r\n  'canplay',\r\n  'canplaythrough',\r\n  'change',\r\n  'close',\r\n  'cuechange',\r\n  'durationchange',\r\n  'emptied',\r\n  'ended',\r\n  'error',\r\n  'focus',\r\n  'load',\r\n  'loadeddata',\r\n  'loadedmetadata',\r\n  'loadend',\r\n  'loadstart',\r\n  'mouseenter',\r\n  'mouseleave',\r\n  'pointerenter',\r\n  'pointerleave',\r\n  'pause',\r\n  'play',\r\n  'playing',\r\n  'progress',\r\n  'ratechange',\r\n  'reset',\r\n  'scroll',\r\n  'seeked',\r\n  'seeking',\r\n  'stalled',\r\n  'submit',\r\n  'suspend',\r\n  'timeupdate',\r\n  'toggle',\r\n  'unload',\r\n  'volumechange',\r\n  'waiting',\r\n  'DOMNodeInsertedIntoDocument',\r\n  'DOMNodeRemovedFromDocument',\r\n]);\r\n\r\nconst alwaysPreventDefaultEvents: { [eventType: string]: boolean } = { submit: true };\r\n\r\nconst disableableEventNames = toLookup([\r\n  'click',\r\n  'dblclick',\r\n  'mousedown',\r\n  'mousemove',\r\n  'mouseup',\r\n]);\r\n\r\n// Responsible for adding/removing the eventInfo on an expando property on DOM elements, and\r\n// calling an EventInfoStore that deals with registering/unregistering the underlying delegated\r\n// event listeners as required (and also maps actual events back to the given callback).\r\nexport class EventDelegator {\r\n  private static nextEventDelegatorId = 0;\r\n\r\n  private readonly eventsCollectionKey: string;\r\n\r\n  private readonly afterClickCallbacks: ((event: MouseEvent) => void)[] = [];\r\n\r\n  private eventInfoStore: EventInfoStore;\r\n\r\n  constructor(private browserRendererId: number) {\r\n    const eventDelegatorId = ++EventDelegator.nextEventDelegatorId;\r\n    this.eventsCollectionKey = `_blazorEvents_${eventDelegatorId}`;\r\n    this.eventInfoStore = new EventInfoStore(this.onGlobalEvent.bind(this));\r\n  }\r\n\r\n  public setListener(element: Element, eventName: string, eventHandlerId: number, renderingComponentId: number): void {\r\n    const infoForElement = this.getEventHandlerInfosForElement(element, true)!;\r\n    const existingHandler = infoForElement.getHandler(eventName);\r\n\r\n    if (existingHandler) {\r\n      // We can cheaply update the info on the existing object and don't need any other housekeeping\r\n      // Note that this also takes care of updating the eventHandlerId on the existing handler object\r\n      this.eventInfoStore.update(existingHandler.eventHandlerId, eventHandlerId);\r\n    } else {\r\n      // Go through the whole flow which might involve registering a new global handler\r\n      const newInfo = { element, eventName, eventHandlerId, renderingComponentId };\r\n      this.eventInfoStore.add(newInfo);\r\n      infoForElement.setHandler(eventName, newInfo);\r\n    }\r\n  }\r\n\r\n  public getHandler(eventHandlerId: number): EventHandlerInfo {\r\n    return this.eventInfoStore.get(eventHandlerId);\r\n  }\r\n\r\n  public removeListener(eventHandlerId: number): void {\r\n    // This method gets called whenever the .NET-side code reports that a certain event handler\r\n    // has been disposed. However we will already have disposed the info about that handler if\r\n    // the eventHandlerId for the (element,eventName) pair was replaced during diff application.\r\n    const info = this.eventInfoStore.remove(eventHandlerId);\r\n    if (info) {\r\n      // Looks like this event handler wasn't already disposed\r\n      // Remove the associated data from the DOM element\r\n      const element = info.element;\r\n      const elementEventInfos = this.getEventHandlerInfosForElement(element, false);\r\n      if (elementEventInfos) {\r\n        elementEventInfos.removeHandler(info.eventName);\r\n      }\r\n    }\r\n  }\r\n\r\n  public notifyAfterClick(callback: (event: MouseEvent) => void): void {\r\n    // This is extremely special-case. It's needed so that navigation link click interception\r\n    // can be sure to run *after* our synthetic bubbling process. If a need arises, we can\r\n    // generalise this, but right now it's a purely internal detail.\r\n    this.afterClickCallbacks.push(callback);\r\n    this.eventInfoStore.addGlobalListener('click'); // Ensure we always listen for this\r\n  }\r\n\r\n  public setStopPropagation(element: Element, eventName: string, value: boolean): void {\r\n    const infoForElement = this.getEventHandlerInfosForElement(element, true)!;\r\n    infoForElement.stopPropagation(eventName, value);\r\n  }\r\n\r\n  public setPreventDefault(element: Element, eventName: string, value: boolean): void {\r\n    const infoForElement = this.getEventHandlerInfosForElement(element, true)!;\r\n    infoForElement.preventDefault(eventName, value);\r\n  }\r\n\r\n  private onGlobalEvent(evt: Event) {\r\n    if (!(evt.target instanceof Element)) {\r\n      return;\r\n    }\r\n\r\n    // Always dispatch to any listeners for the original underlying browser event name\r\n    this.dispatchGlobalEventToAllElements(evt.type, evt);\r\n\r\n    // If this event name has aliases, dispatch for those listeners too\r\n    const eventNameAliases = getEventNameAliases(evt.type);\r\n    eventNameAliases && eventNameAliases.forEach(alias =>\r\n      this.dispatchGlobalEventToAllElements(alias, evt));\r\n\r\n    // Special case for navigation interception\r\n    if (evt.type === 'click') {\r\n      this.afterClickCallbacks.forEach(callback => callback(evt as MouseEvent));\r\n    }\r\n  }\r\n\r\n  private dispatchGlobalEventToAllElements(eventName: string, browserEvent: Event) {\r\n    // Note that 'eventName' can be an alias. For example, eventName may be 'click.special'\r\n    // while browserEvent.type may be 'click'.\r\n\r\n    // Use the event's 'path' rather than the chain of parent nodes, since the path gives\r\n    // visibility into shadow roots.\r\n    const path = browserEvent.composedPath();\r\n\r\n    // Scan up the element hierarchy, looking for any matching registered event handlers\r\n    let candidateEventTarget = path.shift();\r\n    let eventArgs: unknown = null; // Populate lazily\r\n    let eventArgsIsPopulated = false;\r\n    const eventIsNonBubbling = Object.prototype.hasOwnProperty.call(nonBubblingEvents, eventName);\r\n    let stopPropagationWasRequested = false;\r\n    while (candidateEventTarget) {\r\n      const candidateElement = candidateEventTarget as Element;\r\n      const handlerInfos = this.getEventHandlerInfosForElement(candidateElement, false);\r\n      if (handlerInfos) {\r\n        const handlerInfo = handlerInfos.getHandler(eventName);\r\n        if (handlerInfo && !eventIsDisabledOnElement(candidateElement, browserEvent.type)) {\r\n          // We are going to raise an event for this element, so prepare info needed by the .NET code\r\n          if (!eventArgsIsPopulated) {\r\n            const eventOptionsIfRegistered = getEventTypeOptions(eventName);\r\n            // For back-compat, if there's no registered createEventArgs, we supply empty event args (not null).\r\n            // But if there is a registered createEventArgs, it can supply anything (including null).\r\n            eventArgs = eventOptionsIfRegistered?.createEventArgs\r\n              ? eventOptionsIfRegistered.createEventArgs(browserEvent)\r\n              : {};\r\n            eventArgsIsPopulated = true;\r\n          }\r\n\r\n          // For certain built-in events, having any .NET handler implicitly means we will prevent\r\n          // the browser's default behavior. This has to be based on the original browser event type name,\r\n          // not any alias (e.g., if you create a custom 'submit' variant, it should still preventDefault).\r\n          if (Object.prototype.hasOwnProperty.call(alwaysPreventDefaultEvents, browserEvent.type)) {\r\n            browserEvent.preventDefault();\r\n          }\r\n\r\n          dispatchEvent(this.browserRendererId, {\r\n            eventHandlerId: handlerInfo.eventHandlerId,\r\n            eventName: eventName,\r\n            eventFieldInfo: EventFieldInfo.fromEvent(handlerInfo.renderingComponentId, browserEvent),\r\n          }, eventArgs);\r\n        }\r\n\r\n        if (handlerInfos.stopPropagation(eventName)) {\r\n          stopPropagationWasRequested = true;\r\n        }\r\n\r\n        if (handlerInfos.preventDefault(eventName)) {\r\n          browserEvent.preventDefault();\r\n        }\r\n      }\r\n\r\n      candidateEventTarget = (eventIsNonBubbling || stopPropagationWasRequested) ? undefined : path.shift();\r\n    }\r\n  }\r\n\r\n  private getEventHandlerInfosForElement(element: Element, createIfNeeded: boolean): EventHandlerInfosForElement | null {\r\n    if (Object.prototype.hasOwnProperty.call(element, this.eventsCollectionKey)) {\r\n      return element[this.eventsCollectionKey];\r\n    } else if (createIfNeeded) {\r\n      return (element[this.eventsCollectionKey] = new EventHandlerInfosForElement());\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n// Responsible for adding and removing the global listener when the number of listeners\r\n// for a given event name changes between zero and nonzero\r\nclass EventInfoStore {\r\n  private infosByEventHandlerId: { [eventHandlerId: number]: EventHandlerInfo } = {};\r\n\r\n  private countByEventName: { [eventName: string]: number } = {};\r\n\r\n  constructor(private globalListener: EventListener) {\r\n    eventNameAliasRegisteredCallbacks.push(this.handleEventNameAliasAdded.bind(this));\r\n  }\r\n\r\n  public add(info: EventHandlerInfo) {\r\n    if (this.infosByEventHandlerId[info.eventHandlerId]) {\r\n      // Should never happen, but we want to know if it does\r\n      throw new Error(`Event ${info.eventHandlerId} is already tracked`);\r\n    }\r\n\r\n    this.infosByEventHandlerId[info.eventHandlerId] = info;\r\n\r\n    this.addGlobalListener(info.eventName);\r\n  }\r\n\r\n  public get(eventHandlerId: number) {\r\n    return this.infosByEventHandlerId[eventHandlerId];\r\n  }\r\n\r\n  public addGlobalListener(eventName: string) {\r\n    // If this event name is an alias, update the global listener for the corresponding browser event\r\n    eventName = getBrowserEventName(eventName);\r\n\r\n    if (Object.prototype.hasOwnProperty.call(this.countByEventName, eventName)) {\r\n      this.countByEventName[eventName]++;\r\n    } else {\r\n      this.countByEventName[eventName] = 1;\r\n\r\n      // To make delegation work with non-bubbling events, register a 'capture' listener.\r\n      // We preserve the non-bubbling behavior by only dispatching such events to the targeted element.\r\n      const useCapture = Object.prototype.hasOwnProperty.call(nonBubblingEvents, eventName);\r\n      document.addEventListener(eventName, this.globalListener, useCapture);\r\n    }\r\n  }\r\n\r\n  public update(oldEventHandlerId: number, newEventHandlerId: number) {\r\n    if (Object.prototype.hasOwnProperty.call(this.infosByEventHandlerId, newEventHandlerId)) {\r\n      // Should never happen, but we want to know if it does\r\n      throw new Error(`Event ${newEventHandlerId} is already tracked`);\r\n    }\r\n\r\n    // Since we're just updating the event handler ID, there's no need to update the global counts\r\n    const info = this.infosByEventHandlerId[oldEventHandlerId];\r\n    delete this.infosByEventHandlerId[oldEventHandlerId];\r\n    info.eventHandlerId = newEventHandlerId;\r\n    this.infosByEventHandlerId[newEventHandlerId] = info;\r\n  }\r\n\r\n  public remove(eventHandlerId: number): EventHandlerInfo {\r\n    const info = this.infosByEventHandlerId[eventHandlerId];\r\n    if (info) {\r\n      delete this.infosByEventHandlerId[eventHandlerId];\r\n\r\n      // If this event name is an alias, update the global listener for the corresponding browser event\r\n      const eventName = getBrowserEventName(info.eventName);\r\n\r\n      if (--this.countByEventName[eventName] === 0) {\r\n        delete this.countByEventName[eventName];\r\n        document.removeEventListener(eventName, this.globalListener);\r\n      }\r\n    }\r\n\r\n    return info;\r\n  }\r\n\r\n  private handleEventNameAliasAdded(aliasEventName, browserEventName) {\r\n    // If an event name alias gets registered later, we need to update the global listener\r\n    // registrations to match. This makes it equivalent to the alias having been registered\r\n    // before the elements with event handlers got rendered.\r\n    if (Object.prototype.hasOwnProperty.call(this.countByEventName, aliasEventName)) {\r\n      // Delete old\r\n      const countByAliasEventName = this.countByEventName[aliasEventName];\r\n      delete this.countByEventName[aliasEventName];\r\n      document.removeEventListener(aliasEventName, this.globalListener);\r\n\r\n      // Ensure corresponding count is added to new\r\n      this.addGlobalListener(browserEventName);\r\n      this.countByEventName[browserEventName] += countByAliasEventName - 1;\r\n    }\r\n  }\r\n}\r\n\r\nclass EventHandlerInfosForElement {\r\n  // Although we *could* track multiple event handlers per (element, eventName) pair\r\n  // (since they have distinct eventHandlerId values), there's no point doing so because\r\n  // our programming model is that you declare event handlers as attributes. An element\r\n  // can only have one attribute with a given name, hence only one event handler with\r\n  // that name at any one time.\r\n  // So to keep things simple, only track one EventHandlerInfo per (element, eventName)\r\n  private handlers: { [eventName: string]: EventHandlerInfo } = {};\r\n\r\n  private preventDefaultFlags: { [eventName: string]: boolean } | null = null;\r\n\r\n  private stopPropagationFlags: { [eventName: string]: boolean } | null = null;\r\n\r\n  public getHandler(eventName: string): EventHandlerInfo | null {\r\n    return Object.prototype.hasOwnProperty.call(this.handlers, eventName) ? this.handlers[eventName] : null;\r\n  }\r\n\r\n  public setHandler(eventName: string, handler: EventHandlerInfo) {\r\n    this.handlers[eventName] = handler;\r\n  }\r\n\r\n  public removeHandler(eventName: string) {\r\n    delete this.handlers[eventName];\r\n  }\r\n\r\n  public preventDefault(eventName: string, setValue?: boolean): boolean {\r\n    if (setValue !== undefined) {\r\n      this.preventDefaultFlags = this.preventDefaultFlags || {};\r\n      this.preventDefaultFlags[eventName] = setValue;\r\n    }\r\n\r\n    return this.preventDefaultFlags ? this.preventDefaultFlags[eventName] : false;\r\n  }\r\n\r\n  public stopPropagation(eventName: string, setValue?: boolean): boolean {\r\n    if (setValue !== undefined) {\r\n      this.stopPropagationFlags = this.stopPropagationFlags || {};\r\n      this.stopPropagationFlags[eventName] = setValue;\r\n    }\r\n\r\n    return this.stopPropagationFlags ? this.stopPropagationFlags[eventName] : false;\r\n  }\r\n}\r\n\r\nexport interface EventDescriptor {\r\n  eventHandlerId: number;\r\n  eventName: string;\r\n  eventFieldInfo: EventFieldInfo | null;\r\n}\r\n\r\ninterface EventHandlerInfo {\r\n  element: Element;\r\n  eventName: string;\r\n  eventHandlerId: number;\r\n\r\n  // The component whose tree includes the event handler attribute frame, *not* necessarily the\r\n  // same component that will be re-rendered after the event is handled (since we re-render the\r\n  // component that supplied the delegate, not the one that rendered the event handler frame)\r\n  renderingComponentId: number;\r\n}\r\n\r\nfunction toLookup(items: string[]): { [key: string]: boolean } {\r\n  const result = {};\r\n  items.forEach(value => {\r\n    result[value] = true;\r\n  });\r\n  return result;\r\n}\r\n\r\nfunction eventIsDisabledOnElement(element: Element, rawBrowserEventName: string): boolean {\r\n  // We want to replicate the normal DOM event behavior that, for 'interactive' elements\r\n  // with a 'disabled' attribute, certain mouse events are suppressed\r\n  return (element instanceof HTMLButtonElement || element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement || element instanceof HTMLSelectElement)\r\n    && Object.prototype.hasOwnProperty.call(disableableEventNames, rawBrowserEventName)\r\n    && element.disabled;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ComponentDescriptor } from '../Services/ComponentDescriptorDiscovery';\r\n\r\n/*\r\n  A LogicalElement plays the same role as an Element instance from the point of view of the\r\n  API consumer. Inserting and removing logical elements updates the browser DOM just the same.\r\n\r\n  The difference is that, unlike regular DOM mutation APIs, the LogicalElement APIs don't use\r\n  the underlying DOM structure as the data storage for the element hierarchy. Instead, the\r\n  LogicalElement APIs take care of tracking hierarchical relationships separately. The point\r\n  of this is to permit a logical tree structure in which parent/child relationships don't\r\n  have to be materialized in terms of DOM element parent/child relationships. And the reason\r\n  why we want that is so that hierarchies of Razor components can be tracked even when those\r\n  components' render output need not be a single literal DOM element.\r\n\r\n  Consumers of the API don't need to know about the implementation, but how it's done is:\r\n  - Each LogicalElement is materialized in the DOM as either:\r\n    - A Node instance, for actual Node instances inserted using 'insertLogicalChild' or\r\n      for Element instances promoted to LogicalElement via 'toLogicalElement'\r\n    - A Comment instance, for 'logical container' instances inserted using 'createAndInsertLogicalContainer'\r\n  - Then, on that instance (i.e., the Node or Comment), we store an array of 'logical children'\r\n    instances, e.g.,\r\n      [firstChild, secondChild, thirdChild, ...]\r\n    ... plus we store a reference to the 'logical parent' (if any)\r\n  - The 'logical children' array means we can look up in O(1):\r\n    - The number of logical children (not currently implemented because not required, but trivial)\r\n    - The logical child at any given index\r\n  - Whenever a logical child is added or removed, we update the parent's array of logical children\r\n*/\r\n\r\nconst logicalChildrenPropname = Symbol();\r\nconst logicalParentPropname = Symbol();\r\nconst logicalRootDescriptorPropname = Symbol();\r\n\r\nexport function toLogicalRootCommentElement(descriptor: ComponentDescriptor): LogicalElement {\r\n  // Now that we support start/end comments as component delimiters we are going to be setting up\r\n  // adding the components rendered output as siblings of the start/end tags (between).\r\n  // For that to work, we need to appropriately configure the parent element to be a logical element\r\n  // with all their children being the child elements.\r\n  // For example, imagine you have\r\n  // <app>\r\n  // <div><p>Static content</p></div>\r\n  // <!-- start component\r\n  // <!-- end component\r\n  // <footer>Some other content</footer>\r\n  // <app>\r\n  // We want the parent element to be something like\r\n  // *app\r\n  // |- *div\r\n  // |- *component\r\n  // |- *footer\r\n  const { start, end } = descriptor;\r\n  const existingDescriptor = start[logicalRootDescriptorPropname];\r\n  if (existingDescriptor) {\r\n    if (existingDescriptor !== descriptor) {\r\n      throw new Error('The start component comment was already associated with another component descriptor.');\r\n    }\r\n    return start as unknown as LogicalElement;\r\n  }\r\n\r\n  const parent = start.parentNode;\r\n  if (!parent) {\r\n    throw new Error(`Comment not connected to the DOM ${start.textContent}`);\r\n  }\r\n\r\n  const parentLogicalElement = toLogicalElement(parent, /* allow existing contents */ true);\r\n  const children = getLogicalChildrenArray(parentLogicalElement);\r\n\r\n  start[logicalParentPropname] = parentLogicalElement;\r\n  start[logicalRootDescriptorPropname] = descriptor;\r\n  const startLogicalElement = toLogicalElement(start);\r\n\r\n  if (end) {\r\n    // We need to make each element between the start and end comments a logical child\r\n    // of the start node.\r\n    const rootCommentChildren = getLogicalChildrenArray(startLogicalElement);\r\n    const startNextChildIndex = Array.prototype.indexOf.call(children, startLogicalElement) + 1;\r\n    let lastMovedChild: LogicalElement | null = null;\r\n\r\n    while (lastMovedChild !== end as unknown as LogicalElement) {\r\n      const childToMove = children.splice(startNextChildIndex, 1)[0];\r\n      if (!childToMove) {\r\n        throw new Error('Could not find the end component comment in the parent logical node list');\r\n      }\r\n      childToMove[logicalParentPropname] = start;\r\n      rootCommentChildren.push(childToMove);\r\n      lastMovedChild = childToMove;\r\n    }\r\n  }\r\n\r\n  return startLogicalElement;\r\n}\r\n\r\nexport function toLogicalElement(element: Node, allowExistingContents?: boolean): LogicalElement {\r\n  if (logicalChildrenPropname in element) { // If it's already a logical element, leave it alone\r\n    return element as unknown as LogicalElement;\r\n  }\r\n\r\n  const childrenArray: LogicalElement[] = [];\r\n\r\n  if (element.childNodes.length > 0) {\r\n    // Normally it's good to assert that the element has started empty, because that's the usual\r\n    // situation and we probably have a bug if it's not. But for the elements that contain prerendered\r\n    // root components, we want to let them keep their content until we replace it.\r\n    if (!allowExistingContents) {\r\n      throw new Error('New logical elements must start empty, or allowExistingContents must be true');\r\n    }\r\n\r\n    element.childNodes.forEach(child => {\r\n      const childLogicalElement = toLogicalElement(child, /* allowExistingContents */ true);\r\n      childLogicalElement[logicalParentPropname] = element;\r\n      childrenArray.push(childLogicalElement);\r\n    });\r\n  }\r\n\r\n  element[logicalChildrenPropname] = childrenArray;\r\n  return element as unknown as LogicalElement;\r\n}\r\n\r\nexport function emptyLogicalElement(element: LogicalElement): void {\r\n  const childrenArray = getLogicalChildrenArray(element);\r\n  while (childrenArray.length) {\r\n    removeLogicalChild(element, 0);\r\n  }\r\n}\r\n\r\nexport function createAndInsertLogicalContainer(parent: LogicalElement, childIndex: number): LogicalElement {\r\n  const containerElement = document.createComment('!');\r\n  insertLogicalChild(containerElement, parent, childIndex);\r\n  return containerElement as unknown as LogicalElement;\r\n}\r\n\r\nexport function insertLogicalChildBefore(child: Node, parent: LogicalElement, before: LogicalElement | null): void {\r\n  const childrenArray = getLogicalChildrenArray(parent);\r\n  let childIndex: number;\r\n  if (before) {\r\n    childIndex = Array.prototype.indexOf.call(childrenArray, before);\r\n    if (childIndex < 0) {\r\n      throw new Error('Could not find logical element in the parent logical node list');\r\n    }\r\n  } else {\r\n    childIndex = childrenArray.length;\r\n  }\r\n  insertLogicalChild(child, parent, childIndex);\r\n}\r\n\r\nexport function insertLogicalChild(child: Node, parent: LogicalElement, childIndex: number): void {\r\n  const childAsLogicalElement = child as unknown as LogicalElement;\r\n\r\n  // If the child is a component comment with logical children, its children\r\n  // need to be inserted into the parent node\r\n  let nodeToInsert = child;\r\n  if (child instanceof Comment) {\r\n    const existingGranchildren = getLogicalChildrenArray(childAsLogicalElement);\r\n    if (existingGranchildren?.length > 0) {\r\n      const lastNodeToInsert = findLastDomNodeInRange(childAsLogicalElement);\r\n      const range = new Range();\r\n      range.setStartBefore(child);\r\n      range.setEndAfter(lastNodeToInsert);\r\n      nodeToInsert = range.extractContents();\r\n    }\r\n  }\r\n\r\n  // If the node we're inserting already has a logical parent,\r\n  // remove it from its sibling array\r\n  const existingLogicalParent = getLogicalParent(childAsLogicalElement);\r\n  if (existingLogicalParent) {\r\n    const existingSiblingArray = getLogicalChildrenArray(existingLogicalParent);\r\n    const existingChildIndex = Array.prototype.indexOf.call(existingSiblingArray, childAsLogicalElement);\r\n    existingSiblingArray.splice(existingChildIndex, 1);\r\n    delete childAsLogicalElement[logicalParentPropname];\r\n  }\r\n\r\n  const newSiblings = getLogicalChildrenArray(parent);\r\n  if (childIndex < newSiblings.length) {\r\n    // Insert\r\n    const nextSibling = newSiblings[childIndex] as any as Node;\r\n    nextSibling.parentNode!.insertBefore(nodeToInsert, nextSibling);\r\n    newSiblings.splice(childIndex, 0, childAsLogicalElement);\r\n  } else {\r\n    // Append\r\n    appendDomNode(nodeToInsert, parent);\r\n    newSiblings.push(childAsLogicalElement);\r\n  }\r\n\r\n  childAsLogicalElement[logicalParentPropname] = parent;\r\n  if (!(logicalChildrenPropname in childAsLogicalElement)) {\r\n    childAsLogicalElement[logicalChildrenPropname] = [];\r\n  }\r\n}\r\n\r\nexport function removeLogicalChild(parent: LogicalElement, childIndex: number): void {\r\n  const childrenArray = getLogicalChildrenArray(parent);\r\n  const childToRemove = childrenArray.splice(childIndex, 1)[0];\r\n\r\n  // If it's a logical container, also remove its descendants\r\n  if (childToRemove instanceof Comment) {\r\n    const grandchildrenArray = getLogicalChildrenArray(childToRemove);\r\n    if (grandchildrenArray) {\r\n      while (grandchildrenArray.length > 0) {\r\n        removeLogicalChild(childToRemove, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Finally, remove the node itself\r\n  const domNodeToRemove = childToRemove as any as Node;\r\n  domNodeToRemove.parentNode!.removeChild(domNodeToRemove);\r\n}\r\n\r\nexport function getLogicalParent(element: LogicalElement): LogicalElement | null {\r\n  return (element[logicalParentPropname] as LogicalElement) || null;\r\n}\r\n\r\nexport function getLogicalChild(parent: LogicalElement, childIndex: number): LogicalElement {\r\n  return getLogicalChildrenArray(parent)[childIndex];\r\n}\r\n\r\nexport function getLogicalRootDescriptor(element: LogicalElement): ComponentDescriptor {\r\n  return element[logicalRootDescriptorPropname] || null;\r\n}\r\n\r\n// SVG elements support `foreignObject` children that can hold arbitrary HTML.\r\n// For these scenarios, the parent SVG and `foreignObject` elements should\r\n// be rendered under the SVG namespace, while the HTML content should be rendered\r\n// under the XHTML namespace. If the correct namespaces are not provided, most\r\n// browsers will fail to render the foreign object content. Here, we ensure that if\r\n// we encounter a `foreignObject` in the SVG, then all its children will be placed\r\n// under the XHTML namespace.\r\nexport function isSvgElement(element: LogicalElement): boolean {\r\n  // Note: This check is intentionally case-sensitive since we expect this element\r\n  // to appear as a child of an SVG element and SVGs are case-sensitive.\r\n  const closestElement = getClosestDomElement(element) as any;\r\n  return closestElement.namespaceURI === 'http://www.w3.org/2000/svg' && closestElement['tagName'] !== 'foreignObject';\r\n}\r\n\r\nexport function getLogicalChildrenArray(element: LogicalElement): LogicalElement[] {\r\n  return element[logicalChildrenPropname] as LogicalElement[];\r\n}\r\n\r\nexport function getLogicalNextSibling(element: LogicalElement): LogicalElement | null {\r\n  const siblings = getLogicalChildrenArray(getLogicalParent(element)!);\r\n  const siblingIndex = Array.prototype.indexOf.call(siblings, element);\r\n  return siblings[siblingIndex + 1] || null;\r\n}\r\n\r\nexport function isLogicalElement(element: Node): boolean {\r\n  return logicalChildrenPropname in element;\r\n}\r\n\r\nexport function permuteLogicalChildren(parent: LogicalElement, permutationList: PermutationListEntry[]): void {\r\n  // The permutationList must represent a valid permutation, i.e., the list of 'from' indices\r\n  // is distinct, and the list of 'to' indices is a permutation of it. The algorithm here\r\n  // relies on that assumption.\r\n\r\n  // Each of the phases here has to happen separately, because each one is designed not to\r\n  // interfere with the indices or DOM entries used by subsequent phases.\r\n\r\n  // Phase 1: track which nodes we will move\r\n  const siblings = getLogicalChildrenArray(parent);\r\n  permutationList.forEach((listEntry: PermutationListEntryWithTrackingData) => {\r\n    listEntry.moveRangeStart = siblings[listEntry.fromSiblingIndex];\r\n    listEntry.moveRangeEnd = findLastDomNodeInRange(listEntry.moveRangeStart);\r\n  });\r\n\r\n  // Phase 2: insert markers\r\n  permutationList.forEach((listEntry: PermutationListEntryWithTrackingData) => {\r\n    const marker = document.createComment('marker');\r\n    listEntry.moveToBeforeMarker = marker;\r\n    const insertBeforeNode = siblings[listEntry.toSiblingIndex + 1] as any as Node;\r\n    if (insertBeforeNode) {\r\n      insertBeforeNode.parentNode!.insertBefore(marker, insertBeforeNode);\r\n    } else {\r\n      appendDomNode(marker, parent);\r\n    }\r\n  });\r\n\r\n  // Phase 3: move descendants & remove markers\r\n  permutationList.forEach((listEntry: PermutationListEntryWithTrackingData) => {\r\n    const insertBefore = listEntry.moveToBeforeMarker!;\r\n    const parentDomNode = insertBefore.parentNode!;\r\n    const elementToMove = listEntry.moveRangeStart!;\r\n    const moveEndNode = listEntry.moveRangeEnd!;\r\n    let nextToMove = elementToMove as unknown as Node | null;\r\n    while (nextToMove) {\r\n      const nextNext = nextToMove.nextSibling;\r\n      parentDomNode.insertBefore(nextToMove, insertBefore);\r\n\r\n      if (nextToMove === moveEndNode) {\r\n        break;\r\n      } else {\r\n        nextToMove = nextNext;\r\n      }\r\n    }\r\n\r\n    parentDomNode.removeChild(insertBefore);\r\n  });\r\n\r\n  // Phase 4: update siblings index\r\n  permutationList.forEach((listEntry: PermutationListEntryWithTrackingData) => {\r\n    siblings[listEntry.toSiblingIndex] = listEntry.moveRangeStart!;\r\n  });\r\n}\r\n\r\nexport function getClosestDomElement(logicalElement: LogicalElement): Element | (LogicalElement & DocumentFragment) {\r\n  if (logicalElement instanceof Element || logicalElement instanceof DocumentFragment) {\r\n    return logicalElement;\r\n  } else if (logicalElement instanceof Comment) {\r\n    return logicalElement.parentNode! as Element;\r\n  } else {\r\n    throw new Error('Not a valid logical element');\r\n  }\r\n}\r\n\r\nexport interface PermutationListEntry {\r\n  fromSiblingIndex: number,\r\n  toSiblingIndex: number,\r\n}\r\n\r\ninterface PermutationListEntryWithTrackingData extends PermutationListEntry {\r\n  // These extra properties are used internally when processing the permutation list\r\n  moveRangeStart?: LogicalElement,\r\n  moveRangeEnd?: Node,\r\n  moveToBeforeMarker?: Node,\r\n}\r\n\r\nfunction appendDomNode(child: Node, parent: LogicalElement) {\r\n  // This function only puts 'child' into the DOM in the right place relative to 'parent'\r\n  // It does not update the logical children array of anything\r\n  if (parent instanceof Element || parent instanceof DocumentFragment) {\r\n    parent.appendChild(child);\r\n  } else if (parent instanceof Comment) {\r\n    const parentLogicalNextSibling = getLogicalNextSibling(parent) as any as Node;\r\n    if (parentLogicalNextSibling) {\r\n      // Since the parent has a logical next-sibling, its appended child goes right before that\r\n      parentLogicalNextSibling.parentNode!.insertBefore(child, parentLogicalNextSibling);\r\n    } else {\r\n      // Since the parent has no logical next-sibling, keep recursing upwards until we find\r\n      // a logical ancestor that does have a next-sibling or is a physical element.\r\n      appendDomNode(child, getLogicalParent(parent)!);\r\n    }\r\n  } else {\r\n    // Should never happen\r\n    throw new Error(`Cannot append node because the parent is not a valid logical element. Parent: ${parent}`);\r\n  }\r\n}\r\n\r\n// Returns the final node (in depth-first evaluation order) that is a descendant of the logical element.\r\n// As such, the entire subtree is between 'element' and 'findLastDomNodeInRange(element)' inclusive.\r\nfunction findLastDomNodeInRange(element: LogicalElement): Node {\r\n  if (element instanceof Element || element instanceof DocumentFragment) {\r\n    return element;\r\n  }\r\n\r\n  const nextSibling = getLogicalNextSibling(element);\r\n  if (nextSibling) {\r\n    // Simple case: not the last logical sibling, so take the node before the next sibling\r\n    return (nextSibling as any as Node).previousSibling!;\r\n  } else {\r\n    // Harder case: there's no logical next-sibling, so recurse upwards until we find\r\n    // a logical ancestor that does have one, or a physical element\r\n    const logicalParent = getLogicalParent(element)!;\r\n    return logicalParent instanceof Element || logicalParent instanceof DocumentFragment\r\n      ? logicalParent.lastChild!\r\n      : findLastDomNodeInRange(logicalParent);\r\n  }\r\n}\r\n\r\n// Nominal type to represent a logical element without needing to allocate any object for instances\r\nexport interface LogicalElement { LogicalElement__DO_NOT_IMPLEMENT: any }\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DotNet } from '@microsoft/dotnet-js-interop';\r\n\r\nexport function applyCaptureIdToElement(element: Element, referenceCaptureId: string): void {\r\n  element.setAttribute(getCaptureIdAttributeName(referenceCaptureId), '');\r\n}\r\n\r\nfunction getElementByCaptureId(referenceCaptureId: string) {\r\n  const selector = `[${getCaptureIdAttributeName(referenceCaptureId)}]`;\r\n  return document.querySelector(selector);\r\n}\r\n\r\nfunction getCaptureIdAttributeName(referenceCaptureId: string) {\r\n  return `_bl_${referenceCaptureId}`;\r\n}\r\n\r\n// Support receiving ElementRef instances as args in interop calls\r\nconst elementRefKey = '__internalId'; // Keep in sync with ElementRef.cs\r\nDotNet.attachReviver((key, value) => {\r\n  if (value && typeof value === 'object' && Object.prototype.hasOwnProperty.call(value, elementRefKey) && typeof value[elementRefKey] === 'string') {\r\n    return getElementByCaptureId(value[elementRefKey]);\r\n  } else {\r\n    return value;\r\n  }\r\n});\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Updating the attributes/properties on DOM elements involves a whole range of special cases, because\r\n// depending on the element type, there are special rules for needing to update other properties or\r\n// to only perform the changes in a specific order.\r\n//\r\n// This module provides helpers for doing that, and is shared by the interactive renderer (BrowserRenderer)\r\n// and the SSR DOM merging logic.\r\n\r\nconst deferredValuePropname = '_blazorDeferredValue';\r\n\r\nexport function tryApplySpecialProperty(element: Element, name: string, value: string | null) {\r\n  switch (name) {\r\n    case 'value':\r\n      return tryApplyValueProperty(element, value);\r\n    case 'checked':\r\n      return tryApplyCheckedProperty(element, value);\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\nexport function applyAnyDeferredValue(element: Element) {\r\n  // We handle setting 'value' on a <select> in three different ways:\r\n  // [1] When inserting a corresponding <option>, in case you're dynamically adding options.\r\n  //     This is the case below.\r\n  // [2] After we finish inserting the <select>, in case the descendant options are being\r\n  //     added as an opaque markup block rather than individually. This is the other case below.\r\n  // [3] In case the the value of the select and the option value is changed in the same batch.\r\n  //     We just receive an attribute frame and have to set the select value afterwards.\r\n\r\n  // We also defer setting the 'value' property for <input> because certain types of inputs have\r\n  // default attribute values that may incorrectly constain the specified 'value'.\r\n  // For example, range inputs have default 'min' and 'max' attributes that may incorrectly\r\n  // clamp the 'value' property if it is applied before custom 'min' and 'max' attributes.\r\n\r\n  if (element instanceof HTMLOptionElement) {\r\n    // Situation 1\r\n    trySetSelectValueFromOptionElement(element);\r\n  } else if (deferredValuePropname in element) {\r\n    // Situation 2\r\n    const deferredValue = element[deferredValuePropname];\r\n    setDeferredElementValue(element, deferredValue);\r\n  }\r\n}\r\n\r\nfunction tryApplyCheckedProperty(element: Element, value: string | null) {\r\n  // Certain elements have built-in behaviour for their 'checked' property\r\n  if (element.tagName === 'INPUT') {\r\n    (element as any).checked = value !== null;\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction tryApplyValueProperty(element: Element, value: string | null): boolean {\r\n  // Certain elements have built-in behaviour for their 'value' property\r\n  if (value && element.tagName === 'INPUT') {\r\n    value = normalizeInputValue(value, element);\r\n  }\r\n\r\n  switch (element.tagName) {\r\n    case 'INPUT':\r\n    case 'SELECT':\r\n    case 'TEXTAREA': {\r\n      // <select> is special, in that anything we write to .value will be lost if there\r\n      // isn't yet a matching <option>. To maintain the expected behavior no matter the\r\n      // element insertion/update order, preserve the desired value separately so\r\n      // we can recover it when inserting any matching <option> or after inserting an\r\n      // entire markup block of descendants.\r\n\r\n      // We also defer setting the 'value' property for <input> because certain types of inputs have\r\n      // default attribute values that may incorrectly constain the specified 'value'.\r\n      // For example, range inputs have default 'min' and 'max' attributes that may incorrectly\r\n      // clamp the 'value' property if it is applied before custom 'min' and 'max' attributes.\r\n\r\n      if (value && element instanceof HTMLSelectElement && isMultipleSelectElement(element)) {\r\n        value = JSON.parse(value);\r\n      }\r\n\r\n      setDeferredElementValue(element, value);\r\n      element[deferredValuePropname] = value;\r\n\r\n      return true;\r\n    }\r\n    case 'OPTION': {\r\n      if (value || value === '') {\r\n        element.setAttribute('value', value);\r\n      } else {\r\n        element.removeAttribute('value');\r\n      }\r\n\r\n      // See above for why we have this special handling for <select>/<option>\r\n      // Situation 3\r\n      trySetSelectValueFromOptionElement(<HTMLOptionElement>element);\r\n      return true;\r\n    }\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\nfunction normalizeInputValue(value: string, element: Element): string {\r\n  // Time inputs (e.g. 'time' and 'datetime-local') misbehave on chromium-based\r\n  // browsers when a time is set that includes a seconds value of '00', most notably\r\n  // when entered from keyboard input. This behavior is not limited to specific\r\n  // 'step' attribute values, so we always remove the trailing seconds value if the\r\n  // time ends in '00'.\r\n  // Similarly, if a time-related element doesn't have any 'step' attribute, browsers\r\n  // treat this as \"round to whole number of minutes\" making it invalid to pass any\r\n  // 'seconds' value, so in that case we strip off the 'seconds' part of the value.\r\n\r\n  switch (element.getAttribute('type')) {\r\n    case 'time':\r\n      return value.length === 8 && (value.endsWith('00') || !element.hasAttribute('step'))\r\n        ? value.substring(0, 5)\r\n        : value;\r\n    case 'datetime-local':\r\n      return value.length === 19 && (value.endsWith('00') || !element.hasAttribute('step'))\r\n        ? value.substring(0, 16)\r\n        : value;\r\n    default:\r\n      return value;\r\n  }\r\n}\r\n\r\nfunction isMultipleSelectElement(element: HTMLSelectElement) {\r\n  return element.type === 'select-multiple';\r\n}\r\n\r\ntype BlazorHtmlSelectElement = HTMLSelectElement & { _blazorDeferredValue?: string };\r\n\r\nfunction setSingleSelectElementValue(element: HTMLSelectElement, value: string | null) {\r\n  // There's no sensible way to represent a select option with value 'null', because\r\n  // (1) HTML attributes can't have null values - the closest equivalent is absence of the attribute\r\n  // (2) When picking an <option> with no 'value' attribute, the browser treats the value as being the\r\n  //     *text content* on that <option> element. Trying to suppress that default behavior would involve\r\n  //     a long chain of special-case hacks, as well as being breaking vs 3.x.\r\n  // So, the most plausible 'null' equivalent is an empty string. It's unfortunate that people can't\r\n  // write <option value=@someNullVariable>, and that we can never distinguish between null and empty\r\n  // string in a bound <select>, but that's a limit in the representational power of HTML.\r\n  element.value = value || '';\r\n}\r\n\r\nfunction setMultipleSelectElementValue(element: HTMLSelectElement, value: string[] | null) {\r\n  value ||= [];\r\n  for (let i = 0; i < element.options.length; i++) {\r\n    element.options[i].selected = value.indexOf(element.options[i].value) !== -1;\r\n  }\r\n}\r\n\r\nfunction setDeferredElementValue(element: Element, value: any) {\r\n  if (element instanceof HTMLSelectElement) {\r\n    if (isMultipleSelectElement(element)) {\r\n      setMultipleSelectElementValue(element, value);\r\n    } else {\r\n      setSingleSelectElementValue(element, value);\r\n    }\r\n  } else {\r\n    (element as any).value = value;\r\n  }\r\n}\r\n\r\nfunction trySetSelectValueFromOptionElement(optionElement: HTMLOptionElement) {\r\n  const selectElem = findClosestAncestorSelectElement(optionElement);\r\n\r\n  if (!isBlazorSelectElement(selectElem)) {\r\n    return false;\r\n  }\r\n\r\n  if (isMultipleSelectElement(selectElem)) {\r\n    optionElement.selected = selectElem._blazorDeferredValue!.indexOf(optionElement.value) !== -1;\r\n  } else {\r\n    if (selectElem._blazorDeferredValue !== optionElement.value) {\r\n      return false;\r\n    }\r\n\r\n    setSingleSelectElementValue(selectElem, optionElement.value);\r\n    delete selectElem._blazorDeferredValue;\r\n  }\r\n\r\n  return true;\r\n\r\n  function isBlazorSelectElement(selectElem: HTMLSelectElement | null) : selectElem is BlazorHtmlSelectElement {\r\n    return !!selectElem && (deferredValuePropname in selectElem);\r\n  }\r\n}\r\n\r\nfunction findClosestAncestorSelectElement(element: Element | null) {\r\n  while (element) {\r\n    if (element instanceof HTMLSelectElement) {\r\n      return element;\r\n    } else {\r\n      element = element.parentElement;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { RenderBatch, ArrayBuilderSegment, RenderTreeEdit, RenderTreeFrame, EditType, FrameType, ArrayValues } from './RenderBatch/RenderBatch';\r\nimport { EventDelegator } from './Events/EventDelegator';\r\nimport { LogicalElement, PermutationListEntry, toLogicalElement, insertLogicalChild, removeLogicalChild, getLogicalParent, getLogicalChild, createAndInsertLogicalContainer, isSvgElement, permuteLogicalChildren, getClosestDomElement, emptyLogicalElement, getLogicalChildrenArray } from './LogicalElements';\r\nimport { applyCaptureIdToElement } from './ElementReferenceCapture';\r\nimport { attachToEventDelegator as attachNavigationManagerToEventDelegator } from '../Services/NavigationManager';\r\nimport { applyAnyDeferredValue, tryApplySpecialProperty } from './DomSpecialPropertyUtil';\r\nconst sharedTemplateElemForParsing = document.createElement('template');\r\nconst sharedSvgElemForParsing = document.createElementNS('http://www.w3.org/2000/svg', 'g');\r\nconst elementsToClearOnRootComponentRender = new Set<LogicalElement>();\r\nconst internalAttributeNamePrefix = '__internal_';\r\nconst eventPreventDefaultAttributeNamePrefix = 'preventDefault_';\r\nconst eventStopPropagationAttributeNamePrefix = 'stopPropagation_';\r\nconst interactiveRootComponentPropname = Symbol();\r\nconst preserveContentOnDisposalPropname = Symbol();\r\n\r\nexport class BrowserRenderer {\r\n  public eventDelegator: EventDelegator;\r\n\r\n  private rootComponentIds = new Set<number>();\r\n\r\n  private childComponentLocations: { [componentId: number]: LogicalElement } = {};\r\n\r\n  public constructor(browserRendererId: number) {\r\n    this.eventDelegator = new EventDelegator(browserRendererId);\r\n\r\n    // We don't yet know whether or not navigation interception will be enabled, but in case it will be,\r\n    // we wire up the navigation manager to the event delegator so it has the option to participate\r\n    // in the synthetic event bubbling process later\r\n    attachNavigationManagerToEventDelegator(this.eventDelegator);\r\n  }\r\n\r\n  public getRootComponentCount(): number {\r\n    return this.rootComponentIds.size;\r\n  }\r\n\r\n  public attachRootComponentToLogicalElement(componentId: number, element: LogicalElement, appendContent: boolean): void {\r\n    if (isInteractiveRootComponentElement(element)) {\r\n      throw new Error(`Root component '${componentId}' could not be attached because its target element is already associated with a root component`);\r\n    }\r\n\r\n    // If we want to append content to the end of the element, we create a new logical child container\r\n    // at the end of the element and treat that as the new parent.\r\n    if (appendContent) {\r\n      const indexAfterLastChild = getLogicalChildrenArray(element).length;\r\n      element = createAndInsertLogicalContainer(element, indexAfterLastChild);\r\n    }\r\n\r\n    markAsInteractiveRootComponentElement(element, true);\r\n    this.attachComponentToElement(componentId, element);\r\n    this.rootComponentIds.add(componentId);\r\n\r\n    elementsToClearOnRootComponentRender.add(element);\r\n  }\r\n\r\n  public updateComponent(batch: RenderBatch, componentId: number, edits: ArrayBuilderSegment<RenderTreeEdit>, referenceFrames: ArrayValues<RenderTreeFrame>): void {\r\n    const element = this.childComponentLocations[componentId];\r\n    if (!element) {\r\n      throw new Error(`No element is currently associated with component ${componentId}`);\r\n    }\r\n\r\n    // On the first render for each root component, clear any existing content (e.g., prerendered)\r\n    if (elementsToClearOnRootComponentRender.delete(element)) {\r\n      emptyLogicalElement(element);\r\n\r\n      if (element instanceof Comment) {\r\n        // We sanitize start comments by removing all the information from it now that we don't need it anymore\r\n        // as it adds noise to the DOM.\r\n        element.textContent = '!';\r\n      }\r\n    }\r\n\r\n    const ownerDocument = getClosestDomElement(element)?.getRootNode() as Document;\r\n    const activeElementBefore = ownerDocument && ownerDocument.activeElement;\r\n\r\n    this.applyEdits(batch, componentId, element, 0, edits, referenceFrames);\r\n\r\n    // Try to restore focus in case it was lost due to an element move\r\n    if ((activeElementBefore instanceof HTMLElement) && ownerDocument && ownerDocument.activeElement !== activeElementBefore) {\r\n      activeElementBefore.focus();\r\n    }\r\n  }\r\n\r\n  public disposeComponent(componentId: number): void {\r\n    if (this.rootComponentIds.delete(componentId)) {\r\n      // When disposing a root component, the container element won't be removed from the DOM (because there's\r\n      // no parent to remove that child), so we empty it to restore it to the state it was in before the root\r\n      // component was added.\r\n      const logicalElement = this.childComponentLocations[componentId];\r\n      markAsInteractiveRootComponentElement(logicalElement, false);\r\n\r\n      if (shouldPreserveContentOnInteractiveComponentDisposal(logicalElement)) {\r\n        elementsToClearOnRootComponentRender.add(logicalElement);\r\n      } else {\r\n        emptyLogicalElement(logicalElement);\r\n      }\r\n    }\r\n\r\n    delete this.childComponentLocations[componentId];\r\n  }\r\n\r\n  public disposeEventHandler(eventHandlerId: number): void {\r\n    this.eventDelegator.removeListener(eventHandlerId);\r\n  }\r\n\r\n  private attachComponentToElement(componentId: number, element: LogicalElement) {\r\n    this.childComponentLocations[componentId] = element;\r\n  }\r\n\r\n  private applyEdits(batch: RenderBatch, componentId: number, parent: LogicalElement, childIndex: number, edits: ArrayBuilderSegment<RenderTreeEdit>, referenceFrames: ArrayValues<RenderTreeFrame>) {\r\n    let currentDepth = 0;\r\n    let childIndexAtCurrentDepth = childIndex;\r\n    let permutationList: PermutationListEntry[] | undefined;\r\n\r\n    const arrayBuilderSegmentReader = batch.arrayBuilderSegmentReader;\r\n    const editReader = batch.editReader;\r\n    const frameReader = batch.frameReader;\r\n    const editsValues = arrayBuilderSegmentReader.values(edits);\r\n    const editsOffset = arrayBuilderSegmentReader.offset(edits);\r\n    const editsLength = arrayBuilderSegmentReader.count(edits);\r\n    const maxEditIndexExcl = editsOffset + editsLength;\r\n\r\n    for (let editIndex = editsOffset; editIndex < maxEditIndexExcl; editIndex++) {\r\n      const edit = batch.diffReader.editsEntry(editsValues, editIndex);\r\n      const editType = editReader.editType(edit);\r\n      switch (editType) {\r\n        case EditType.prependFrame: {\r\n          const frameIndex = editReader.newTreeIndex(edit);\r\n          const frame = batch.referenceFramesEntry(referenceFrames, frameIndex);\r\n          const siblingIndex = editReader.siblingIndex(edit);\r\n          this.insertFrame(batch, componentId, parent, childIndexAtCurrentDepth + siblingIndex, referenceFrames, frame, frameIndex);\r\n          break;\r\n        }\r\n        case EditType.removeFrame: {\r\n          const siblingIndex = editReader.siblingIndex(edit);\r\n          removeLogicalChild(parent, childIndexAtCurrentDepth + siblingIndex);\r\n          break;\r\n        }\r\n        case EditType.setAttribute: {\r\n          const frameIndex = editReader.newTreeIndex(edit);\r\n          const frame = batch.referenceFramesEntry(referenceFrames, frameIndex);\r\n          const siblingIndex = editReader.siblingIndex(edit);\r\n          const element = getLogicalChild(parent, childIndexAtCurrentDepth + siblingIndex);\r\n          if (element instanceof Element) {\r\n            this.applyAttribute(batch, componentId, element, frame);\r\n          } else {\r\n            throw new Error('Cannot set attribute on non-element child');\r\n          }\r\n          break;\r\n        }\r\n        case EditType.removeAttribute: {\r\n          // Note that we don't have to dispose the info we track about event handlers here, because the\r\n          // disposed event handler IDs are delivered separately (in the 'disposedEventHandlerIds' array)\r\n          const siblingIndex = editReader.siblingIndex(edit);\r\n          const element = getLogicalChild(parent, childIndexAtCurrentDepth + siblingIndex);\r\n          if (element instanceof Element) {\r\n            const attributeName = editReader.removedAttributeName(edit)!;\r\n            this.setOrRemoveAttributeOrProperty(element, attributeName, null);\r\n          } else {\r\n            throw new Error('Cannot remove attribute from non-element child');\r\n          }\r\n          break;\r\n        }\r\n        case EditType.updateText: {\r\n          const frameIndex = editReader.newTreeIndex(edit);\r\n          const frame = batch.referenceFramesEntry(referenceFrames, frameIndex);\r\n          const siblingIndex = editReader.siblingIndex(edit);\r\n          const textNode = getLogicalChild(parent, childIndexAtCurrentDepth + siblingIndex);\r\n          if (textNode instanceof Text) {\r\n            textNode.textContent = frameReader.textContent(frame);\r\n          } else {\r\n            throw new Error('Cannot set text content on non-text child');\r\n          }\r\n          break;\r\n        }\r\n        case EditType.updateMarkup: {\r\n          const frameIndex = editReader.newTreeIndex(edit);\r\n          const frame = batch.referenceFramesEntry(referenceFrames, frameIndex);\r\n          const siblingIndex = editReader.siblingIndex(edit);\r\n          removeLogicalChild(parent, childIndexAtCurrentDepth + siblingIndex);\r\n          this.insertMarkup(batch, parent, childIndexAtCurrentDepth + siblingIndex, frame);\r\n          break;\r\n        }\r\n        case EditType.stepIn: {\r\n          const siblingIndex = editReader.siblingIndex(edit);\r\n          parent = getLogicalChild(parent, childIndexAtCurrentDepth + siblingIndex);\r\n          currentDepth++;\r\n          childIndexAtCurrentDepth = 0;\r\n          break;\r\n        }\r\n        case EditType.stepOut: {\r\n          parent = getLogicalParent(parent)!;\r\n          currentDepth--;\r\n          childIndexAtCurrentDepth = currentDepth === 0 ? childIndex : 0; // The childIndex is only ever nonzero at zero depth\r\n          break;\r\n        }\r\n        case EditType.permutationListEntry: {\r\n          permutationList = permutationList || [];\r\n          permutationList.push({\r\n            fromSiblingIndex: childIndexAtCurrentDepth + editReader.siblingIndex(edit),\r\n            toSiblingIndex: childIndexAtCurrentDepth + editReader.moveToSiblingIndex(edit),\r\n          });\r\n          break;\r\n        }\r\n        case EditType.permutationListEnd: {\r\n          permuteLogicalChildren(parent, permutationList!);\r\n          permutationList = undefined;\r\n          break;\r\n        }\r\n        default: {\r\n          const unknownType: never = editType; // Compile-time verification that the switch was exhaustive\r\n          throw new Error(`Unknown edit type: ${unknownType}`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private insertFrame(batch: RenderBatch, componentId: number, parent: LogicalElement, childIndex: number, frames: ArrayValues<RenderTreeFrame>, frame: RenderTreeFrame, frameIndex: number): number {\r\n    const frameReader = batch.frameReader;\r\n    const frameType = frameReader.frameType(frame);\r\n    switch (frameType) {\r\n      case FrameType.element:\r\n        this.insertElement(batch, componentId, parent, childIndex, frames, frame, frameIndex);\r\n        return 1;\r\n      case FrameType.text:\r\n        this.insertText(batch, parent, childIndex, frame);\r\n        return 1;\r\n      case FrameType.attribute:\r\n        throw new Error('Attribute frames should only be present as leading children of element frames.');\r\n      case FrameType.component:\r\n        this.insertComponent(batch, parent, childIndex, frame);\r\n        return 1;\r\n      case FrameType.region:\r\n        return this.insertFrameRange(batch, componentId, parent, childIndex, frames, frameIndex + 1, frameIndex + frameReader.subtreeLength(frame));\r\n      case FrameType.elementReferenceCapture:\r\n        if (parent instanceof Element) {\r\n          applyCaptureIdToElement(parent, frameReader.elementReferenceCaptureId(frame)!);\r\n          return 0; // A \"capture\" is a child in the diff, but has no node in the DOM\r\n        } else {\r\n          throw new Error('Reference capture frames can only be children of element frames.');\r\n        }\r\n      case FrameType.markup:\r\n        this.insertMarkup(batch, parent, childIndex, frame);\r\n        return 1;\r\n      case FrameType.namedEvent: // Not used on the JS side\r\n        return 0;\r\n      default: {\r\n        const unknownType: never = frameType; // Compile-time verification that the switch was exhaustive\r\n        throw new Error(`Unknown frame type: ${unknownType}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private insertElement(batch: RenderBatch, componentId: number, parent: LogicalElement, childIndex: number, frames: ArrayValues<RenderTreeFrame>, frame: RenderTreeFrame, frameIndex: number) {\r\n    const frameReader = batch.frameReader;\r\n    const tagName = frameReader.elementName(frame)!;\r\n\r\n    const newDomElementRaw = (tagName === 'svg' || isSvgElement(parent)) ?\r\n      document.createElementNS('http://www.w3.org/2000/svg', tagName) :\r\n      document.createElement(tagName);\r\n    const newElement = toLogicalElement(newDomElementRaw);\r\n\r\n    let inserted = false;\r\n\r\n    // Apply attributes\r\n    const descendantsEndIndexExcl = frameIndex + frameReader.subtreeLength(frame);\r\n    for (let descendantIndex = frameIndex + 1; descendantIndex < descendantsEndIndexExcl; descendantIndex++) {\r\n      const descendantFrame = batch.referenceFramesEntry(frames, descendantIndex);\r\n      if (frameReader.frameType(descendantFrame) === FrameType.attribute) {\r\n        this.applyAttribute(batch, componentId, newDomElementRaw, descendantFrame);\r\n      } else {\r\n        insertLogicalChild(newDomElementRaw, parent, childIndex);\r\n        inserted = true;\r\n        // As soon as we see a non-attribute child, all the subsequent child frames are\r\n        // not attributes, so bail out and insert the remnants recursively\r\n        this.insertFrameRange(batch, componentId, newElement, 0, frames, descendantIndex, descendantsEndIndexExcl);\r\n        break;\r\n      }\r\n    }\r\n\r\n    // this element did not have any children, so it's not inserted yet.\r\n    if (!inserted) {\r\n      insertLogicalChild(newDomElementRaw, parent, childIndex);\r\n    }\r\n\r\n    applyAnyDeferredValue(newDomElementRaw);\r\n  }\r\n\r\n  private insertComponent(batch: RenderBatch, parent: LogicalElement, childIndex: number, frame: RenderTreeFrame) {\r\n    const containerElement = createAndInsertLogicalContainer(parent, childIndex);\r\n\r\n    // All we have to do is associate the child component ID with its location. We don't actually\r\n    // do any rendering here, because the diff for the child will appear later in the render batch.\r\n    const childComponentId = batch.frameReader.componentId(frame);\r\n    this.attachComponentToElement(childComponentId, containerElement);\r\n  }\r\n\r\n  private insertText(batch: RenderBatch, parent: LogicalElement, childIndex: number, textFrame: RenderTreeFrame) {\r\n    const textContent = batch.frameReader.textContent(textFrame)!;\r\n    const newTextNode = document.createTextNode(textContent);\r\n    insertLogicalChild(newTextNode, parent, childIndex);\r\n  }\r\n\r\n  private insertMarkup(batch: RenderBatch, parent: LogicalElement, childIndex: number, markupFrame: RenderTreeFrame) {\r\n    const markupContainer = createAndInsertLogicalContainer(parent, childIndex);\r\n\r\n    const markupContent = batch.frameReader.markupContent(markupFrame);\r\n    const parsedMarkup = parseMarkup(markupContent, isSvgElement(parent));\r\n    let logicalSiblingIndex = 0;\r\n    while (parsedMarkup.firstChild) {\r\n      insertLogicalChild(parsedMarkup.firstChild, markupContainer, logicalSiblingIndex++);\r\n    }\r\n  }\r\n\r\n  private applyAttribute(batch: RenderBatch, componentId: number, toDomElement: Element, attributeFrame: RenderTreeFrame) {\r\n    const frameReader = batch.frameReader;\r\n    const attributeName = frameReader.attributeName(attributeFrame)!;\r\n    const eventHandlerId = frameReader.attributeEventHandlerId(attributeFrame);\r\n\r\n    if (eventHandlerId) {\r\n      const eventName = stripOnPrefix(attributeName);\r\n      this.eventDelegator.setListener(toDomElement, eventName, eventHandlerId, componentId);\r\n      return;\r\n    }\r\n\r\n    const value = frameReader.attributeValue(attributeFrame);\r\n    this.setOrRemoveAttributeOrProperty(toDomElement, attributeName, value);\r\n  }\r\n\r\n  private insertFrameRange(batch: RenderBatch, componentId: number, parent: LogicalElement, childIndex: number, frames: ArrayValues<RenderTreeFrame>, startIndex: number, endIndexExcl: number): number {\r\n    const origChildIndex = childIndex;\r\n    for (let index = startIndex; index < endIndexExcl; index++) {\r\n      const frame = batch.referenceFramesEntry(frames, index);\r\n      const numChildrenInserted = this.insertFrame(batch, componentId, parent, childIndex, frames, frame, index);\r\n      childIndex += numChildrenInserted;\r\n\r\n      // Skip over any descendants, since they are already dealt with recursively\r\n      index += countDescendantFrames(batch, frame);\r\n    }\r\n\r\n    return (childIndex - origChildIndex); // Total number of children inserted\r\n  }\r\n\r\n  private setOrRemoveAttributeOrProperty(element: Element, name: string, valueOrNullToRemove: string | null) {\r\n    // First see if we have special handling for this attribute\r\n    if (!tryApplySpecialProperty(element, name, valueOrNullToRemove)) {\r\n      // If not, maybe it's one of our internal attributes\r\n      if (name.startsWith(internalAttributeNamePrefix)) {\r\n        this.applyInternalAttribute(element, name.substring(internalAttributeNamePrefix.length), valueOrNullToRemove);\r\n      } else {\r\n        // If not, treat it as a regular DOM attribute\r\n        if (valueOrNullToRemove !== null) {\r\n          element.setAttribute(name, valueOrNullToRemove);\r\n        } else {\r\n          element.removeAttribute(name);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private applyInternalAttribute(element: Element, internalAttributeName: string, value: string | null) {\r\n    if (internalAttributeName.startsWith(eventStopPropagationAttributeNamePrefix)) {\r\n      // Stop propagation\r\n      const eventName = stripOnPrefix(internalAttributeName.substring(eventStopPropagationAttributeNamePrefix.length));\r\n      this.eventDelegator.setStopPropagation(element, eventName, value !== null);\r\n    } else if (internalAttributeName.startsWith(eventPreventDefaultAttributeNamePrefix)) {\r\n      // Prevent default\r\n      const eventName = stripOnPrefix(internalAttributeName.substring(eventPreventDefaultAttributeNamePrefix.length));\r\n      this.eventDelegator.setPreventDefault(element, eventName, value !== null);\r\n    } else {\r\n      // The prefix makes this attribute name reserved, so any other usage is disallowed\r\n      throw new Error(`Unsupported internal attribute '${internalAttributeName}'`);\r\n    }\r\n  }\r\n}\r\n\r\nfunction markAsInteractiveRootComponentElement(element: LogicalElement, isInteractive: boolean) {\r\n  element[interactiveRootComponentPropname] = isInteractive;\r\n}\r\n\r\nexport function isInteractiveRootComponentElement(element: LogicalElement): boolean | undefined {\r\n  return element[interactiveRootComponentPropname];\r\n}\r\n\r\nexport function setShouldPreserveContentOnInteractiveComponentDisposal(element: LogicalElement, shouldPreserve: boolean) {\r\n  element[preserveContentOnDisposalPropname] = shouldPreserve;\r\n}\r\n\r\nfunction shouldPreserveContentOnInteractiveComponentDisposal(element: LogicalElement): boolean {\r\n  return element[preserveContentOnDisposalPropname] === true;\r\n}\r\n\r\nexport interface ComponentDescriptor {\r\n  start: Node;\r\n  end: Node;\r\n}\r\n\r\nfunction parseMarkup(markup: string, isSvg: boolean) {\r\n  if (isSvg) {\r\n    sharedSvgElemForParsing.innerHTML = markup || ' ';\r\n    return sharedSvgElemForParsing;\r\n  } else {\r\n    sharedTemplateElemForParsing.innerHTML = markup || ' ';\r\n\r\n    // Since this is a markup string, we want to honor the developer's intent to\r\n    // evaluate any scripts it may contain. Scripts parsed from an innerHTML assignment\r\n    // won't be executable by default (https://stackoverflow.com/questions/1197575/can-scripts-be-inserted-with-innerhtml)\r\n    // but that's inconsistent with anything constructed from a sequence like:\r\n    // - OpenElement(\"script\")\r\n    // - AddContent(js) or AddMarkupContent(js)\r\n    // - CloseElement()\r\n    // It doesn't make sense to have such an inconsistency in Blazor's interactive\r\n    // renderer, and for back-compat with pre-.NET 8 code (when the Razor compiler always\r\n    // used OpenElement like above), as well as consistency with static SSR, we need to make it work.\r\n    sharedTemplateElemForParsing.content.querySelectorAll('script').forEach(oldScriptElem => {\r\n      const newScriptElem = document.createElement('script');\r\n      newScriptElem.textContent = oldScriptElem.textContent;\r\n\r\n      oldScriptElem.getAttributeNames().forEach(attribName => {\r\n        newScriptElem.setAttribute(attribName, oldScriptElem.getAttribute(attribName)!);\r\n      });\r\n\r\n      oldScriptElem.parentNode!.replaceChild(newScriptElem, oldScriptElem);\r\n    });\r\n\r\n    return sharedTemplateElemForParsing.content;\r\n  }\r\n}\r\n\r\nfunction countDescendantFrames(batch: RenderBatch, frame: RenderTreeFrame): number {\r\n  const frameReader = batch.frameReader;\r\n  switch (frameReader.frameType(frame)) {\r\n    // The following frame types have a subtree length. Other frames may use that memory slot\r\n    // to mean something else, so we must not read it. We should consider having nominal subtypes\r\n    // of RenderTreeFramePointer that prevent access to non-applicable fields.\r\n    case FrameType.component:\r\n    case FrameType.element:\r\n    case FrameType.region:\r\n      return frameReader.subtreeLength(frame) - 1;\r\n    default:\r\n      return 0;\r\n  }\r\n}\r\n\r\nfunction stripOnPrefix(attributeName: string) {\r\n  if (attributeName.startsWith('on')) {\r\n    return attributeName.substring(2);\r\n  }\r\n\r\n  throw new Error(`Attribute should be an event name, but doesn't start with 'on'. Value: '${attributeName}'`);\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport '@microsoft/dotnet-js-interop';\r\nimport { resetScrollAfterNextBatch } from '../Rendering/Renderer';\r\nimport { EventDelegator } from '../Rendering/Events/EventDelegator';\r\nimport { attachEnhancedNavigationListener, getInteractiveRouterRendererId, handleClickForNavigationInterception, hasInteractiveRouter, hasProgrammaticEnhancedNavigationHandler, isSamePageWithHash, isWithinBaseUriSpace, performProgrammaticEnhancedNavigation, performScrollToElementOnTheSamePage, scrollToElement, setHasInteractiveRouter, toAbsoluteUri } from './NavigationUtils';\r\nimport { WebRendererId } from '../Rendering/WebRendererId';\r\nimport { isRendererAttached } from '../Rendering/WebRendererInteropMethods';\r\n\r\nlet hasRegisteredNavigationEventListeners = false;\r\nlet currentHistoryIndex = 0;\r\nlet currentLocationChangingCallId = 0;\r\n\r\ntype NavigationCallbacks = {\r\n  rendererId: WebRendererId;\r\n  hasLocationChangingEventListeners: boolean;\r\n  locationChanged(uri: string, state: string | undefined, intercepted: boolean): Promise<void>;\r\n  locationChanging(callId: number, uri: string, state: string | undefined, intercepted: boolean): Promise<void>;\r\n};\r\n\r\nconst navigationCallbacks = new Map<WebRendererId, NavigationCallbacks>();\r\n\r\nlet popStateCallback: ((state: PopStateEvent) => Promise<void> | void) = onBrowserInitiatedPopState;\r\nlet resolveCurrentNavigation: ((shouldContinueNavigation: boolean) => void) | null = null;\r\n\r\n// These are the functions we're making available for invocation from .NET\r\nexport const internalFunctions = {\r\n  listenForNavigationEvents,\r\n  enableNavigationInterception: setHasInteractiveRouter,\r\n  setHasLocationChangingListeners,\r\n  endLocationChanging,\r\n  navigateTo: navigateToFromDotNet,\r\n  refresh,\r\n  getBaseURI: (): string => document.baseURI,\r\n  getLocationHref: (): string => location.href,\r\n  scrollToElement,\r\n};\r\n\r\nfunction listenForNavigationEvents(\r\n  rendererId: WebRendererId,\r\n  locationChangedCallback: (uri: string, state: string | undefined, intercepted: boolean) => Promise<void>,\r\n  locationChangingCallback: (callId: number, uri: string, state: string | undefined, intercepted: boolean) => Promise<void>\r\n): void {\r\n  navigationCallbacks.set(rendererId, {\r\n    rendererId,\r\n    hasLocationChangingEventListeners: false,\r\n    locationChanged: locationChangedCallback,\r\n    locationChanging: locationChangingCallback,\r\n  });\r\n\r\n  if (hasRegisteredNavigationEventListeners) {\r\n    return;\r\n  }\r\n\r\n  hasRegisteredNavigationEventListeners = true;\r\n  window.addEventListener('popstate', onPopState);\r\n  currentHistoryIndex = history.state?._index ?? 0;\r\n\r\n  attachEnhancedNavigationListener((internalDestinationHref, interceptedLink) => {\r\n    notifyLocationChanged(interceptedLink, internalDestinationHref);\r\n  });\r\n}\r\n\r\nfunction setHasLocationChangingListeners(rendererId: WebRendererId, hasListeners: boolean) {\r\n  const callbacks = navigationCallbacks.get(rendererId);\r\n  if (!callbacks) {\r\n    throw new Error(`Renderer with ID '${rendererId}' is not listening for navigation events`);\r\n  }\r\n  callbacks.hasLocationChangingEventListeners = hasListeners;\r\n}\r\n\r\n\r\nexport function attachToEventDelegator(eventDelegator: EventDelegator): void {\r\n  // We need to respond to clicks on <a> elements *after* the EventDelegator has finished\r\n  // running its simulated bubbling process so that we can respect any preventDefault requests.\r\n  // So instead of registering our own native event, register using the EventDelegator.\r\n  eventDelegator.notifyAfterClick(event => {\r\n    if (!hasInteractiveRouter()) {\r\n      return;\r\n    }\r\n\r\n    handleClickForNavigationInterception(event, absoluteInternalHref => {\r\n      performInternalNavigation(absoluteInternalHref, /* interceptedLink */ true, /* replace */ false);\r\n    });\r\n  });\r\n}\r\n\r\n\r\nfunction refresh(forceReload: boolean): void {\r\n  if (!forceReload && hasProgrammaticEnhancedNavigationHandler()) {\r\n    performProgrammaticEnhancedNavigation(location.href, /* replace */ true);\r\n  } else {\r\n    location.reload();\r\n  }\r\n}\r\n\r\n// For back-compat, we need to accept multiple overloads\r\nexport function navigateTo(uri: string, options: NavigationOptions): void;\r\nexport function navigateTo(uri: string, forceLoad: boolean): void;\r\nexport function navigateTo(uri: string, forceLoad: boolean, replace: boolean): void;\r\nexport function navigateTo(uri: string, forceLoadOrOptions: NavigationOptions | boolean, replaceIfUsingOldOverload = false): void {\r\n  // Normalize the parameters to the newer overload (i.e., using NavigationOptions)\r\n  const options: NavigationOptions = forceLoadOrOptions instanceof Object\r\n    ? forceLoadOrOptions\r\n    : { forceLoad: forceLoadOrOptions, replaceHistoryEntry: replaceIfUsingOldOverload };\r\n\r\n  navigateToCore(uri, options);\r\n}\r\n\r\nfunction navigateToFromDotNet(uri: string, options: NavigationOptions): void {\r\n  // The location changing callback is called from .NET for programmatic navigations originating from .NET.\r\n  // In this case, we shouldn't invoke the callback again from the JS side.\r\n  navigateToCore(uri, options, /* skipLocationChangingCallback */ true);\r\n}\r\n\r\nfunction navigateToCore(uri: string, options: NavigationOptions, skipLocationChangingCallback = false): void {\r\n  const absoluteUri = toAbsoluteUri(uri);\r\n\r\n  if (!options.forceLoad && isWithinBaseUriSpace(absoluteUri)) {\r\n    if (shouldUseClientSideRouting()) {\r\n      performInternalNavigation(absoluteUri, false, options.replaceHistoryEntry, options.historyEntryState, skipLocationChangingCallback);\r\n    } else {\r\n      performProgrammaticEnhancedNavigation(absoluteUri, options.replaceHistoryEntry);\r\n    }\r\n  } else {\r\n    // For external navigation, we work in terms of the originally-supplied uri string,\r\n    // not the computed absoluteUri. This is in case there are some special URI formats\r\n    // we're unable to translate into absolute URIs.\r\n    performExternalNavigation(uri, options.replaceHistoryEntry);\r\n  }\r\n}\r\n\r\nfunction performExternalNavigation(uri: string, replace: boolean) {\r\n  if (location.href === uri) {\r\n    // If you're already on this URL, you can't append another copy of it to the history stack,\r\n    // so we can ignore the 'replace' flag. However, reloading the same URL you're already on\r\n    // requires special handling to avoid triggering browser-specific behavior issues.\r\n    // For details about what this fixes and why, see https://github.com/dotnet/aspnetcore/pull/10839\r\n    const temporaryUri = uri + '?';\r\n    history.replaceState(null, '', temporaryUri);\r\n    location.replace(uri);\r\n  } else if (replace) {\r\n    location.replace(uri);\r\n  } else {\r\n    location.href = uri;\r\n  }\r\n}\r\n\r\nasync function performInternalNavigation(absoluteInternalHref: string, interceptedLink: boolean, replace: boolean, state: string | undefined = undefined, skipLocationChangingCallback = false) {\r\n  ignorePendingNavigation();\r\n\r\n  if (isSamePageWithHash(absoluteInternalHref)) {\r\n    saveToBrowserHistory(absoluteInternalHref, replace, state);\r\n    performScrollToElementOnTheSamePage(absoluteInternalHref);\r\n    return;\r\n  }\r\n\r\n  const callbacks = getInteractiveRouterNavigationCallbacks();\r\n  if (!skipLocationChangingCallback && callbacks?.hasLocationChangingEventListeners) {\r\n    const shouldContinueNavigation = await notifyLocationChanging(absoluteInternalHref, state, interceptedLink, callbacks);\r\n    if (!shouldContinueNavigation) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  // Since this was *not* triggered by a back/forward gesture (that goes through a different\r\n  // code path starting with a popstate event), we don't want to preserve the current scroll\r\n  // position, so reset it.\r\n  // To avoid ugly flickering effects, we don't want to change the scroll position until\r\n  // we render the new page. As a best approximation, wait until the next batch.\r\n  resetScrollAfterNextBatch();\r\n\r\n  saveToBrowserHistory(absoluteInternalHref, replace, state);\r\n\r\n  await notifyLocationChanged(interceptedLink);\r\n}\r\n\r\nfunction saveToBrowserHistory(absoluteInternalHref: string, replace: boolean, state: string | undefined = undefined): void {\r\n  if (!replace) {\r\n    currentHistoryIndex++;\r\n    history.pushState({\r\n      userState: state,\r\n      _index: currentHistoryIndex,\r\n    }, /* ignored title */ '', absoluteInternalHref);\r\n  } else {\r\n    history.replaceState({\r\n      userState: state,\r\n      _index: currentHistoryIndex,\r\n    }, /* ignored title */ '', absoluteInternalHref);\r\n  }\r\n}\r\n\r\nfunction navigateHistoryWithoutPopStateCallback(delta: number): Promise<void> {\r\n  return new Promise(resolve => {\r\n    const oldPopStateCallback = popStateCallback;\r\n\r\n    popStateCallback = () => {\r\n      popStateCallback = oldPopStateCallback;\r\n      resolve();\r\n    };\r\n\r\n    history.go(delta);\r\n  });\r\n}\r\n\r\nfunction ignorePendingNavigation() {\r\n  if (resolveCurrentNavigation) {\r\n    resolveCurrentNavigation(false);\r\n    resolveCurrentNavigation = null;\r\n  }\r\n}\r\n\r\nfunction notifyLocationChanging(uri: string, state: string | undefined, intercepted: boolean, callbacks: NavigationCallbacks): Promise<boolean> {\r\n  return new Promise<boolean>(resolve => {\r\n    ignorePendingNavigation();\r\n    currentLocationChangingCallId++;\r\n    resolveCurrentNavigation = resolve;\r\n    callbacks.locationChanging(currentLocationChangingCallId, uri, state, intercepted);\r\n  });\r\n}\r\n\r\nfunction endLocationChanging(callId: number, shouldContinueNavigation: boolean) {\r\n  if (resolveCurrentNavigation && callId === currentLocationChangingCallId) {\r\n    resolveCurrentNavigation(shouldContinueNavigation);\r\n    resolveCurrentNavigation = null;\r\n  }\r\n}\r\n\r\nasync function onBrowserInitiatedPopState(state: PopStateEvent) {\r\n  ignorePendingNavigation();\r\n\r\n  const callbacks = getInteractiveRouterNavigationCallbacks();\r\n  if (callbacks?.hasLocationChangingEventListeners) {\r\n    const index = state.state?._index ?? 0;\r\n    const userState = state.state?.userState;\r\n    const delta = index - currentHistoryIndex;\r\n    const uri = location.href;\r\n\r\n    // Temporarily revert the navigation until we confirm if the navigation should continue.\r\n    await navigateHistoryWithoutPopStateCallback(-delta);\r\n\r\n    const shouldContinueNavigation = await notifyLocationChanging(uri, userState, false, callbacks);\r\n    if (!shouldContinueNavigation) {\r\n      return;\r\n    }\r\n\r\n    await navigateHistoryWithoutPopStateCallback(delta);\r\n  }\r\n\r\n  // We don't know if popstate was triggered for a navigation that can be handled by the client-side router,\r\n  // so we treat it as a intercepted link to be safe.\r\n  await notifyLocationChanged(/* interceptedLink */ true);\r\n}\r\n\r\nasync function notifyLocationChanged(interceptedLink: boolean, internalDestinationHref?: string) {\r\n  const uri = internalDestinationHref ?? location.href;\r\n\r\n  await Promise.all(Array.from(navigationCallbacks, async ([rendererId, callbacks]) => {\r\n    if (isRendererAttached(rendererId)) {\r\n      await callbacks.locationChanged(uri, history.state?.userState, interceptedLink);\r\n    }\r\n  }));\r\n}\r\n\r\nasync function onPopState(state: PopStateEvent) {\r\n  if (popStateCallback && shouldUseClientSideRouting()) {\r\n    await popStateCallback(state);\r\n  }\r\n\r\n  currentHistoryIndex = history.state?._index ?? 0;\r\n}\r\n\r\nfunction getInteractiveRouterNavigationCallbacks(): NavigationCallbacks | undefined {\r\n  const interactiveRouterRendererId = getInteractiveRouterRendererId();\r\n  if (interactiveRouterRendererId === undefined) {\r\n    return undefined;\r\n  }\r\n\r\n  return navigationCallbacks.get(interactiveRouterRendererId);\r\n}\r\n\r\nfunction shouldUseClientSideRouting() {\r\n  return hasInteractiveRouter() || !hasProgrammaticEnhancedNavigationHandler();\r\n}\r\n\r\n// Keep in sync with Components/src/NavigationOptions.cs\r\nexport interface NavigationOptions {\r\n  forceLoad: boolean;\r\n  replaceHistoryEntry: boolean;\r\n  historyEntryState?: string;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { WebRendererId } from '../Rendering/WebRendererId';\r\n\r\nlet interactiveRouterRendererId: WebRendererId | undefined = undefined;\r\nlet programmaticEnhancedNavigationHandler: typeof performProgrammaticEnhancedNavigation | undefined;\r\nlet enhancedNavigationListener: typeof notifyEnhancedNavigationListeners | undefined;\r\n\r\n/**\r\n * Checks if a click event corresponds to an <a> tag referencing a URL within the base href, and that interception\r\n * isn't bypassed (e.g., by a 'download' attribute or the user holding a meta key while clicking).\r\n * @param event The event that occurred\r\n * @param callbackIfIntercepted A callback that will be invoked if the event corresponds to a click on an <a> that can be intercepted.\r\n */\r\nexport function handleClickForNavigationInterception(event: MouseEvent, callbackIfIntercepted: (absoluteInternalHref: string) => void): void {\r\n  if (event.button !== 0 || eventHasSpecialKey(event)) {\r\n    // Don't stop ctrl/meta-click (etc) from opening links in new tabs/windows\r\n    return;\r\n  }\r\n\r\n  if (event.defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  // Intercept clicks on all <a> elements where the href is within the <base href> URI space\r\n  // We must explicitly check if it has an 'href' attribute, because if it doesn't, the result might be null or an empty string depending on the browser\r\n  const anchorTarget = findAnchorTarget(event);\r\n\r\n  if (anchorTarget && canProcessAnchor(anchorTarget)) {\r\n    const anchorHref = anchorTarget.getAttribute('href')!;\r\n\r\n    const absoluteHref = toAbsoluteUri(anchorHref);\r\n\r\n    if (isWithinBaseUriSpace(absoluteHref)) {\r\n      event.preventDefault();\r\n      callbackIfIntercepted(absoluteHref);\r\n    }\r\n  }\r\n}\r\n\r\nexport function isWithinBaseUriSpace(href: string) {\r\n  const baseUriWithoutTrailingSlash = toBaseUriWithoutTrailingSlash(document.baseURI!);\r\n  const nextChar = href.charAt(baseUriWithoutTrailingSlash.length);\r\n\r\n  return href.startsWith(baseUriWithoutTrailingSlash)\r\n  && (nextChar === '' || nextChar === '/' || nextChar === '?' || nextChar === '#');\r\n}\r\n\r\nexport function isSamePageWithHash(absoluteHref: string): boolean {\r\n  const url = new URL(absoluteHref);\r\n  return url.hash !== '' && location.origin === url.origin && location.pathname === url.pathname && location.search === url.search;\r\n}\r\n\r\nexport function isForSamePath(url1: string, url2: string) {\r\n  // We are going to use the scheme, host, port and path to determine if the two URLs are compatible.\r\n  // We do not account for the query string as we want to allow for the query string to change.\r\n  // (Blazor doesn't use the query string for routing purposes).\r\n  const parsedUrl1 = new URL(url1);\r\n  const parsedUrl2 = new URL(url2);\r\n  return parsedUrl1.protocol === parsedUrl2.protocol\r\n    && parsedUrl1.host === parsedUrl2.host\r\n    && parsedUrl1.port === parsedUrl2.port\r\n    && parsedUrl1.pathname === parsedUrl2.pathname;\r\n}\r\n\r\nexport function performScrollToElementOnTheSamePage(absoluteHref : string): void {\r\n  const hashIndex = absoluteHref.indexOf('#');\r\n  if (hashIndex === absoluteHref.length - 1) {\r\n    return;\r\n  }\r\n\r\n  const identifier = absoluteHref.substring(hashIndex + 1);\r\n  scrollToElement(identifier);\r\n}\r\n\r\nexport function scrollToElement(identifier: string): void {\r\n  document.getElementById(identifier)?.scrollIntoView();\r\n}\r\n\r\nexport function attachEnhancedNavigationListener(listener: typeof enhancedNavigationListener) {\r\n  enhancedNavigationListener = listener;\r\n}\r\n\r\nexport function notifyEnhancedNavigationListeners(internalDestinationHref: string, interceptedLink: boolean) {\r\n  enhancedNavigationListener?.(internalDestinationHref, interceptedLink);\r\n}\r\n\r\nexport function hasProgrammaticEnhancedNavigationHandler(): boolean {\r\n  return programmaticEnhancedNavigationHandler !== undefined;\r\n}\r\n\r\nexport function attachProgrammaticEnhancedNavigationHandler(handler: typeof programmaticEnhancedNavigationHandler) {\r\n  programmaticEnhancedNavigationHandler = handler;\r\n}\r\n\r\nexport function performProgrammaticEnhancedNavigation(absoluteInternalHref: string, replace: boolean): void {\r\n  if (!programmaticEnhancedNavigationHandler) {\r\n    throw new Error('No enhanced programmatic navigation handler has been attached');\r\n  }\r\n\r\n  programmaticEnhancedNavigationHandler(absoluteInternalHref, replace);\r\n}\r\n\r\nfunction toBaseUriWithoutTrailingSlash(baseUri: string) {\r\n  return baseUri.substring(0, baseUri.lastIndexOf('/'));\r\n}\r\n\r\nlet testAnchor: HTMLAnchorElement;\r\nexport function toAbsoluteUri(relativeUri: string): string {\r\n  testAnchor = testAnchor || document.createElement('a');\r\n  testAnchor.href = relativeUri;\r\n  return testAnchor.href;\r\n}\r\n\r\nfunction eventHasSpecialKey(event: MouseEvent) {\r\n  return event.ctrlKey || event.shiftKey || event.altKey || event.metaKey;\r\n}\r\n\r\nfunction canProcessAnchor(anchorTarget: HTMLAnchorElement | SVGAElement) {\r\n  const targetAttributeValue = anchorTarget.getAttribute('target');\r\n  const opensInSameFrame = !targetAttributeValue || targetAttributeValue === '_self';\r\n  return opensInSameFrame && anchorTarget.hasAttribute('href') && !anchorTarget.hasAttribute('download');\r\n}\r\n\r\nfunction findAnchorTarget(event: MouseEvent): HTMLAnchorElement | SVGAElement | null {\r\n  const path = event.composedPath && event.composedPath();\r\n  if (path) {\r\n    // This logic works with events that target elements within a shadow root,\r\n    // as long as the shadow mode is 'open'. For closed shadows, we can't possibly\r\n    // know what internal element was clicked.\r\n    for (let i = 0; i < path.length; i++) {\r\n      const candidate = path[i];\r\n      if (candidate instanceof HTMLAnchorElement || candidate instanceof SVGAElement) {\r\n        return candidate;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function hasInteractiveRouter(): boolean {\r\n  return interactiveRouterRendererId !== undefined;\r\n}\r\n\r\nexport function getInteractiveRouterRendererId() : WebRendererId | undefined {\r\n  return interactiveRouterRendererId;\r\n}\r\n\r\nexport function setHasInteractiveRouter(rendererId: WebRendererId) {\r\n  if (interactiveRouterRendererId !== undefined && interactiveRouterRendererId !== rendererId) {\r\n    throw new Error('Only one interactive runtime may enable navigation interception at a time.');\r\n  }\r\n\r\n  interactiveRouterRendererId = rendererId;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport '../Platform/Platform';\r\nimport '../Environment';\r\nimport { RenderBatch } from './RenderBatch/RenderBatch';\r\nimport { BrowserRenderer } from './BrowserRenderer';\r\nimport { toLogicalElement, LogicalElement } from './LogicalElements';\r\nimport { getAndRemovePendingRootComponentContainer } from './JSRootComponents';\r\n\r\ninterface BrowserRendererRegistry {\r\n  [browserRendererId: number]: BrowserRenderer;\r\n}\r\nconst browserRenderers: BrowserRendererRegistry = {};\r\nlet shouldResetScrollAfterNextBatch = false;\r\n\r\nexport function attachRootComponentToLogicalElement(browserRendererId: number, logicalElement: LogicalElement, componentId: number, appendContent: boolean): void {\r\n  let browserRenderer = browserRenderers[browserRendererId];\r\n  if (!browserRenderer) {\r\n    browserRenderer = new BrowserRenderer(browserRendererId);\r\n    browserRenderers[browserRendererId] = browserRenderer;\r\n  }\r\n\r\n  browserRenderer.attachRootComponentToLogicalElement(componentId, logicalElement, appendContent);\r\n}\r\n\r\nexport function attachRootComponentToElement(elementSelector: string, componentId: number, browserRendererId: number): void {\r\n  const afterElementSelector = '::after';\r\n  const beforeElementSelector = '::before';\r\n  let appendContent = false;\r\n\r\n  if (elementSelector.endsWith(afterElementSelector)) {\r\n    elementSelector = elementSelector.slice(0, -afterElementSelector.length);\r\n    appendContent = true;\r\n  } else if (elementSelector.endsWith(beforeElementSelector)) {\r\n    throw new Error(`The '${beforeElementSelector}' selector is not supported.`);\r\n  }\r\n\r\n  const element = getAndRemovePendingRootComponentContainer(elementSelector)\r\n    || document.querySelector(elementSelector);\r\n  if (!element) {\r\n    throw new Error(`Could not find any element matching selector '${elementSelector}'.`);\r\n  }\r\n\r\n  // 'allowExistingContents' to keep any prerendered content until we do the first client-side render\r\n  // Only client-side Blazor supplies a browser renderer ID\r\n  attachRootComponentToLogicalElement(browserRendererId, toLogicalElement(element, /* allow existing contents */ true), componentId, appendContent);\r\n}\r\n\r\nexport function getRendererer(browserRendererId: number): BrowserRenderer | undefined {\r\n  return browserRenderers[browserRendererId];\r\n}\r\n\r\nexport function renderBatch(browserRendererId: number, batch: RenderBatch): void {\r\n  const browserRenderer = browserRenderers[browserRendererId];\r\n  if (!browserRenderer) {\r\n    throw new Error(`There is no browser renderer with ID ${browserRendererId}.`);\r\n  }\r\n\r\n  const arrayRangeReader = batch.arrayRangeReader;\r\n  const updatedComponentsRange = batch.updatedComponents();\r\n  const updatedComponentsValues = arrayRangeReader.values(updatedComponentsRange);\r\n  const updatedComponentsLength = arrayRangeReader.count(updatedComponentsRange);\r\n  const referenceFrames = batch.referenceFrames();\r\n  const referenceFramesValues = arrayRangeReader.values(referenceFrames);\r\n  const diffReader = batch.diffReader;\r\n\r\n  for (let i = 0; i < updatedComponentsLength; i++) {\r\n    const diff = batch.updatedComponentsEntry(updatedComponentsValues, i);\r\n    const componentId = diffReader.componentId(diff);\r\n    const edits = diffReader.edits(diff);\r\n    browserRenderer.updateComponent(batch, componentId, edits, referenceFramesValues);\r\n  }\r\n\r\n  const disposedComponentIdsRange = batch.disposedComponentIds();\r\n  const disposedComponentIdsValues = arrayRangeReader.values(disposedComponentIdsRange);\r\n  const disposedComponentIdsLength = arrayRangeReader.count(disposedComponentIdsRange);\r\n  for (let i = 0; i < disposedComponentIdsLength; i++) {\r\n    const componentId = batch.disposedComponentIdsEntry(disposedComponentIdsValues, i);\r\n    browserRenderer.disposeComponent(componentId);\r\n  }\r\n\r\n  const disposedEventHandlerIdsRange = batch.disposedEventHandlerIds();\r\n  const disposedEventHandlerIdsValues = arrayRangeReader.values(disposedEventHandlerIdsRange);\r\n  const disposedEventHandlerIdsLength = arrayRangeReader.count(disposedEventHandlerIdsRange);\r\n  for (let i = 0; i < disposedEventHandlerIdsLength; i++) {\r\n    const eventHandlerId = batch.disposedEventHandlerIdsEntry(disposedEventHandlerIdsValues, i);\r\n    browserRenderer.disposeEventHandler(eventHandlerId);\r\n  }\r\n\r\n  resetScrollIfNeeded();\r\n}\r\n\r\nexport function resetScrollAfterNextBatch(): void {\r\n  shouldResetScrollAfterNextBatch = true;\r\n}\r\n\r\nfunction resetScrollIfNeeded() {\r\n  if (shouldResetScrollAfterNextBatch) {\r\n    shouldResetScrollAfterNextBatch = false;\r\n\r\n    // This assumes the scroller is on the window itself. There isn't a general way to know\r\n    // if some other element is playing the role of the primary scroll region.\r\n    window.scrollTo && window.scrollTo(0, 0);\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport '@microsoft/dotnet-js-interop';\r\n\r\nexport const domFunctions = {\r\n  focus,\r\n  focusBySelector,\r\n};\r\n\r\nfunction focus(element: HTMLOrSVGElement, preventScroll: boolean): void {\r\n  if (element instanceof HTMLElement) {\r\n    element.focus({ preventScroll });\r\n  } else if (element instanceof SVGElement) {\r\n    if (element.hasAttribute('tabindex')) {\r\n      element.focus({ preventScroll });\r\n    } else {\r\n      throw new Error('Unable to focus an SVG element that does not have a tabindex.');\r\n    }\r\n  } else {\r\n    throw new Error('Unable to focus an invalid element.');\r\n  }\r\n}\r\n\r\nfunction focusBySelector(selector: string) {\r\n  const element = document.querySelector(selector) as HTMLElement;\r\n  if (element) {\r\n    // If no explicit tabindex is defined, mark it as programmatically-focusable.\r\n    // This does actually add a new HTML attribute, but it shouldn't interfere with\r\n    // diffing because diffing only deals with the attributes you have in your code.\r\n    if (!element.hasAttribute('tabindex')) {\r\n      element.tabIndex = -1;\r\n    }\r\n\r\n    element.focus({ preventScroll: true });\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DotNet } from '@microsoft/dotnet-js-interop';\r\n\r\nexport const Virtualize = {\r\n  init,\r\n  dispose,\r\n};\r\n\r\nconst dispatcherObserversByDotNetIdPropname = Symbol();\r\n\r\nfunction findClosestScrollContainer(element: HTMLElement | null): HTMLElement | null {\r\n  // If we recurse up as far as body or the document root, return null so that the\r\n  // IntersectionObserver observes intersection with the top-level scroll viewport\r\n  // instead of the with body/documentElement which can be arbitrarily tall.\r\n  // See https://github.com/dotnet/aspnetcore/issues/37659 for more about what this fixes.\r\n  if (!element || element === document.body || element === document.documentElement) {\r\n    return null;\r\n  }\r\n\r\n  const style = getComputedStyle(element);\r\n\r\n  if (style.overflowY !== 'visible') {\r\n    return element;\r\n  }\r\n\r\n  return findClosestScrollContainer(element.parentElement);\r\n}\r\n\r\nfunction init(dotNetHelper: DotNet.DotNetObject, spacerBefore: HTMLElement, spacerAfter: HTMLElement, rootMargin = 50): void {\r\n  // Overflow anchoring can cause an ongoing scroll loop, because when we resize the spacers, the browser\r\n  // would update the scroll position to compensate. Then the spacer would remain visible and we'd keep on\r\n  // trying to resize it.\r\n  const scrollContainer = findClosestScrollContainer(spacerBefore);\r\n  (scrollContainer || document.documentElement).style.overflowAnchor = 'none';\r\n\r\n  const rangeBetweenSpacers = document.createRange();\r\n\r\n  if (isValidTableElement(spacerAfter.parentElement)) {\r\n    spacerBefore.style.display = 'table-row';\r\n    spacerAfter.style.display = 'table-row';\r\n  }\r\n\r\n  const intersectionObserver = new IntersectionObserver(intersectionCallback, {\r\n    root: scrollContainer,\r\n    rootMargin: `${rootMargin}px`,\r\n  });\r\n\r\n  intersectionObserver.observe(spacerBefore);\r\n  intersectionObserver.observe(spacerAfter);\r\n\r\n  const mutationObserverBefore = createSpacerMutationObserver(spacerBefore);\r\n  const mutationObserverAfter = createSpacerMutationObserver(spacerAfter);\r\n\r\n  const { observersByDotNetObjectId, id } = getObserversMapEntry(dotNetHelper);\r\n  observersByDotNetObjectId[id] = {\r\n    intersectionObserver,\r\n    mutationObserverBefore,\r\n    mutationObserverAfter,\r\n  };\r\n\r\n  function createSpacerMutationObserver(spacer: HTMLElement): MutationObserver {\r\n    // Without the use of thresholds, IntersectionObserver only detects binary changes in visibility,\r\n    // so if a spacer gets resized but remains visible, no additional callbacks will occur. By unobserving\r\n    // and reobserving spacers when they get resized, the intersection callback will re-run if they remain visible.\r\n    const observerOptions = { attributes: true };\r\n    const mutationObserver = new MutationObserver((mutations: MutationRecord[], observer: MutationObserver): void => {\r\n      if (isValidTableElement(spacer.parentElement)) {\r\n        observer.disconnect();\r\n        spacer.style.display = 'table-row';\r\n        observer.observe(spacer, observerOptions);\r\n      }\r\n\r\n      intersectionObserver.unobserve(spacer);\r\n      intersectionObserver.observe(spacer);\r\n    });\r\n\r\n    mutationObserver.observe(spacer, observerOptions);\r\n\r\n    return mutationObserver;\r\n  }\r\n\r\n  function intersectionCallback(entries: IntersectionObserverEntry[]): void {\r\n    entries.forEach((entry): void => {\r\n      if (!entry.isIntersecting) {\r\n        return;\r\n      }\r\n\r\n      // To compute the ItemSize, work out the separation between the two spacers. We can't just measure an individual element\r\n      // because each conceptual item could be made from multiple elements. Using getBoundingClientRect allows for the size to be\r\n      // a fractional value. It's important not to add or subtract any such fractional values (e.g., to subtract the 'top' of\r\n      // one item from the 'bottom' of another to get the distance between them) because floating point errors would cause\r\n      // scrolling glitches.\r\n      rangeBetweenSpacers.setStartAfter(spacerBefore);\r\n      rangeBetweenSpacers.setEndBefore(spacerAfter);\r\n      const spacerSeparation = rangeBetweenSpacers.getBoundingClientRect().height;\r\n      const containerSize = entry.rootBounds?.height;\r\n\r\n      if (entry.target === spacerBefore) {\r\n        dotNetHelper.invokeMethodAsync('OnSpacerBeforeVisible', entry.intersectionRect.top - entry.boundingClientRect.top, spacerSeparation, containerSize);\r\n      } else if (entry.target === spacerAfter && spacerAfter.offsetHeight > 0) {\r\n        // When we first start up, both the \"before\" and \"after\" spacers will be visible, but it's only relevant to raise a\r\n        // single event to load the initial data. To avoid raising two events, skip the one for the \"after\" spacer if we know\r\n        // it's meaningless to talk about any overlap into it.\r\n        dotNetHelper.invokeMethodAsync('OnSpacerAfterVisible', entry.boundingClientRect.bottom - entry.intersectionRect.bottom, spacerSeparation, containerSize);\r\n      }\r\n    });\r\n  }\r\n\r\n  function isValidTableElement(element: HTMLElement | null): boolean {\r\n    if (element === null) {\r\n      return false;\r\n    }\r\n\r\n    return ((element instanceof HTMLTableElement && element.style.display === '') || element.style.display === 'table')\r\n      || ((element instanceof HTMLTableSectionElement && element.style.display === '') || element.style.display === 'table-row-group');\r\n  }\r\n}\r\n\r\nfunction getObserversMapEntry(dotNetHelper: DotNet.DotNetObject): { observersByDotNetObjectId: {[id: number]: any }, id: number } {\r\n  const dotNetHelperDispatcher = dotNetHelper['_callDispatcher'];\r\n  const dotNetHelperId = dotNetHelper['_id'];\r\n  dotNetHelperDispatcher[dispatcherObserversByDotNetIdPropname] ??= { };\r\n\r\n  return {\r\n    observersByDotNetObjectId: dotNetHelperDispatcher[dispatcherObserversByDotNetIdPropname],\r\n    id: dotNetHelperId,\r\n  };\r\n}\r\n\r\nfunction dispose(dotNetHelper: DotNet.DotNetObject): void {\r\n  const { observersByDotNetObjectId, id } = getObserversMapEntry(dotNetHelper);\r\n  const observers = observersByDotNetObjectId[id];\r\n\r\n  if (observers) {\r\n    observers.intersectionObserver.disconnect();\r\n    observers.mutationObserverBefore.disconnect();\r\n    observers.mutationObserverAfter.disconnect();\r\n\r\n    dotNetHelper.dispose();\r\n\r\n    delete observersByDotNetObjectId[id];\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { getLogicalParent, LogicalElement } from './Rendering/LogicalElements';\r\n\r\nexport const PageTitle = {\r\n  getAndRemoveExistingTitle,\r\n};\r\n\r\nfunction getAndRemoveExistingTitle(): string | null {\r\n  // Other <title> elements may exist outside <head> (e.g., inside <svg> elements) but they aren't page titles\r\n  const titleElements = document.head ? document.head.getElementsByTagName('title') : [];\r\n\r\n  if (titleElements.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let existingTitle: string | null = null;\r\n\r\n  for (let index = titleElements.length - 1; index >= 0; index--) {\r\n    const currentTitleElement = titleElements[index];\r\n    const previousSibling = currentTitleElement.previousSibling;\r\n    const isBlazorTitle = previousSibling instanceof Comment && getLogicalParent(previousSibling as unknown as LogicalElement) !== null;\r\n\r\n    if (isBlazorTitle) {\r\n      continue;\r\n    }\r\n\r\n    if (existingTitle === null) {\r\n      existingTitle = currentTitleElement.textContent;\r\n    }\r\n\r\n    currentTitleElement.parentNode?.removeChild(currentTitleElement);\r\n  }\r\n\r\n  return existingTitle;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nexport const InputFile = {\r\n  init,\r\n  toImageFile,\r\n  readFileData,\r\n};\r\n\r\ninterface BrowserFile {\r\n  id: number;\r\n  lastModified: string;\r\n  name: string;\r\n  size: number;\r\n  contentType: string;\r\n  blob: Blob;\r\n}\r\n\r\nexport interface InputElement extends HTMLInputElement {\r\n  _blazorInputFileNextFileId: number;\r\n  _blazorFilesById: { [id: number]: BrowserFile };\r\n}\r\n\r\nfunction init(callbackWrapper: any, elem: InputElement): void {\r\n  elem._blazorInputFileNextFileId = 0;\r\n\r\n  elem.addEventListener('click', function(): void {\r\n    // Permits replacing an existing file with a new one of the same file name.\r\n    elem.value = '';\r\n  });\r\n\r\n  elem.addEventListener('change', function(): void {\r\n    // Reduce to purely serializable data, plus an index by ID.\r\n    elem._blazorFilesById = {};\r\n\r\n    const fileList = Array.prototype.map.call(elem.files, function(file: File): BrowserFile {\r\n      const result = {\r\n        id: ++elem._blazorInputFileNextFileId,\r\n        lastModified: new Date(file.lastModified).toISOString(),\r\n        name: file.name,\r\n        size: file.size,\r\n        contentType: file.type,\r\n        readPromise: undefined,\r\n        arrayBuffer: undefined,\r\n        blob: file,\r\n      };\r\n\r\n      elem._blazorFilesById[result.id] = result;\r\n\r\n      return result;\r\n    });\r\n\r\n    callbackWrapper.invokeMethodAsync('NotifyChange', fileList);\r\n  });\r\n}\r\n\r\nasync function toImageFile(elem: InputElement, fileId: number, format: string, maxWidth: number, maxHeight: number): Promise<BrowserFile> {\r\n  const originalFile = getFileById(elem, fileId);\r\n\r\n  const loadedImage = await new Promise(function(resolve: (loadedImage: HTMLImageElement) => void): void {\r\n    const originalFileImage = new Image();\r\n    originalFileImage.onload = function(): void {\r\n      URL.revokeObjectURL(originalFileImage.src);\r\n      resolve(originalFileImage);\r\n    };\r\n    originalFileImage.onerror = function(): void {\r\n      originalFileImage.onerror = null;\r\n      URL.revokeObjectURL(originalFileImage.src);\r\n    };\r\n    originalFileImage.src = URL.createObjectURL(originalFile['blob']);\r\n  });\r\n\r\n  const resizedImageBlob = await new Promise(function(resolve: BlobCallback): void {\r\n    const desiredWidthRatio = Math.min(1, maxWidth / loadedImage.width);\r\n    const desiredHeightRatio = Math.min(1, maxHeight / loadedImage.height);\r\n    const chosenSizeRatio = Math.min(desiredWidthRatio, desiredHeightRatio);\r\n\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = Math.round(loadedImage.width * chosenSizeRatio);\r\n    canvas.height = Math.round(loadedImage.height * chosenSizeRatio);\r\n    canvas.getContext('2d')?.drawImage(loadedImage, 0, 0, canvas.width, canvas.height);\r\n    canvas.toBlob(resolve, format);\r\n  });\r\n\r\n  const result: BrowserFile = {\r\n    id: ++elem._blazorInputFileNextFileId,\r\n    lastModified: originalFile.lastModified,\r\n    name: originalFile.name,\r\n    size: resizedImageBlob?.size || 0,\r\n    contentType: format,\r\n    blob: resizedImageBlob ? resizedImageBlob : originalFile.blob,\r\n  };\r\n\r\n  elem._blazorFilesById[result.id] = result;\r\n\r\n  return result;\r\n}\r\n\r\nasync function readFileData(elem: InputElement, fileId: number): Promise<Blob> {\r\n  const file = getFileById(elem, fileId);\r\n  return file.blob;\r\n}\r\n\r\nexport function getFileById(elem: InputElement, fileId: number): BrowserFile {\r\n  const file = elem._blazorFilesById[fileId];\r\n\r\n  if (!file) {\r\n    throw new Error(`There is no file with ID ${fileId}. The file list may have changed. See https://aka.ms/aspnet/blazor-input-file-multiple-selections.`);\r\n  }\r\n\r\n  return file;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nconst registeredLocks = new Set<string>();\r\n\r\nexport const NavigationLock = {\r\n  enableNavigationPrompt,\r\n  disableNavigationPrompt,\r\n};\r\n\r\nfunction onBeforeUnload(event: BeforeUnloadEvent) {\r\n  event.preventDefault();\r\n  // Modern browsers display a confirmation prompt when returnValue is some value other than\r\n  // null or undefined.\r\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event#compatibility_notes\r\n  event.returnValue = true;\r\n}\r\n\r\nfunction enableNavigationPrompt(id: string) {\r\n  if (registeredLocks.size === 0) {\r\n    window.addEventListener('beforeunload', onBeforeUnload);\r\n  }\r\n\r\n  registeredLocks.add(id);\r\n}\r\n\r\nfunction disableNavigationPrompt(id: string) {\r\n  registeredLocks.delete(id);\r\n\r\n  if (registeredLocks.size === 0) {\r\n    window.removeEventListener('beforeunload', onBeforeUnload);\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DotNet } from '@microsoft/dotnet-js-interop';\r\n\r\nexport async function getNextChunk(data: ArrayBufferView | Blob, position: number, nextChunkSize: number): Promise<Uint8Array> {\r\n  if (data instanceof Blob) {\r\n    return await getChunkFromBlob(data, position, nextChunkSize);\r\n  } else {\r\n    return getChunkFromArrayBufferView(data, position, nextChunkSize);\r\n  }\r\n}\r\n\r\nasync function getChunkFromBlob(data: Blob, position: number, nextChunkSize: number): Promise<Uint8Array> {\r\n  const chunkBlob = data.slice(position, position + nextChunkSize);\r\n  const arrayBuffer = await chunkBlob.arrayBuffer();\r\n  const nextChunkData = new Uint8Array(arrayBuffer);\r\n  return nextChunkData;\r\n}\r\n\r\nfunction getChunkFromArrayBufferView(data: ArrayBufferView, position: number, nextChunkSize: number): Uint8Array {\r\n  const nextChunkData = new Uint8Array(data.buffer, data.byteOffset + position, nextChunkSize);\r\n  return nextChunkData;\r\n}\r\n\r\nconst transmittingDotNetToJSStreams = new Map<number, ReadableStreamController<any>>();\r\nexport function receiveDotNetDataStream(dispatcher: DotNet.ICallDispatcher, streamId: number, data: Uint8Array, bytesRead: number, errorMessage: string): void {\r\n  let streamController = transmittingDotNetToJSStreams.get(streamId);\r\n  if (!streamController) {\r\n    const readableStream = new ReadableStream({\r\n      start(controller) {\r\n        transmittingDotNetToJSStreams.set(streamId, controller);\r\n        streamController = controller;\r\n      },\r\n    });\r\n\r\n    dispatcher.supplyDotNetStream(streamId, readableStream);\r\n  }\r\n\r\n  if (errorMessage) {\r\n    streamController!.error(errorMessage);\r\n    transmittingDotNetToJSStreams.delete(streamId);\r\n  } else if (bytesRead === 0) {\r\n    streamController!.close();\r\n    transmittingDotNetToJSStreams.delete(streamId);\r\n  } else {\r\n    streamController!.enqueue(data.length === bytesRead ? data : data.subarray(0, bytesRead));\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { navigateTo, internalFunctions as navigationManagerInternalFunctions, NavigationOptions } from './Services/NavigationManager';\r\nimport { domFunctions } from './DomWrapper';\r\nimport { Virtualize } from './Virtualize';\r\nimport { PageTitle } from './PageTitle';\r\nimport { registerCustomEventType, EventTypeOptions } from './Rendering/Events/EventTypes';\r\nimport { HubConnection } from '@microsoft/signalr';\r\nimport { InputFile } from './InputFile';\r\nimport { NavigationLock } from './NavigationLock';\r\nimport { DefaultReconnectionHandler } from './Platform/Circuits/DefaultReconnectionHandler';\r\nimport { CircuitStartOptions } from './Platform/Circuits/CircuitStartOptions';\r\nimport { WebAssemblyStartOptions } from './Platform/WebAssemblyStartOptions';\r\nimport { Platform, Pointer } from './Platform/Platform';\r\nimport { getNextChunk } from './StreamingInterop';\r\nimport { RootComponentsFunctions } from './Rendering/JSRootComponents';\r\nimport { attachWebRendererInterop } from './Rendering/WebRendererInteropMethods';\r\nimport { WebStartOptions } from './Platform/WebStartOptions';\r\nimport { RuntimeAPI } from '@microsoft/dotnet-runtime';\r\nimport { JSEventRegistry } from './Services/JSEventRegistry';\r\n\r\n// TODO: It's kind of hard to tell which .NET platform(s) some of these APIs are relevant to.\r\n// It's important to know this information when dealing with the possibility of mulitple .NET platforms being available.\r\n// e.g., which of these APIs need to account for there being multiple .NET runtimes, and which don't?\r\n\r\n// We should consider separating it all out so that we can easily identify the platform requirements of each API.\r\n// For example:\r\n// * Blazor.{foo}: public Blazor APIs\r\n// * Blazor._internal.{foo}: internal, platform-agnostic Blazor APIs\r\n// * Blazor.platform.{somePlatformName}.{foo}: public, platform-specific Blazor APIs (would be empty at first, so no initial breaking changes)\r\n// * Blazor.platform.{somePlatformName}.{_internal}.{foo}: internal, platform-specific Blazor APIs\r\nexport interface IBlazor {\r\n  navigateTo: (uri: string, options: NavigationOptions) => void;\r\n  registerCustomEventType: (eventName: string, options: EventTypeOptions) => void;\r\n\r\n  addEventListener?: typeof JSEventRegistry.prototype.addEventListener;\r\n  removeEventListener?: typeof JSEventRegistry.prototype.removeEventListener;\r\n  disconnect?: () => void;\r\n  reconnect?: (existingConnection?: HubConnection) => Promise<boolean>;\r\n  defaultReconnectionHandler?: DefaultReconnectionHandler;\r\n  start?: ((userOptions?: Partial<CircuitStartOptions>) => Promise<void>) | ((options?: Partial<WebAssemblyStartOptions>) => Promise<void>) | ((options?: Partial<WebStartOptions>) => Promise<void>);\r\n  platform?: Platform;\r\n  rootComponents: typeof RootComponentsFunctions;\r\n  runtime: RuntimeAPI,\r\n\r\n  _internal: {\r\n    navigationManager: typeof navigationManagerInternalFunctions | any;\r\n    domWrapper: typeof domFunctions;\r\n    Virtualize: typeof Virtualize;\r\n    PageTitle: typeof PageTitle;\r\n    forceCloseConnection?: () => Promise<void>;\r\n    InputFile?: typeof InputFile;\r\n    NavigationLock: typeof NavigationLock;\r\n    invokeJSJson?: (identifier: string, targetInstanceId: number, resultType: number, argsJson: string, asyncHandle: number) => string | null;\r\n    endInvokeDotNetFromJS?: (callId: string, success: boolean, resultJsonOrErrorMessage: string) => void;\r\n    receiveByteArray?: (id: number, data: Uint8Array) => void;\r\n    getPersistedState?: () => string;\r\n    getInitialComponentsUpdate?: () => Promise<string>;\r\n    updateRootComponents?: (operations: string) => void;\r\n    endUpdateRootComponents?: (batchId: number) => void;\r\n    attachRootComponentToElement?: (arg0: any, arg1: any, arg2: any, arg3: any) => void;\r\n    registeredComponents?: {\r\n      getRegisteredComponentsCount: () => number;\r\n      getAssembly: (id) => string;\r\n      getTypeName: (id) => string;\r\n      getParameterDefinitions: (id) => string;\r\n      getParameterValues: (id) => any;\r\n    };\r\n    renderBatch?: (browserRendererId: number, batchAddress: Pointer) => void;\r\n    getConfig?: (fileName: string) => Uint8Array | undefined;\r\n    getApplicationEnvironment?: () => string;\r\n    dotNetCriticalError?: any;\r\n    loadLazyAssembly?: any;\r\n    loadSatelliteAssemblies?: any;\r\n    sendJSDataStream?: (data: any, streamId: number, chunkSize: number) => void;\r\n    getJSDataStreamChunk?: (data: any, position: number, chunkSize: number) => Promise<Uint8Array>;\r\n    receiveWebAssemblyDotNetDataStream?: (streamId: number, data: any, bytesRead: number, errorMessage: string) => void;\r\n    receiveWebViewDotNetDataStream?: (streamId: number, data: any, bytesRead: number, errorMessage: string) => void;\r\n    attachWebRendererInterop?: typeof attachWebRendererInterop;\r\n\r\n    // JSExport APIs\r\n    dotNetExports?: {\r\n      InvokeDotNet: (assemblyName: string | null, methodIdentifier: string, dotNetObjectId: number, argsJson: string) => string | null;\r\n      EndInvokeJS: (argsJson: string) => void;\r\n      BeginInvokeDotNet: (callId: string | null, assemblyNameOrDotNetObjectId: string, methodIdentifier: string, argsJson: string) => void;\r\n      ReceiveByteArrayFromJS: (id: number, data: Uint8Array) => void;\r\n      UpdateRootComponentsCore: (operationsJson: string) => void;\r\n    }\r\n\r\n    // APIs invoked by hot reload\r\n    applyHotReload?: (id: string, metadataDelta: string, ilDelta: string, pdbDelta: string | undefined, updatedTypes?: number[]) => void;\r\n    getApplyUpdateCapabilities?: () => string;\r\n    hotReloadApplied?: () => void;\r\n  }\r\n}\r\n\r\nexport const Blazor: IBlazor = {\r\n  navigateTo,\r\n  registerCustomEventType,\r\n  rootComponents: RootComponentsFunctions,\r\n  runtime: {} as RuntimeAPI,\r\n\r\n  _internal: {\r\n    navigationManager: navigationManagerInternalFunctions,\r\n    domWrapper: domFunctions,\r\n    Virtualize,\r\n    PageTitle,\r\n    InputFile,\r\n    NavigationLock,\r\n    getJSDataStreamChunk: getNextChunk,\r\n    attachWebRendererInterop,\r\n  },\r\n};\r\n\r\n// Make the following APIs available in global scope for invocation from JS\r\nwindow['Blazor'] = Blazor;\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { MonoConfig } from '@microsoft/dotnet-runtime';\r\n\r\nconst navigatorUA = navigator as MonoNavigatorUserAgent;\r\nconst brands = navigatorUA.userAgentData && navigatorUA.userAgentData.brands;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst currentBrowserIsChromeOrEdge = brands && brands.length > 0\r\n  ? brands.some(b => b.brand === 'Google Chrome' || b.brand === 'Microsoft Edge' || b.brand === 'Chromium')\r\n  : (window as any).chrome;\r\nconst platform = navigatorUA.userAgentData?.platform ?? navigator.platform;\r\n\r\nfunction hasDebuggingEnabled(config: MonoConfig): boolean {\r\n  return config.debugLevel !== 0 && (currentBrowserIsChromeOrEdge || navigator.userAgent.includes('Firefox'));\r\n}\r\n\r\nexport function attachDebuggerHotkey(config: MonoConfig): void {\r\n  // Use the combination shift+alt+D because it isn't used by the major browsers\r\n  // for anything else by default\r\n  const altKeyName = platform.match(/^Mac/i) ? 'Cmd' : 'Alt';\r\n  if (hasDebuggingEnabled(config)) {\r\n    console.info(`Debugging hotkey: Shift+${altKeyName}+D (when application has focus)`);\r\n  }\r\n\r\n  // Even if debugging isn't enabled, we register the hotkey so we can report why it's not enabled\r\n  document.addEventListener('keydown', evt => {\r\n    if (evt.shiftKey && (evt.metaKey || evt.altKey) && evt.code === 'KeyD') {\r\n      if (!hasDebuggingEnabled(config)) {\r\n        console.error('Cannot start debugging, because the application was not compiled with debugging enabled.');\r\n      } else if (navigator.userAgent.includes('Firefox')) {\r\n        launchFirefoxDebugger();\r\n      } else if (!currentBrowserIsChromeOrEdge) {\r\n        console.error('Currently, only Microsoft Edge (80+), Google Chrome, or Chromium, are supported for debugging.');\r\n      } else {\r\n        launchDebugger();\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nasync function launchFirefoxDebugger() {\r\n  const response = await fetch(`_framework/debug?url=${encodeURIComponent(location.href)}&isFirefox=true`);\r\n  if (response.status !== 200) {\r\n    console.warn(await response.text());\r\n  }\r\n}\r\n\r\nfunction launchDebugger() {\r\n  // The noopener flag is essential, because otherwise Chrome tracks the association with the\r\n  // parent tab, and then when the parent tab pauses in the debugger, the child tab does so\r\n  // too (even if it's since navigated to a different page). This means that the debugger\r\n  // itself freezes, and not just the page being debugged.\r\n  //\r\n  // We have to construct a link element and simulate a click on it, because the more obvious\r\n  // window.open(..., 'noopener') always opens a new window instead of a new tab.\r\n  const link = document.createElement('a');\r\n  link.href = `_framework/debug?url=${encodeURIComponent(location.href)}`;\r\n  link.target = '_blank';\r\n  link.rel = 'noopener noreferrer';\r\n  link.click();\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nlet hasFailed = false;\r\n\r\nexport function showErrorNotification(): void {\r\n  const errorUi = document.querySelector('#blazor-error-ui') as HTMLElement;\r\n  if (errorUi) {\r\n    errorUi.style.display = 'block';\r\n  }\r\n\r\n  if (!hasFailed) {\r\n    hasFailed = true;\r\n    const errorUiReloads = document.querySelectorAll<HTMLElement>('#blazor-error-ui .reload');\r\n    errorUiReloads.forEach(reload => {\r\n      reload.onclick = function(e) {\r\n        location.reload();\r\n        e.preventDefault();\r\n      };\r\n    });\r\n\r\n    const errorUiDismiss = document.querySelectorAll<HTMLElement>('#blazor-error-ui .dismiss');\r\n    errorUiDismiss.forEach(dismiss => {\r\n      dismiss.onclick = function(e) {\r\n        const errorUi = document.querySelector<HTMLElement>('#blazor-error-ui');\r\n        if (errorUi) {\r\n          errorUi.style.display = 'none';\r\n        }\r\n        e.preventDefault();\r\n      };\r\n    });\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// These IDs need to be kept in sync with RendererId.cs\r\nexport enum WebRendererId {\r\n  Default = 0,\r\n  Server = 1,\r\n  WebAssembly = 2,\r\n  WebView = 3,\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport enum LogLevel {\r\n  /** Log level for very low severity diagnostic messages. */\r\n  Trace = 0,\r\n  /** Log level for low severity diagnostic messages. */\r\n  Debug = 1,\r\n  /** Log level for informational diagnostic messages. */\r\n  Information = 2,\r\n  /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n  Warning = 3,\r\n  /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n  Error = 4,\r\n  /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n  Critical = 5,\r\n  /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n  None = 6,\r\n}\r\n\r\n/** An abstraction that provides a sink for diagnostic messages. */\r\nexport interface Logger {\r\n  /** Called by the framework to emit a diagnostic message.\r\n   *\r\n   * @param {LogLevel} logLevel The severity level of the message.\r\n   * @param {string} message The message.\r\n   */\r\n  log(logLevel: LogLevel, message: string | Error): void;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { Blazor, IBlazor } from '../GlobalExports';\r\nimport { AfterBlazorServerStartedCallback, BeforeBlazorServerStartedCallback, CircuitStartOptions, ServerInitializers } from '../Platform/Circuits/CircuitStartOptions';\r\nimport { LogLevel, Logger } from '../Platform/Logging/Logger';\r\nimport { AfterBlazorWebAssemblyStartedCallback, BeforeBlazorWebAssemblyStartedCallback, WebAssemblyInitializers, WebAssemblyStartOptions } from '../Platform/WebAssemblyStartOptions';\r\nimport { WebStartOptions } from '../Platform/WebStartOptions';\r\nimport { WebRendererId } from '../Rendering/WebRendererId';\r\nimport { getRendererAttachedPromise } from '../Rendering/WebRendererInteropMethods';\r\n\r\ntype BeforeBlazorStartedCallback = (...args: unknown[]) => Promise<void>;\r\nexport type AfterBlazorStartedCallback = (blazor: typeof Blazor) => Promise<void>;\r\ntype BeforeBlazorWebStartedCallback = (options: WebStartOptions) => Promise<void>;\r\ntype AfterBlazorWebStartedCallback = (blazor: IBlazor) => Promise<void>;\r\nexport type BlazorInitializer = {\r\n  beforeStart: BeforeBlazorStartedCallback,\r\n  afterStarted: AfterBlazorStartedCallback,\r\n  beforeWebStart: BeforeBlazorWebStartedCallback,\r\n  afterWebStarted: AfterBlazorWebStartedCallback,\r\n  beforeWebAssemblyStart: BeforeBlazorWebAssemblyStartedCallback,\r\n  afterWebAssemblyStarted: AfterBlazorWebAssemblyStartedCallback,\r\n  beforeServerStart: BeforeBlazorServerStartedCallback,\r\n  afterServerStarted: AfterBlazorServerStartedCallback,\r\n};\r\n\r\nexport class JSInitializer {\r\n  private afterStartedCallbacks: AfterBlazorStartedCallback[] = [];\r\n\r\n  constructor(\r\n    private singleRuntime = true,\r\n    private logger?: Logger,\r\n    afterstartedCallbacks?: AfterBlazorStartedCallback[],\r\n    private webRendererId: number = 0\r\n  ) {\r\n    if (afterstartedCallbacks) {\r\n      this.afterStartedCallbacks.push(...afterstartedCallbacks);\r\n    }\r\n  }\r\n\r\n  async importInitializersAsync(initializerFiles: string[], initializerArguments: unknown[]): Promise<void> {\r\n    // This code is not called on WASM, because library intializers are imported by runtime.\r\n\r\n    await Promise.all(initializerFiles.map(f => importAndInvokeInitializer(this, f)));\r\n\r\n    function adjustPath(path: string): string {\r\n      // This is the same we do in JS interop with the import callback\r\n      const base = document.baseURI;\r\n      path = base.endsWith('/') ? `${base}${path}` : `${base}/${path}`;\r\n      return path;\r\n    }\r\n\r\n    async function importAndInvokeInitializer(jsInitializer: JSInitializer, path: string): Promise<void> {\r\n      const adjustedPath = adjustPath(path);\r\n      const initializer = await import(/* webpackIgnore: true */ adjustedPath) as Partial<BlazorInitializer>;\r\n      if (initializer === undefined) {\r\n        return;\r\n      }\r\n\r\n      if (!jsInitializer.singleRuntime) {\r\n        return runMultiRuntimeInitializers(jsInitializer, initializer, initializerArguments);\r\n      } else {\r\n        const { beforeStart, afterStarted, beforeWebAssemblyStart, afterWebAssemblyStarted, beforeServerStart, afterServerStarted } = initializer;\r\n        let finalBeforeStart = beforeStart;\r\n        if (jsInitializer.webRendererId === WebRendererId.Server && beforeServerStart) {\r\n          finalBeforeStart = beforeServerStart as unknown as BeforeBlazorStartedCallback;\r\n        }\r\n        if (jsInitializer.webRendererId === WebRendererId.WebAssembly && beforeWebAssemblyStart) {\r\n          finalBeforeStart = beforeWebAssemblyStart as unknown as BeforeBlazorStartedCallback;\r\n        }\r\n        let finalAfterStarted = afterStarted;\r\n        if (jsInitializer.webRendererId === WebRendererId.Server && afterServerStarted) {\r\n          finalAfterStarted = afterServerStarted;\r\n        }\r\n        if (jsInitializer.webRendererId === WebRendererId.WebAssembly && afterWebAssemblyStarted) {\r\n          finalAfterStarted = afterWebAssemblyStarted;\r\n        }\r\n\r\n        return runClassicInitializers(jsInitializer, finalBeforeStart, finalAfterStarted, initializerArguments);\r\n      }\r\n\r\n      function runMultiRuntimeInitializers(\r\n        jsInitializer: JSInitializer,\r\n        initializerModule: Partial<BlazorInitializer>, initializerArguments: unknown[]): void | PromiseLike<void> {\r\n        const options = initializerArguments[0] as WebStartOptions;\r\n        const { beforeStart, afterStarted, beforeWebStart, afterWebStarted, beforeWebAssemblyStart, afterWebAssemblyStarted, beforeServerStart, afterServerStarted } = initializerModule;\r\n        const runtimeSpecificExports = !!(beforeWebStart || afterWebStarted || beforeWebAssemblyStart || afterWebAssemblyStarted || beforeServerStart || afterServerStarted);\r\n        const hasOnlyClassicInitializers = !!(!runtimeSpecificExports && (beforeStart || afterStarted));\r\n        const runLegacyInitializers = hasOnlyClassicInitializers && options.enableClassicInitializers;\r\n        if (hasOnlyClassicInitializers && !options.enableClassicInitializers) {\r\n          // log warning \"classic initializers will be ignored when multiple runtimes are used\".\r\n          // Skipping \"adjustedPath\" initializer.\r\n          jsInitializer.logger?.log(\r\n            LogLevel.Warning,\r\n            `Initializer '${adjustedPath}' will be ignored because multiple runtimes are available. Use 'before(Web|WebAssembly|Server)Start' and 'after(Web|WebAssembly|Server)Started' instead.`\r\n          );\r\n        } else if (runLegacyInitializers) {\r\n          return runClassicInitializers(jsInitializer, beforeStart, afterStarted, initializerArguments);\r\n        }\r\n\r\n        ensureInitializers(options);\r\n\r\n        if (beforeWebAssemblyStart) {\r\n          options.webAssembly.initializers.beforeStart.push(beforeWebAssemblyStart);\r\n        }\r\n\r\n        if (afterWebAssemblyStarted) {\r\n          options.webAssembly.initializers.afterStarted.push(afterWebAssemblyStarted);\r\n        }\r\n\r\n        if (beforeServerStart) {\r\n          options.circuit.initializers.beforeStart.push(beforeServerStart);\r\n        }\r\n\r\n        if (afterServerStarted) {\r\n          options.circuit.initializers.afterStarted.push(afterServerStarted);\r\n        }\r\n\r\n        if (afterWebStarted) {\r\n          jsInitializer.afterStartedCallbacks.push(afterWebStarted);\r\n        }\r\n\r\n        if (beforeWebStart) {\r\n          return beforeWebStart(options);\r\n        }\r\n      }\r\n\r\n      function runClassicInitializers(jsInitializer: JSInitializer, beforeStart: BeforeBlazorStartedCallback | undefined, afterStarted: AfterBlazorStartedCallback | undefined, initializerArguments: unknown[]): void | PromiseLike<void> {\r\n        if (afterStarted) {\r\n          jsInitializer.afterStartedCallbacks.push(afterStarted);\r\n        }\r\n\r\n        if (beforeStart) {\r\n          return beforeStart(...initializerArguments);\r\n        }\r\n      }\r\n\r\n      function ensureInitializers(options: Partial<WebStartOptions>):\r\n        asserts options is OptionsWithInitializers {\r\n        if (!options['webAssembly']) {\r\n          options['webAssembly'] = ({ initializers: { beforeStart: [], afterStarted: [] } }) as unknown as WebAssemblyStartOptions;\r\n        } else if (!options['webAssembly'].initializers) {\r\n          options['webAssembly'].initializers = { beforeStart: [], afterStarted: [] };\r\n        }\r\n\r\n        if (!options['circuit']) {\r\n          options['circuit'] = ({ initializers: { beforeStart: [], afterStarted: [] } }) as unknown as CircuitStartOptions;\r\n        } else if (!options['circuit'].initializers) {\r\n          options['circuit'].initializers = { beforeStart: [], afterStarted: [] };\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  async invokeAfterStartedCallbacks(blazor: typeof Blazor): Promise<void> {\r\n    const attached = getRendererAttachedPromise(this.webRendererId);\r\n    if (attached) {\r\n      await attached;\r\n    }\r\n    await Promise.all(this.afterStartedCallbacks.map(callback => callback(blazor)));\r\n  }\r\n}\r\n\r\ntype OptionsWithInitializers = {\r\n  webAssembly: WebAssemblyStartOptions & { initializers: WebAssemblyInitializers },\r\n  circuit: CircuitStartOptions & { initializers: ServerInitializers }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\n/* eslint-disable no-prototype-builtins */\r\nimport { DotNet } from '@microsoft/dotnet-js-interop';\r\nimport { attachDebuggerHotkey } from './MonoDebugger';\r\nimport { showErrorNotification } from '../../BootErrors';\r\nimport { Platform, System_Array, Pointer, System_Object, System_String, HeapLock, PlatformApi } from '../Platform';\r\nimport { WebAssemblyBootResourceType, WebAssemblyStartOptions } from '../WebAssemblyStartOptions';\r\nimport { Blazor } from '../../GlobalExports';\r\nimport { DotnetModuleConfig, MonoConfig, ModuleAPI, RuntimeAPI, GlobalizationMode } from '@microsoft/dotnet-runtime';\r\nimport { fetchAndInvokeInitializers } from '../../JSInitializers/JSInitializers.WebAssembly';\r\nimport { JSInitializer } from '../../JSInitializers/JSInitializers';\r\n\r\n// initially undefined and only fully initialized after createEmscriptenModuleInstance()\r\nexport let dispatcher: DotNet.ICallDispatcher = undefined as any;\r\nlet MONO_INTERNAL: any = undefined as any;\r\nlet runtime: RuntimeAPI = undefined as any;\r\nlet jsInitializer: JSInitializer;\r\n\r\nlet currentHeapLock: MonoHeapLock | null = null;\r\n\r\nexport function getInitializer() {\r\n  return jsInitializer;\r\n}\r\n\r\nexport const monoPlatform: Platform = {\r\n  load: function load(options: Partial<WebAssemblyStartOptions>, onConfigLoaded?: (loadedConfig: MonoConfig) => void) {\r\n    return createRuntimeInstance(options, onConfigLoaded);\r\n  },\r\n\r\n  start: function start() {\r\n    return configureRuntimeInstance();\r\n  },\r\n\r\n  callEntryPoint: async function callEntryPoint(): Promise<any> {\r\n    try {\r\n      await runtime.runMain(runtime.getConfig().mainAssemblyName!, []);\r\n    } catch (error) {\r\n      console.error(error);\r\n      showErrorNotification();\r\n    }\r\n  },\r\n\r\n  getArrayEntryPtr: function getArrayEntryPtr<TPtr extends Pointer>(array: System_Array<TPtr>, index: number, itemSize: number): TPtr {\r\n    // First byte is array length, followed by entries\r\n    const address = getArrayDataPointer(array) + 4 + index * itemSize;\r\n    return address as any as TPtr;\r\n  },\r\n\r\n  getObjectFieldsBaseAddress: function getObjectFieldsBaseAddress(referenceTypedObject: System_Object): Pointer {\r\n    // The first two int32 values are internal Mono data\r\n    return (referenceTypedObject as any + 8) as any as Pointer;\r\n  },\r\n\r\n  readInt16Field: function readHeapInt16(baseAddress: Pointer, fieldOffset?: number): number {\r\n    return runtime.getHeapI16((baseAddress as any) + (fieldOffset || 0));\r\n  },\r\n\r\n  readInt32Field: function readHeapInt32(baseAddress: Pointer, fieldOffset?: number): number {\r\n    return runtime.getHeapI32((baseAddress as any) + (fieldOffset || 0));\r\n  },\r\n\r\n  readUint64Field: function readHeapUint64(baseAddress: Pointer, fieldOffset?: number): number {\r\n    return runtime.getHeapU52((baseAddress as any) + (fieldOffset || 0));\r\n  },\r\n\r\n  readObjectField: function readObjectField<T extends System_Object>(baseAddress: Pointer, fieldOffset?: number): T {\r\n    return runtime.getHeapU32((baseAddress as any) + (fieldOffset || 0)) as any as T;\r\n  },\r\n\r\n  readStringField: function readStringField(baseAddress: Pointer, fieldOffset?: number, readBoolValueAsString?: boolean): string | null {\r\n    const fieldValue = runtime.getHeapU32((baseAddress as any) + (fieldOffset || 0));\r\n    if (fieldValue === 0) {\r\n      return null;\r\n    }\r\n\r\n    if (readBoolValueAsString) {\r\n      // Some fields are stored as a union of bool | string | null values, but need to read as a string.\r\n      // If the stored value is a bool, the behavior we want is empty string ('') for true, or null for false.\r\n\r\n      const unboxedValue = MONO_INTERNAL.monoObjectAsBoolOrNullUnsafe(fieldValue as any as System_Object);\r\n      if (typeof (unboxedValue) === 'boolean') {\r\n        return unboxedValue ? '' : null;\r\n      }\r\n    }\r\n\r\n    return MONO_INTERNAL.monoStringToStringUnsafe(fieldValue as any as System_String);\r\n  },\r\n\r\n  readStructField: function readStructField<T extends Pointer>(baseAddress: Pointer, fieldOffset?: number): T {\r\n    return ((baseAddress as any as number) + (fieldOffset || 0)) as any as T;\r\n  },\r\n\r\n  beginHeapLock: function beginHeapLock() {\r\n    assertHeapIsNotLocked();\r\n    currentHeapLock = MonoHeapLock.create();\r\n    return currentHeapLock;\r\n  },\r\n\r\n  invokeWhenHeapUnlocked: function invokeWhenHeapUnlocked(callback) {\r\n    // This is somewhat like a sync context. If we're not locked, just pass through the call directly.\r\n    if (!currentHeapLock) {\r\n      callback();\r\n    } else {\r\n      currentHeapLock.enqueuePostReleaseAction(callback);\r\n    }\r\n  },\r\n};\r\n\r\nasync function importDotnetJs(startOptions: Partial<WebAssemblyStartOptions>): Promise<ModuleAPI> {\r\n  const browserSupportsNativeWebAssembly = typeof WebAssembly !== 'undefined' && WebAssembly.validate;\r\n  if (!browserSupportsNativeWebAssembly) {\r\n    throw new Error('This browser does not support WebAssembly.');\r\n  }\r\n\r\n  let src = '_framework/dotnet.js';\r\n\r\n  // Allow overriding the URI from which the dotnet.*.js file is loaded\r\n  if (startOptions.loadBootResource) {\r\n    const resourceType: WebAssemblyBootResourceType = 'dotnetjs';\r\n    const customSrc = startOptions.loadBootResource(resourceType, 'dotnet.js', src, '', 'js-module-dotnet');\r\n    if (typeof (customSrc) === 'string') {\r\n      src = customSrc;\r\n    } else if (customSrc) {\r\n      // Since we must load this via a import, it's only valid to supply a URI (and not a Request, say)\r\n      throw new Error(`For a ${resourceType} resource, custom loaders must supply a URI string.`);\r\n    }\r\n  }\r\n\r\n  const absoluteSrc = (new URL(src, document.baseURI)).toString();\r\n  return await import(/* webpackIgnore: true */ absoluteSrc);\r\n}\r\n\r\nfunction prepareRuntimeConfig(options: Partial<WebAssemblyStartOptions>, onConfigLoadedCallback?: (loadedConfig: MonoConfig) => void): DotnetModuleConfig {\r\n  const config: MonoConfig = {\r\n    maxParallelDownloads: 1000000, // disable throttling parallel downloads\r\n    enableDownloadRetry: false, // disable retry downloads\r\n    applicationEnvironment: options.environment,\r\n  };\r\n\r\n  const onConfigLoaded = async (loadedConfig: MonoConfig) => {\r\n    if (!loadedConfig.environmentVariables) {\r\n      loadedConfig.environmentVariables = {};\r\n    }\r\n\r\n    if (loadedConfig.globalizationMode === GlobalizationMode.Sharded) {\r\n      loadedConfig.environmentVariables['__BLAZOR_SHARDED_ICU'] = '1';\r\n    }\r\n\r\n    Blazor._internal.getApplicationEnvironment = () => loadedConfig.applicationEnvironment!;\r\n\r\n    onConfigLoadedCallback?.(loadedConfig);\r\n\r\n    jsInitializer = await fetchAndInvokeInitializers(options, loadedConfig);\r\n  };\r\n\r\n  const moduleConfig = (window['Module'] || {}) as any;\r\n  const dotnetModuleConfig: DotnetModuleConfig = {\r\n    ...moduleConfig,\r\n    onConfigLoaded: (onConfigLoaded as (config: MonoConfig) => void | Promise<void>),\r\n    onDownloadResourceProgress: setProgress,\r\n    config,\r\n    out: print,\r\n    err: printErr,\r\n  };\r\n\r\n  return dotnetModuleConfig;\r\n}\r\n\r\nasync function createRuntimeInstance(options: Partial<WebAssemblyStartOptions>, onConfigLoaded?: (loadedConfig: MonoConfig) => void): Promise<void> {\r\n  const { dotnet } = await importDotnetJs(options);\r\n  const moduleConfig = prepareRuntimeConfig(options, onConfigLoaded);\r\n\r\n  if (options.applicationCulture) {\r\n    dotnet.withApplicationCulture(options.applicationCulture);\r\n  }\r\n\r\n  if (options.environment) {\r\n    dotnet.withApplicationEnvironment(options.environment);\r\n  }\r\n\r\n  if (options.loadBootResource) {\r\n    dotnet.withResourceLoader(options.loadBootResource);\r\n  }\r\n\r\n  const anyDotnet = (dotnet as any);\r\n  anyDotnet.withModuleConfig(moduleConfig);\r\n\r\n  if (options.configureRuntime) {\r\n    options.configureRuntime(dotnet);\r\n  }\r\n\r\n  runtime = await dotnet.create();\r\n}\r\n\r\nasync function configureRuntimeInstance(): Promise<PlatformApi> {\r\n  if (!runtime) {\r\n    throw new Error('The runtime must be loaded it gets configured.');\r\n  }\r\n\r\n  const { setModuleImports, INTERNAL: mono_internal, getConfig, invokeLibraryInitializers } = runtime;\r\n  MONO_INTERNAL = mono_internal;\r\n\r\n  attachDebuggerHotkey(getConfig());\r\n\r\n  Blazor.runtime = runtime;\r\n  Blazor._internal.dotNetCriticalError = printErr;\r\n  setModuleImports('blazor-internal', {\r\n    Blazor: { _internal: Blazor._internal },\r\n  });\r\n  const exports = await runtime.getAssemblyExports('Microsoft.AspNetCore.Components.WebAssembly');\r\n  Object.assign(Blazor._internal, {\r\n    dotNetExports: {\r\n      ...exports.Microsoft.AspNetCore.Components.WebAssembly.Services.DefaultWebAssemblyJSRuntime,\r\n    },\r\n  });\r\n  attachInteropInvoker();\r\n\r\n  return {\r\n    invokeLibraryInitializers,\r\n  };\r\n}\r\n\r\nfunction setProgress(resourcesLoaded, totalResources) {\r\n  const percentage = resourcesLoaded / totalResources * 100;\r\n  document.documentElement.style.setProperty('--blazor-load-percentage', `${percentage}%`);\r\n  document.documentElement.style.setProperty('--blazor-load-percentage-text', `\"${Math.floor(percentage)}%\"`);\r\n}\r\n\r\nconst suppressMessages = ['DEBUGGING ENABLED'];\r\nconst print = line => (suppressMessages.indexOf(line) < 0 && console.log(line));\r\nexport const printErr = line => {\r\n  // If anything writes to stderr, treat it as a critical exception. The underlying runtime writes\r\n  // to stderr if a truly critical problem occurs outside .NET code. Note that .NET unhandled\r\n  // exceptions also reach this, but via a different code path - see dotNetCriticalError below.\r\n  console.error(line || '(null)');\r\n  showErrorNotification();\r\n};\r\n\r\nfunction getArrayDataPointer<T>(array: System_Array<T>): number {\r\n  return <number><any>array + 12; // First byte from here is length, then following bytes are entries\r\n}\r\n\r\nfunction attachInteropInvoker(): void {\r\n  dispatcher = DotNet.attachDispatcher({\r\n    beginInvokeDotNetFromJS: (callId: number, assemblyName: string | null, methodIdentifier: string, dotNetObjectId: any | null, argsJson: string): void => {\r\n      assertHeapIsNotLocked();\r\n      if (!dotNetObjectId && !assemblyName) {\r\n        throw new Error('Either assemblyName or dotNetObjectId must have a non null value.');\r\n      }\r\n      // As a current limitation, we can only pass 4 args. Fortunately we only need one of\r\n      // 'assemblyName' or 'dotNetObjectId', so overload them in a single slot\r\n      const assemblyNameOrDotNetObjectId: string = dotNetObjectId\r\n        ? dotNetObjectId.toString()\r\n        : assemblyName;\r\n\r\n      Blazor._internal.dotNetExports!.BeginInvokeDotNet!(\r\n        callId ? callId.toString() : null,\r\n        assemblyNameOrDotNetObjectId,\r\n        methodIdentifier,\r\n        argsJson,\r\n      );\r\n    },\r\n    endInvokeJSFromDotNet: (asyncHandle, succeeded, serializedArgs): void => {\r\n      Blazor._internal.dotNetExports!.EndInvokeJS(serializedArgs);\r\n    },\r\n    sendByteArray: (id: number, data: Uint8Array): void => {\r\n      Blazor._internal.dotNetExports!.ReceiveByteArrayFromJS(id, data);\r\n    },\r\n    invokeDotNetFromJS: (assemblyName, methodIdentifier, dotNetObjectId, argsJson) => {\r\n      assertHeapIsNotLocked();\r\n      return Blazor._internal.dotNetExports!.InvokeDotNet(\r\n        assemblyName ? assemblyName : null,\r\n        methodIdentifier,\r\n        dotNetObjectId ?? 0,\r\n        argsJson,\r\n      ) as string;\r\n    },\r\n  });\r\n}\r\n\r\nfunction assertHeapIsNotLocked() {\r\n  if (currentHeapLock) {\r\n    throw new Error('Assertion failed - heap is currently locked');\r\n  }\r\n}\r\n\r\nclass MonoHeapLock implements HeapLock {\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  private postReleaseActions?: Function[];\r\n\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  enqueuePostReleaseAction(callback: Function): void {\r\n    if (!this.postReleaseActions) {\r\n      this.postReleaseActions = [];\r\n    }\r\n\r\n    this.postReleaseActions.push(callback);\r\n  }\r\n\r\n  release() {\r\n    if (currentHeapLock !== this) {\r\n      throw new Error('Trying to release a lock which isn\\'t current');\r\n    }\r\n\r\n    MONO_INTERNAL.mono_wasm_gc_unlock();\r\n\r\n    currentHeapLock = null;\r\n\r\n    while (this.postReleaseActions?.length) {\r\n      const nextQueuedAction = this.postReleaseActions.shift()!;\r\n\r\n      // It's possible that the action we invoke here might itself take a succession of heap locks,\r\n      // but since heap locks must be released synchronously, by the time we get back to this stack\r\n      // frame, we know the heap should no longer be locked.\r\n      nextQueuedAction();\r\n      assertHeapIsNotLocked();\r\n    }\r\n  }\r\n\r\n  static create(): MonoHeapLock {\r\n    MONO_INTERNAL.mono_wasm_gc_lock();\r\n    return new MonoHeapLock();\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { MonoConfig } from '@microsoft/dotnet-runtime';\r\nimport { WebAssemblyStartOptions } from '../Platform/WebAssemblyStartOptions';\r\nimport { WebRendererId } from '../Rendering/WebRendererId';\r\nimport { JSInitializer } from './JSInitializers';\r\n\r\nexport async function fetchAndInvokeInitializers(options: Partial<WebAssemblyStartOptions>, loadedConfig: MonoConfig): Promise<JSInitializer> {\r\n  if (options.initializers) {\r\n    // Initializers were already resolved, so we don't have to fetch them, we just invoke the beforeStart ones\r\n    // and return the list of afterStarted ones so they get processed in the same way as in traditional Blazor Server.\r\n    await Promise.all(options.initializers.beforeStart.map(i => i(options)));\r\n    return new JSInitializer(/* singleRuntime: */ false, undefined, options.initializers.afterStarted, WebRendererId.WebAssembly);\r\n  } else {\r\n    const initializerArguments = [options, loadedConfig.resources?.extensions ?? {}];\r\n    const jsInitializer = new JSInitializer(\r\n      /* singleRuntime: */ true,\r\n      undefined,\r\n      undefined,\r\n      WebRendererId.WebAssembly\r\n    );\r\n    const initializers = Object.keys((loadedConfig?.resources?.['libraryInitializers']) || {});\r\n    await jsInitializer.importInitializersAsync(initializers, initializerArguments);\r\n    return jsInitializer;\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { platform } from '../../Environment';\r\nimport { RenderBatch, ArrayRange, ArrayBuilderSegment, RenderTreeDiff, RenderTreeEdit, RenderTreeFrame, ArrayValues, EditType, FrameType } from './RenderBatch';\r\nimport { Pointer, System_Array, System_Object } from '../../Platform/Platform';\r\n\r\n// Used when running on Mono WebAssembly for shared-memory interop. The code here encapsulates\r\n// our knowledge of the memory layout of RenderBatch and all referenced types.\r\n//\r\n// In this implementation, all the DTO types are really heap pointers at runtime, hence all\r\n// the casts to 'any' whenever we pass them to platform.read.\r\n\r\nexport class SharedMemoryRenderBatch implements RenderBatch {\r\n  constructor(private batchAddress: Pointer) {\r\n  }\r\n\r\n  // Keep in sync with memory layout in RenderBatch.cs\r\n  updatedComponents(): ArrayRange<RenderTreeDiff> {\r\n    return platform.readStructField<Pointer>(this.batchAddress, 0) as any as ArrayRange<RenderTreeDiff>;\r\n  }\r\n\r\n  referenceFrames(): ArrayRange<RenderTreeDiff> {\r\n    return platform.readStructField<Pointer>(this.batchAddress, arrayRangeReader.structLength) as any as ArrayRange<RenderTreeDiff>;\r\n  }\r\n\r\n  disposedComponentIds(): ArrayRange<number> {\r\n    return platform.readStructField<Pointer>(this.batchAddress, arrayRangeReader.structLength * 2) as any as ArrayRange<number>;\r\n  }\r\n\r\n  disposedEventHandlerIds(): ArrayRange<number> {\r\n    return platform.readStructField<Pointer>(this.batchAddress, arrayRangeReader.structLength * 3) as any as ArrayRange<number>;\r\n  }\r\n\r\n  updatedComponentsEntry(values: ArrayValues<RenderTreeDiff>, index: number): RenderTreeDiff {\r\n    return arrayValuesEntry(values, index, diffReader.structLength);\r\n  }\r\n\r\n  referenceFramesEntry(values: ArrayValues<RenderTreeFrame>, index: number): RenderTreeFrame {\r\n    return arrayValuesEntry(values, index, frameReader.structLength);\r\n  }\r\n\r\n  disposedComponentIdsEntry(values: ArrayValues<number>, index: number): number {\r\n    const pointer = arrayValuesEntry(values, index, /* int length */ 4);\r\n    return platform.readInt32Field(pointer as any as Pointer);\r\n  }\r\n\r\n  disposedEventHandlerIdsEntry(values: ArrayValues<number>, index: number): number {\r\n    const pointer = arrayValuesEntry(values, index, /* long length */ 8);\r\n    return platform.readUint64Field(pointer as any as Pointer);\r\n  }\r\n\r\n  arrayRangeReader = arrayRangeReader;\r\n\r\n  arrayBuilderSegmentReader = arrayBuilderSegmentReader;\r\n\r\n  diffReader = diffReader;\r\n\r\n  editReader = editReader;\r\n\r\n  frameReader = frameReader;\r\n}\r\n\r\n// Keep in sync with memory layout in ArrayRange.cs\r\nconst arrayRangeReader = {\r\n  structLength: 8,\r\n  values: <T>(arrayRange: ArrayRange<T>): ArrayValues<T> => platform.readObjectField<System_Array<T>>(arrayRange as any, 0) as any as ArrayValues<T>,\r\n  count: <T>(arrayRange: ArrayRange<T>): number => platform.readInt32Field(arrayRange as any, 4),\r\n};\r\n\r\n// Keep in sync with memory layout in ArrayBuilderSegment\r\nconst arrayBuilderSegmentReader = {\r\n  structLength: 12,\r\n  values: <T>(arrayBuilderSegment: ArrayBuilderSegment<T>): ArrayValues<T> => {\r\n    // Evaluate arrayBuilderSegment->_builder->_items, i.e., two dereferences needed\r\n    const builder = platform.readObjectField<System_Object>(arrayBuilderSegment as any, 0);\r\n    const builderFieldsAddress = platform.getObjectFieldsBaseAddress(builder);\r\n    return platform.readObjectField<System_Array<T>>(builderFieldsAddress, 0) as any as ArrayValues<T>;\r\n  },\r\n  offset: <T>(arrayBuilderSegment: ArrayBuilderSegment<T>): number => platform.readInt32Field(arrayBuilderSegment as any, 4),\r\n  count: <T>(arrayBuilderSegment: ArrayBuilderSegment<T>): number => platform.readInt32Field(arrayBuilderSegment as any, 8),\r\n};\r\n\r\n// Keep in sync with memory layout in RenderTreeDiff.cs\r\nconst diffReader = {\r\n  structLength: 4 + arrayBuilderSegmentReader.structLength,\r\n  componentId: (diff: RenderTreeDiff): number => platform.readInt32Field(diff as any, 0),\r\n  edits: (diff: RenderTreeDiff): ArrayBuilderSegment<RenderTreeEdit> => platform.readStructField<Pointer>(diff as any, 4) as any as ArrayBuilderSegment<RenderTreeEdit>,\r\n  editsEntry: (values: ArrayValues<RenderTreeEdit>, index: number): RenderTreeEdit => arrayValuesEntry(values, index, editReader.structLength),\r\n};\r\n\r\n// Keep in sync with memory layout in RenderTreeEdit.cs\r\nconst editReader = {\r\n  structLength: 20,\r\n  editType: (edit: RenderTreeEdit): EditType => platform.readInt32Field(edit as any, 0) as EditType,\r\n  siblingIndex: (edit: RenderTreeEdit): number => platform.readInt32Field(edit as any, 4),\r\n  newTreeIndex: (edit: RenderTreeEdit): number => platform.readInt32Field(edit as any, 8),\r\n  moveToSiblingIndex: (edit: RenderTreeEdit): number => platform.readInt32Field(edit as any, 8),\r\n  removedAttributeName: (edit: RenderTreeEdit): string | null => platform.readStringField(edit as any, 16),\r\n};\r\n\r\n// Keep in sync with memory layout in RenderTreeFrame.cs\r\nconst frameReader = {\r\n  structLength: 36,\r\n  frameType: (frame: RenderTreeFrame): FrameType => platform.readInt16Field(frame as any, 4) as FrameType,\r\n  subtreeLength: (frame: RenderTreeFrame): number => platform.readInt32Field(frame as any, 8),\r\n  elementReferenceCaptureId: (frame: RenderTreeFrame): string | null => platform.readStringField(frame as any, 16),\r\n  componentId: (frame: RenderTreeFrame): number => platform.readInt32Field(frame as any, 12),\r\n  elementName: (frame: RenderTreeFrame): string | null => platform.readStringField(frame as any, 16),\r\n  textContent: (frame: RenderTreeFrame): string | null => platform.readStringField(frame as any, 16),\r\n  markupContent: (frame: RenderTreeFrame): string => platform.readStringField(frame as any, 16)!,\r\n  attributeName: (frame: RenderTreeFrame): string | null => platform.readStringField(frame as any, 16),\r\n  attributeValue: (frame: RenderTreeFrame): string | null => platform.readStringField(frame as any, 24, true),\r\n  attributeEventHandlerId: (frame: RenderTreeFrame): number => platform.readUint64Field(frame as any, 8),\r\n};\r\n\r\nfunction arrayValuesEntry<T>(arrayValues: ArrayValues<T>, index: number, itemSize: number): T {\r\n  return platform.getArrayEntryPtr(arrayValues as any as System_Array<T>, index, itemSize) as any as T;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nexport function discoverComponents(root: Node, type: 'webassembly' | 'server' | 'auto'): ComponentDescriptor[] {\r\n  switch (type) {\r\n    case 'webassembly':\r\n      return discoverWebAssemblyComponents(root);\r\n    case 'server':\r\n      return discoverServerComponents(root);\r\n    case 'auto':\r\n      return discoverAutoComponents(root);\r\n  }\r\n}\r\n\r\nconst blazorServerStateCommentRegularExpression = /^\\s*Blazor-Server-Component-State:(?<state>[a-zA-Z0-9+/=]+)$/;\r\nconst blazorWebAssemblyStateCommentRegularExpression = /^\\s*Blazor-WebAssembly-Component-State:(?<state>[a-zA-Z0-9+/=]+)$/;\r\nconst blazorWebInitializerCommentRegularExpression = /^\\s*Blazor-Web-Initializers:(?<initializers>[a-zA-Z0-9+/=]+)$/;\r\n\r\nexport function discoverServerPersistedState(node: Node): string | null | undefined {\r\n  return discoverBlazorComment(node, blazorServerStateCommentRegularExpression);\r\n}\r\n\r\nexport function discoverWebAssemblyPersistedState(node: Node): string | null | undefined {\r\n  return discoverBlazorComment(node, blazorWebAssemblyStateCommentRegularExpression);\r\n}\r\n\r\nexport function discoverWebInitializers(node: Node): string | null | undefined {\r\n  return discoverBlazorComment(node, blazorWebInitializerCommentRegularExpression, 'initializers');\r\n}\r\n\r\nfunction discoverBlazorComment(node: Node, comment: RegExp, captureName = 'state'): string | null | undefined {\r\n  if (node.nodeType === Node.COMMENT_NODE) {\r\n    const content = node.textContent || '';\r\n    const parsedState = comment.exec(content);\r\n    const value = parsedState && parsedState.groups && parsedState.groups[captureName];\r\n    if (value){\r\n      node.parentNode?.removeChild(node);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  if (!node.hasChildNodes()) {\r\n    return;\r\n  }\r\n\r\n  const nodes = node.childNodes;\r\n  for (let index = 0; index < nodes.length; index++) {\r\n    const candidate = nodes[index];\r\n    const result = discoverBlazorComment(candidate, comment, captureName);\r\n    if (result){\r\n      return result;\r\n    }\r\n  }\r\n\r\n  return;\r\n}\r\n\r\nfunction discoverServerComponents(root: Node): ServerComponentDescriptor[] {\r\n  const componentComments = resolveComponentComments(root, 'server') as ServerComponentDescriptor[];\r\n  return componentComments.sort((a, b): number => a.sequence - b.sequence);\r\n}\r\n\r\nfunction discoverWebAssemblyComponents(node: Node): WebAssemblyComponentDescriptor[] {\r\n  const componentComments = resolveComponentComments(node, 'webassembly') as WebAssemblyComponentDescriptor[];\r\n  return componentComments;\r\n}\r\n\r\nfunction discoverAutoComponents(node: Node): AutoComponentDescriptor[] {\r\n  const componentComments = resolveComponentComments(node, 'auto') as AutoComponentDescriptor[];\r\n  return componentComments;\r\n}\r\n\r\nfunction resolveComponentComments(node: Node, type: 'webassembly' | 'server' | 'auto'): ComponentDescriptor[] {\r\n  const result: ComponentDescriptor[] = [];\r\n  const childNodeIterator = new ComponentCommentIterator(node.childNodes);\r\n  while (childNodeIterator.next() && childNodeIterator.currentElement) {\r\n    const componentComment = getComponentComment(childNodeIterator, type);\r\n    if (componentComment) {\r\n      result.push(componentComment);\r\n    } else if (childNodeIterator.currentElement.hasChildNodes()) {\r\n      const childResults = resolveComponentComments(childNodeIterator.currentElement, type);\r\n      for (let j = 0; j < childResults.length; j++) {\r\n        const childResult = childResults[j];\r\n        result.push(childResult);\r\n      }\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nconst blazorCommentRegularExpression = new RegExp(/^\\s*Blazor:[^{]*(?<descriptor>.*)$/);\r\n\r\nfunction getComponentComment(commentNodeIterator: ComponentCommentIterator, type: 'webassembly' | 'server' | 'auto'): ComponentDescriptor | undefined {\r\n  const candidateStart = commentNodeIterator.currentElement;\r\n\r\n  if (!candidateStart || candidateStart.nodeType !== Node.COMMENT_NODE) {\r\n    return;\r\n  }\r\n  if (candidateStart.textContent) {\r\n    const definition = blazorCommentRegularExpression.exec(candidateStart.textContent);\r\n    const json = definition && definition.groups && definition.groups['descriptor'];\r\n\r\n    if (json) {\r\n      assertNotDirectlyOnDocument(candidateStart);\r\n      try {\r\n        const componentComment = parseCommentPayload(json);\r\n\r\n        // Regardless of whether this comment matches the type we're looking for, we still need to move the iterator\r\n        // on to its end position since we don't want to recurse into unrelated prerendered components, nor do we want to get confused\r\n        // by the end marker.\r\n        const candidateEnd = getComponentEndComment(componentComment, candidateStart as Comment, commentNodeIterator);\r\n\r\n        if (type !== componentComment.type) {\r\n          return undefined;\r\n        }\r\n\r\n        switch (componentComment.type) {\r\n          case 'webassembly':\r\n            return createWebAssemblyComponentComment(componentComment, candidateStart as Comment, candidateEnd);\r\n          case 'server':\r\n            return createServerComponentComment(componentComment, candidateStart as Comment, candidateEnd);\r\n          case 'auto':\r\n            return createAutoComponentComment(componentComment, candidateStart as Comment, candidateEnd);\r\n        }\r\n      } catch (error) {\r\n        throw new Error(`Found malformed component comment at ${candidateStart.textContent}`);\r\n      }\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction parseCommentPayload(json: string): ServerComponentMarker | WebAssemblyComponentMarker | AutoComponentMarker {\r\n  const payload = JSON.parse(json);\r\n  const { type } = payload;\r\n  if (type !== 'server' && type !== 'webassembly' && type !== 'auto') {\r\n    throw new Error(`Invalid component type '${type}'.`);\r\n  }\r\n\r\n  return payload;\r\n}\r\n\r\nfunction assertNotDirectlyOnDocument(marker: Node) {\r\n  if (marker.parentNode instanceof Document) {\r\n    throw new Error('Root components cannot be marked as interactive. The <html> element must be rendered statically so that scripts are not evaluated multiple times.');\r\n  }\r\n}\r\n\r\nfunction getComponentEndComment(payload: ComponentMarker, start: Comment, iterator: ComponentCommentIterator): Comment | undefined {\r\n  const { prerenderId } = payload;\r\n  if (!prerenderId) {\r\n    return undefined;\r\n  }\r\n\r\n  while (iterator.next() && iterator.currentElement) {\r\n    const node = iterator.currentElement;\r\n    if (node.nodeType !== Node.COMMENT_NODE) {\r\n      continue;\r\n    }\r\n    if (!node.textContent) {\r\n      continue;\r\n    }\r\n\r\n    const definition = blazorCommentRegularExpression.exec(node.textContent);\r\n    const json = definition && definition[1];\r\n    if (!json) {\r\n      continue;\r\n    }\r\n\r\n    validateEndComponentPayload(json, prerenderId);\r\n\r\n    return node as Comment;\r\n  }\r\n\r\n  throw new Error(`Could not find an end component comment for '${start}'.`);\r\n}\r\n\r\nlet nextUniqueDescriptorId = 0;\r\n\r\nfunction createServerComponentComment(payload: ServerComponentMarker, start: Comment, end: Comment | undefined): ServerComponentDescriptor {\r\n  validateServerComponentPayload(payload);\r\n\r\n  return {\r\n    ...payload,\r\n    uniqueId: nextUniqueDescriptorId++,\r\n    start,\r\n    end,\r\n  };\r\n}\r\n\r\nfunction createWebAssemblyComponentComment(payload: WebAssemblyComponentMarker, start: Comment, end: Comment | undefined): WebAssemblyComponentDescriptor {\r\n  validateWebAssemblyComponentPayload(payload);\r\n\r\n  return {\r\n    ...payload,\r\n    uniqueId: nextUniqueDescriptorId++,\r\n    start,\r\n    end,\r\n  };\r\n}\r\n\r\nfunction createAutoComponentComment(payload: AutoComponentMarker, start: Comment, end: Comment | undefined): AutoComponentDescriptor {\r\n  validateServerComponentPayload(payload);\r\n  validateWebAssemblyComponentPayload(payload);\r\n\r\n  return {\r\n    ...payload,\r\n    uniqueId: nextUniqueDescriptorId++,\r\n    start,\r\n    end,\r\n  };\r\n}\r\n\r\nfunction validateServerComponentPayload(payload: ServerMarkerData) {\r\n  const { descriptor, sequence } = payload;\r\n\r\n  if (!descriptor) {\r\n    throw new Error('descriptor must be defined when using a descriptor.');\r\n  }\r\n\r\n  if (sequence === undefined) {\r\n    throw new Error('sequence must be defined when using a descriptor.');\r\n  }\r\n\r\n  if (!Number.isInteger(sequence)) {\r\n    throw new Error(`Error parsing the sequence '${sequence}' for component '${JSON.stringify(payload)}'`);\r\n  }\r\n}\r\n\r\nfunction validateWebAssemblyComponentPayload(payload: WebAssemblyMarkerData) {\r\n  const { assembly, typeName } = payload;\r\n\r\n  if (!assembly) {\r\n    throw new Error('assembly must be defined when using a descriptor.');\r\n  }\r\n\r\n  if (!typeName) {\r\n    throw new Error('typeName must be defined when using a descriptor.');\r\n  }\r\n\r\n  // Parameter definitions and values come Base64 encoded from the server, since they contain random data and can make the\r\n  // comment invalid. We could unencode them in .NET Code, but that would be slower to do and we can leverage the fact that\r\n  // JS provides a native function that will be much faster and that we are doing this work while we are fetching\r\n  // blazor.boot.json\r\n  payload.parameterDefinitions = payload.parameterDefinitions && atob(payload.parameterDefinitions);\r\n  payload.parameterValues = payload.parameterValues && atob(payload.parameterValues);\r\n}\r\n\r\nfunction validateEndComponentPayload(json: string, prerenderId: string): void {\r\n  const payload = JSON.parse(json) as ComponentEndMarker;\r\n  if (Object.keys(payload).length !== 1) {\r\n    throw new Error(`Invalid end of component comment: '${json}'`);\r\n  }\r\n  const prerenderEndId = payload.prerenderId;\r\n  if (!prerenderEndId) {\r\n    throw new Error(`End of component comment must have a value for the prerendered property: '${json}'`);\r\n  }\r\n  if (prerenderEndId !== prerenderId) {\r\n    throw new Error(`End of component comment prerendered property must match the start comment prerender id: '${prerenderId}', '${prerenderEndId}'`);\r\n  }\r\n}\r\n\r\nclass ComponentCommentIterator {\r\n  private childNodes: NodeListOf<ChildNode>;\r\n\r\n  private currentIndex: number;\r\n\r\n  private length: number;\r\n\r\n  public currentElement: ChildNode | undefined;\r\n\r\n  public constructor(childNodes: NodeListOf<ChildNode>) {\r\n    this.childNodes = childNodes;\r\n    this.currentIndex = -1;\r\n    this.length = childNodes.length;\r\n  }\r\n\r\n  public next(): boolean {\r\n    this.currentIndex++;\r\n    if (this.currentIndex < this.length) {\r\n      this.currentElement = this.childNodes[this.currentIndex];\r\n      return true;\r\n    } else {\r\n      this.currentElement = undefined;\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport function descriptorToMarker(descriptor: ComponentDescriptor): ComponentMarker {\r\n  return {\r\n    ...descriptor,\r\n\r\n    // We remove descriptor-specific information to produce a JSON-serializable marker\r\n    start: undefined,\r\n    end: undefined,\r\n  } as unknown as ComponentMarker;\r\n}\r\n\r\nfunction doKeysMatch(a: MarkerKey | undefined, b: MarkerKey | undefined) {\r\n  if (!a || !b) {\r\n    // Unspecified keys are never considered to be matching\r\n    return false;\r\n  }\r\n\r\n  return a.locationHash === b.locationHash && a.formattedComponentKey === b.formattedComponentKey;\r\n}\r\n\r\nexport function canMergeDescriptors(target: ComponentDescriptor, source: ComponentDescriptor): boolean {\r\n  return target.type === source.type && doKeysMatch(target.key, source.key);\r\n}\r\n\r\nexport function mergeDescriptors(target: ComponentDescriptor, source: ComponentDescriptor) {\r\n  if (!canMergeDescriptors(target, source)) {\r\n    throw new Error(`Cannot merge mismatching component descriptors:\\n${JSON.stringify(target)}\\nand\\n${JSON.stringify(source)}`);\r\n  }\r\n\r\n  target.uniqueId = source.uniqueId;\r\n\r\n  if (target.type === 'webassembly' || target.type === 'auto') {\r\n    const sourceWebAssemblyData = source as WebAssemblyMarkerData;\r\n    target.parameterDefinitions = sourceWebAssemblyData.parameterDefinitions;\r\n    target.parameterValues = sourceWebAssemblyData.parameterValues;\r\n  }\r\n\r\n  if (target.type === 'server' || target.type === 'auto') {\r\n    const sourceServerData = source as ServerMarkerData;\r\n    target.sequence = sourceServerData.sequence;\r\n    target.descriptor = sourceServerData.descriptor;\r\n  }\r\n}\r\n\r\nexport type ComponentDescriptor = ServerComponentDescriptor | WebAssemblyComponentDescriptor | AutoComponentDescriptor;\r\nexport type ComponentMarker = ServerComponentMarker | WebAssemblyComponentMarker | AutoComponentMarker;\r\n\r\nexport type ServerComponentDescriptor = ServerComponentMarker & DescriptorData;\r\nexport type WebAssemblyComponentDescriptor = WebAssemblyComponentMarker & DescriptorData;\r\nexport type AutoComponentDescriptor = AutoComponentMarker & DescriptorData;\r\n\r\ntype DescriptorData = {\r\n  uniqueId: number;\r\n  start: Comment;\r\n  end?: Comment;\r\n};\r\n\r\ntype ComponentEndMarker = {\r\n  prerenderId: string;\r\n}\r\n\r\ntype ServerComponentMarker = {\r\n  type: 'server';\r\n} & ServerMarkerData;\r\n\r\ntype WebAssemblyComponentMarker = {\r\n  type: 'webassembly';\r\n} & WebAssemblyMarkerData;\r\n\r\ntype AutoComponentMarker = {\r\n  type: 'auto';\r\n} & ServerMarkerData & WebAssemblyMarkerData;\r\n\r\ntype CommonMarkerData = {\r\n  type: string;\r\n  prerenderId?: string;\r\n  key?: MarkerKey;\r\n}\r\n\r\ntype MarkerKey = {\r\n  locationHash: string;\r\n  formattedComponentKey?: string;\r\n}\r\n\r\ntype ServerMarkerData = {\r\n  sequence: number;\r\n  descriptor: string;\r\n} & CommonMarkerData;\r\n\r\ntype WebAssemblyMarkerData = {\r\n  typeName: string;\r\n  assembly: string;\r\n  parameterDefinitions: string;\r\n  parameterValues: string;\r\n} & CommonMarkerData;\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n/* eslint-disable array-element-newline */\r\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\nimport { Blazor } from './GlobalExports';\r\nimport * as Environment from './Environment';\r\nimport { monoPlatform, dispatcher, getInitializer } from './Platform/Mono/MonoPlatform';\r\nimport { renderBatch, getRendererer, attachRootComponentToElement, attachRootComponentToLogicalElement } from './Rendering/Renderer';\r\nimport { SharedMemoryRenderBatch } from './Rendering/RenderBatch/SharedMemoryRenderBatch';\r\nimport { Pointer } from './Platform/Platform';\r\nimport { WebAssemblyStartOptions } from './Platform/WebAssemblyStartOptions';\r\nimport { addDispatchEventMiddleware } from './Rendering/WebRendererInteropMethods';\r\nimport { WebAssemblyComponentDescriptor, discoverWebAssemblyPersistedState } from './Services/ComponentDescriptorDiscovery';\r\nimport { receiveDotNetDataStream } from './StreamingInterop';\r\nimport { WebAssemblyComponentAttacher } from './Platform/WebAssemblyComponentAttacher';\r\nimport { MonoConfig } from '@microsoft/dotnet-runtime';\r\nimport { RootComponentManager } from './Services/RootComponentManager';\r\nimport { WebRendererId } from './Rendering/WebRendererId';\r\n\r\nlet options: Partial<WebAssemblyStartOptions> | undefined;\r\nlet platformLoadPromise: Promise<void> | undefined;\r\nlet loadedWebAssemblyPlatform = false;\r\nlet started = false;\r\nlet firstUpdate = true;\r\nlet waitForRootComponents = false;\r\nlet startPromise: Promise<void> | undefined;\r\n\r\nlet resolveBootConfigPromise: (value: MonoConfig) => void;\r\nconst bootConfigPromise = new Promise<MonoConfig>(resolve => {\r\n  resolveBootConfigPromise = resolve;\r\n});\r\n\r\nlet resolveInitialUpdatePromise: (value: string) => void;\r\nconst initialUpdatePromise = new Promise<string>(resolve => {\r\n  resolveInitialUpdatePromise = resolve;\r\n});\r\n\r\nexport function resolveInitialUpdate(value: string): void {\r\n  resolveInitialUpdatePromise(value);\r\n  firstUpdate = false;\r\n}\r\n\r\nlet resolveInitializersPromise: (value: void) => void;\r\nconst initializersPromise = new Promise<void>(resolve => {\r\n  resolveInitializersPromise = resolve;\r\n});\r\n\r\nexport function isFirstUpdate() {\r\n  return firstUpdate;\r\n}\r\n\r\nexport function setWaitForRootComponents(): void {\r\n  waitForRootComponents = true;\r\n}\r\n\r\nexport function setWebAssemblyOptions(initializersReady: Promise<Partial<WebAssemblyStartOptions>>) {\r\n  if (options) {\r\n    throw new Error('WebAssembly options have already been configured.');\r\n  }\r\n  setOptions(initializersReady);\r\n\r\n\r\n  async function setOptions(initializers: Promise<Partial<WebAssemblyStartOptions>>) {\r\n    const configuredOptions = await initializers;\r\n    options = configuredOptions;\r\n    resolveInitializersPromise();\r\n  }\r\n}\r\n\r\nexport function startWebAssembly(components: RootComponentManager<WebAssemblyComponentDescriptor>): Promise<void> {\r\n  if (startPromise !== undefined) {\r\n    throw new Error('Blazor WebAssembly has already started.');\r\n  }\r\n\r\n  startPromise = new Promise(startCore.bind(null, components));\r\n\r\n  return startPromise;\r\n}\r\n\r\nasync function startCore(components: RootComponentManager<WebAssemblyComponentDescriptor>, resolve, _) {\r\n  if (inAuthRedirectIframe()) {\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    await new Promise(() => { }); // See inAuthRedirectIframe for explanation\r\n  }\r\n\r\n  const platformLoadPromise = loadWebAssemblyPlatformIfNotStarted();\r\n\r\n  addDispatchEventMiddleware((browserRendererId, eventHandlerId, continuation) => {\r\n    // It's extremely unusual, but an event can be raised while we're in the middle of synchronously applying a\r\n    // renderbatch. For example, a renderbatch might mutate the DOM in such a way as to cause an <input> to lose\r\n    // focus, in turn triggering a 'change' event. It may also be possible to listen to other DOM mutation events\r\n    // that are themselves triggered by the application of a renderbatch.\r\n    const renderer = getRendererer(browserRendererId);\r\n    if (renderer?.eventDelegator.getHandler(eventHandlerId)) {\r\n      monoPlatform.invokeWhenHeapUnlocked(continuation);\r\n    }\r\n  });\r\n\r\n  Blazor._internal.applyHotReload = (id: string, metadataDelta: string, ilDelta: string, pdbDelta: string | undefined, updatedTypes?: number[]) => {\r\n    dispatcher.invokeDotNetStaticMethod('Microsoft.AspNetCore.Components.WebAssembly', 'ApplyHotReloadDelta', id, metadataDelta, ilDelta, pdbDelta, updatedTypes ?? null);\r\n  };\r\n\r\n  Blazor._internal.getApplyUpdateCapabilities = () => dispatcher.invokeDotNetStaticMethod('Microsoft.AspNetCore.Components.WebAssembly', 'GetApplyUpdateCapabilities');\r\n\r\n  // Configure JS interop\r\n  Blazor._internal.invokeJSJson = invokeJSJson;\r\n  Blazor._internal.endInvokeDotNetFromJS = endInvokeDotNetFromJS;\r\n  Blazor._internal.receiveWebAssemblyDotNetDataStream = receiveWebAssemblyDotNetDataStream;\r\n  Blazor._internal.receiveByteArray = receiveByteArray;\r\n\r\n  // Configure environment for execution under Mono WebAssembly with shared-memory rendering\r\n  const platform = Environment.setPlatform(monoPlatform);\r\n  Blazor.platform = platform;\r\n  Blazor._internal.renderBatch = (browserRendererId: number, batchAddress: Pointer) => {\r\n    // We're going to read directly from the .NET memory heap, so indicate to the platform\r\n    // that we don't want anything to modify the memory contents during this time. Currently this\r\n    // is only guaranteed by the fact that .NET code doesn't run during this time, but in the\r\n    // future (when multithreading is implemented) we might need the .NET runtime to understand\r\n    // that GC compaction isn't allowed during this critical section.\r\n    const heapLock = monoPlatform.beginHeapLock();\r\n    try {\r\n      renderBatch(browserRendererId, new SharedMemoryRenderBatch(batchAddress));\r\n    } finally {\r\n      heapLock.release();\r\n    }\r\n  };\r\n\r\n  Blazor._internal.navigationManager.listenForNavigationEvents(WebRendererId.WebAssembly, async (uri: string, state: string | undefined, intercepted: boolean): Promise<void> => {\r\n    await dispatcher.invokeDotNetStaticMethodAsync(\r\n      'Microsoft.AspNetCore.Components.WebAssembly',\r\n      'NotifyLocationChanged',\r\n      uri,\r\n      state,\r\n      intercepted\r\n    );\r\n  }, async (callId: number, uri: string, state: string | undefined, intercepted: boolean): Promise<void> => {\r\n    const shouldContinueNavigation = await dispatcher.invokeDotNetStaticMethodAsync<boolean>(\r\n      'Microsoft.AspNetCore.Components.WebAssembly',\r\n      'NotifyLocationChangingAsync',\r\n      uri,\r\n      state,\r\n      intercepted\r\n    );\r\n\r\n    Blazor._internal.navigationManager.endLocationChanging(callId, shouldContinueNavigation);\r\n  });\r\n\r\n  // Leverage the time while we are loading boot.config.json from the network to discover any potentially registered component on\r\n  // the document.\r\n  const componentAttacher = new WebAssemblyComponentAttacher(components);\r\n  Blazor._internal.registeredComponents = {\r\n    getRegisteredComponentsCount: () => componentAttacher.getCount(),\r\n    getAssembly: (id) => componentAttacher.getAssembly(id),\r\n    getTypeName: (id) => componentAttacher.getTypeName(id),\r\n    getParameterDefinitions: (id) => componentAttacher.getParameterDefinitions(id) || '',\r\n    getParameterValues: (id) => componentAttacher.getParameterValues(id) || '',\r\n  };\r\n\r\n  Blazor._internal.getPersistedState = () => discoverWebAssemblyPersistedState(document) || '';\r\n\r\n  Blazor._internal.getInitialComponentsUpdate = () => initialUpdatePromise;\r\n\r\n  Blazor._internal.updateRootComponents = (operations: string) =>\r\n    Blazor._internal.dotNetExports?.UpdateRootComponentsCore(operations);\r\n\r\n  Blazor._internal.endUpdateRootComponents = (batchId: number) =>\r\n    components.onAfterUpdateRootComponents?.(batchId);\r\n\r\n  Blazor._internal.attachRootComponentToElement = (selector, componentId, rendererId) => {\r\n    const element = componentAttacher.resolveRegisteredElement(selector);\r\n    if (!element) {\r\n      attachRootComponentToElement(selector, componentId, rendererId);\r\n    } else {\r\n      attachRootComponentToLogicalElement(rendererId, element, componentId, false);\r\n    }\r\n  };\r\n\r\n  try {\r\n    await platformLoadPromise;\r\n    await platform.start();\r\n  } catch (ex) {\r\n    throw new Error(`Failed to start platform. Reason: ${ex}`);\r\n  }\r\n\r\n  // Start up the application\r\n  platform.callEntryPoint();\r\n  // At this point .NET has been initialized (and has yielded), we can't await the promise because it will\r\n  // only end when the app finishes running\r\n  const initializer = getInitializer();\r\n  initializer.invokeAfterStartedCallbacks(Blazor);\r\n  started = true;\r\n  resolve();\r\n}\r\n\r\nexport function hasStartedWebAssembly(): boolean {\r\n  return startPromise !== undefined;\r\n}\r\n\r\nexport function waitForBootConfigLoaded(): Promise<MonoConfig> {\r\n  return bootConfigPromise;\r\n}\r\n\r\nexport function loadWebAssemblyPlatformIfNotStarted(): Promise<void> {\r\n  platformLoadPromise ??= (async () => {\r\n    await initializersPromise;\r\n    const finalOptions = options ?? {};\r\n    const existingConfig = options?.configureRuntime;\r\n    finalOptions.configureRuntime = (config) => {\r\n      existingConfig?.(config);\r\n      if (waitForRootComponents) {\r\n        config.withEnvironmentVariable('__BLAZOR_WEBASSEMBLY_WAIT_FOR_ROOT_COMPONENTS', 'true');\r\n      }\r\n    };\r\n    await monoPlatform.load(finalOptions, resolveBootConfigPromise);\r\n    loadedWebAssemblyPlatform = true;\r\n  })();\r\n  return platformLoadPromise;\r\n}\r\n\r\nexport function hasStartedLoadingWebAssemblyPlatform(): boolean {\r\n  return platformLoadPromise !== undefined;\r\n}\r\n\r\nexport function hasLoadedWebAssemblyPlatform(): boolean {\r\n  return loadedWebAssemblyPlatform;\r\n}\r\n\r\nexport function updateWebAssemblyRootComponents(operations: string): void {\r\n  if (!startPromise) {\r\n    throw new Error('Blazor WebAssembly has not started.');\r\n  }\r\n\r\n  if (!Blazor._internal.updateRootComponents) {\r\n    throw new Error('Blazor WebAssembly has not initialized.');\r\n  }\r\n\r\n  if (!started) {\r\n    scheduleAfterStarted(operations);\r\n  } else {\r\n    Blazor._internal.updateRootComponents(operations);\r\n  }\r\n}\r\n\r\nasync function scheduleAfterStarted(operations: string): Promise<void> {\r\n  await startPromise;\r\n\r\n  if (!Blazor._internal.updateRootComponents) {\r\n    throw new Error('Blazor WebAssembly has not initialized.');\r\n  }\r\n\r\n  Blazor._internal.updateRootComponents(operations);\r\n}\r\n\r\nfunction invokeJSJson(identifier: string, targetInstanceId: number, resultType: number, argsJson: string, asyncHandle: number): string | null {\r\n  if (asyncHandle !== 0) {\r\n    dispatcher.beginInvokeJSFromDotNet(asyncHandle, identifier, argsJson, resultType, targetInstanceId);\r\n    return null;\r\n  } else {\r\n    return dispatcher.invokeJSFromDotNet(identifier, argsJson, resultType, targetInstanceId);\r\n  }\r\n}\r\n\r\nfunction endInvokeDotNetFromJS(callId: string, success: boolean, resultJsonOrErrorMessage: string): void {\r\n  dispatcher.endInvokeDotNetFromJS(callId, success, resultJsonOrErrorMessage);\r\n}\r\n\r\nfunction receiveWebAssemblyDotNetDataStream(streamId: number, data: Uint8Array, bytesRead: number, errorMessage: string): void {\r\n  receiveDotNetDataStream(dispatcher, streamId, data, bytesRead, errorMessage);\r\n}\r\n\r\nfunction receiveByteArray(id: number, data: Uint8Array): void {\r\n  dispatcher.receiveByteArray(id, data);\r\n}\r\n\r\nfunction inAuthRedirectIframe(): boolean {\r\n  // We don't want the .NET runtime to start up a second time inside the AuthenticationService.ts iframe. It uses resources\r\n  // unnecessarily and can lead to errors (#37355), plus the behavior is not well defined as the frame will be terminated shortly.\r\n  // So, if we're in that situation, block the startup process indefinitely so that anything chained to Blazor.start never happens.\r\n  // The detection logic here is based on the equivalent check in AuthenticationService.ts.\r\n  // TODO: Later we want AuthenticationService.ts to become responsible for doing this via a JS initializer. Doing it here is a\r\n  //       tactical fix for .NET 6 so we don't have to change how authentication is initialized.\r\n  if (window.parent !== window && !window.opener && window.frameElement) {\r\n    const settingsJson = window.sessionStorage && window.sessionStorage['Microsoft.AspNetCore.Components.WebAssembly.Authentication.CachedAuthSettings'];\r\n    const settings = settingsJson && JSON.parse(settingsJson);\r\n    return settings && settings.redirect_uri && location.href.startsWith(settings.redirect_uri);\r\n  }\r\n\r\n  return false;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { LogicalElement, toLogicalRootCommentElement } from '../Rendering/LogicalElements';\r\nimport { WebAssemblyComponentDescriptor } from '../Services/ComponentDescriptorDiscovery';\r\nimport { RootComponentManager } from '../Services/RootComponentManager';\r\n\r\nexport class WebAssemblyComponentAttacher {\r\n  private componentManager: RootComponentManager<WebAssemblyComponentDescriptor>;\r\n\r\n  public constructor(componentManager: RootComponentManager<WebAssemblyComponentDescriptor>) {\r\n    this.componentManager = componentManager;\r\n  }\r\n\r\n  public resolveRegisteredElement(id: string): LogicalElement | undefined {\r\n    const parsedId = Number.parseInt(id);\r\n    if (!Number.isNaN(parsedId)) {\r\n      const component = this.componentManager.resolveRootComponent(parsedId);\r\n      return toLogicalRootCommentElement(component);\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  public getParameterValues(id: number): string | undefined {\r\n    return this.componentManager.initialComponents[id].parameterValues;\r\n  }\r\n\r\n  public getParameterDefinitions(id: number): string | undefined {\r\n    return this.componentManager.initialComponents[id].parameterDefinitions;\r\n  }\r\n\r\n  public getTypeName(id: number): string {\r\n    return this.componentManager.initialComponents[id].typeName;\r\n  }\r\n\r\n  public getAssembly(id: number): string {\r\n    return this.componentManager.initialComponents[id].assembly;\r\n  }\r\n\r\n  public getCount(): number {\r\n    return this.componentManager.initialComponents.length;\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ComponentDescriptor } from './ComponentDescriptorDiscovery';\r\nimport { RootComponentManager } from './RootComponentManager';\r\n\r\nexport class InitialRootComponentsList<ComponentDescriptorType extends ComponentDescriptor> implements RootComponentManager<ComponentDescriptorType> {\r\n  constructor(public readonly initialComponents: ComponentDescriptorType[]) {\r\n  }\r\n\r\n  resolveRootComponent(ssrComponentId: number): ComponentDescriptor {\r\n    return this.initialComponents[ssrComponentId];\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IBlazor } from '../GlobalExports';\r\n\r\n// The base Blazor event type.\r\n// Properties listed here get assigned by the event registry in 'dispatchEvent'.\r\ninterface BlazorEvent {\r\n  type: keyof BlazorEventMap;\r\n}\r\n\r\n// Maps Blazor event names to the argument type passed to registered listeners.\r\nexport interface BlazorEventMap {\r\n  'enhancedload': BlazorEvent,\r\n  'enhancednavigationstart': BlazorEvent,\r\n  'enhancednavigationend': BlazorEvent,\r\n}\r\n\r\nexport class JSEventRegistry {\r\n  private readonly _eventListeners = new Map<string, Set<(ev: any) => void>>();\r\n\r\n  static create(blazor: IBlazor): JSEventRegistry {\r\n    const result = new JSEventRegistry();\r\n    blazor.addEventListener = result.addEventListener.bind(result);\r\n    blazor.removeEventListener = result.removeEventListener.bind(result);\r\n    return result;\r\n  }\r\n\r\n  public addEventListener<K extends keyof BlazorEventMap>(type: K, listener: (ev: BlazorEventMap[K]) => void): void {\r\n    let listenersForEventType = this._eventListeners.get(type);\r\n    if (!listenersForEventType) {\r\n      listenersForEventType = new Set();\r\n      this._eventListeners.set(type, listenersForEventType);\r\n    }\r\n\r\n    listenersForEventType.add(listener);\r\n  }\r\n\r\n  public removeEventListener<K extends keyof BlazorEventMap>(type: K, listener: (ev: BlazorEventMap[K]) => void): void {\r\n    this._eventListeners.get(type)?.delete(listener);\r\n  }\r\n\r\n  public dispatchEvent<K extends keyof BlazorEventMap>(type: K, ev: Omit<BlazorEventMap[K], keyof BlazorEvent>): void {\r\n    const listenersForEventType = this._eventListeners.get(type);\r\n    if (!listenersForEventType) {\r\n      return;\r\n    }\r\n\r\n    const event = {\r\n      ...ev,\r\n      type,\r\n    };\r\n\r\n    for (const listener of listenersForEventType) {\r\n      listener(event);\r\n    }\r\n  }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n/* eslint-disable array-element-newline */\r\nimport { Blazor } from './GlobalExports';\r\nimport { shouldAutoStart } from './BootCommon';\r\nimport { WebAssemblyStartOptions } from './Platform/WebAssemblyStartOptions';\r\nimport { setWebAssemblyOptions, startWebAssembly } from './Boot.WebAssembly.Common';\r\nimport { WebAssemblyComponentDescriptor, discoverComponents } from './Services/ComponentDescriptorDiscovery';\r\nimport { DotNet } from '@microsoft/dotnet-js-interop';\r\nimport { InitialRootComponentsList } from './Services/InitialRootComponentsList';\r\nimport { JSEventRegistry } from './Services/JSEventRegistry';\r\nimport { printErr } from './Platform/Mono/MonoPlatform';\r\n\r\nlet started = false;\r\n\r\nasync function boot(options?: Partial<WebAssemblyStartOptions>): Promise<void> {\r\n  if (started) {\r\n    throw new Error('Blazor has already started.');\r\n  }\r\n  started = true;\r\n\r\n  setWebAssemblyOptions(Promise.resolve(options || {}));\r\n\r\n  JSEventRegistry.create(Blazor);\r\n  const webAssemblyComponents = discoverComponents(document, 'webassembly') as WebAssemblyComponentDescriptor[];\r\n  const components = new InitialRootComponentsList(webAssemblyComponents);\r\n  await startWebAssembly(components);\r\n}\r\n\r\nBlazor.start = boot;\r\nwindow['DotNet'] = DotNet;\r\n\r\nif (shouldAutoStart()) {\r\n  boot().catch(printErr);\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Tells you if the script was added without <script src=\"...\" autostart=\"false\"></script>\r\nexport function shouldAutoStart(): boolean {\r\n  return !!(document &&\r\n    document.currentScript &&\r\n    document.currentScript.getAttribute('autostart') !== 'false');\r\n}\r\n"],"names":["DotNet","platform","EditType","FrameType","jsonRevivers","jsObjectIdKey","dotNetObjectRefKey","byteArrayRefKey","dotNetStreamRefKey","jsStreamReferenceLengthKey","defaultCallDispatcher","currentCallDispatcher","JSObject","constructor","_jsObject","this","_cachedFunctions","Map","findFunction","identifier","cachedFunction","get","lastSegmentValue","result","split","forEach","segment","Error","Function","bind","set","getWrappedObject","windowJSObjectId","cachedJSObjectsById","window","url","startsWith","URL","substring","document","baseURI","toString","import","JSCallResultType","nextJsObjectId","attachReviver","reviver","push","createJSObjectReference","jsObject","createJSStreamReference","streamReference","length","ArrayBuffer","Uint8Array","Blob","size","buffer","undefined","byteLength","jsObjectReference","error","parseJsonWithRevivers","callDispatcher","json","JSON","parse","key","initialValue","reduce","latestValue","getDefaultCallDispatcher","attachDispatcher","dotNetCallDispatcher","CallDispatcher","invokeMethod","assemblyName","methodIdentifier","args","invokeDotNetStaticMethod","invokeMethodAsync","invokeDotNetStaticMethodAsync","disposeJSObjectReference","id","disposeJSObjectReferenceById","_dotNetCallDispatcher","_byteArraysToBeRevived","_pendingDotNetToJSStreams","_pendingAsyncCalls","_nextAsyncCallId","getDotNetCallDispatcher","invokeJSFromDotNet","argsJson","resultType","targetInstanceId","createJSCallResult","findJSFunction","jsFunction","stringifyArgs","beginInvokeJSFromDotNet","asyncHandle","promise","Promise","resolve","then","endInvokeJSFromDotNet","stringify","formatError","endInvokeDotNetFromJS","asyncCallId","success","resultJsonOrExceptionMessage","resultOrError","completePendingCall","parseInt","invokeDotNetMethod","invokeDotNetMethodAsync","dotNetObjectId","invokeDotNetFromJS","resultJson","resultPromise","reject","beginInvokeDotNetFromJS","ex","receiveByteArray","data","processByteArray","delete","supplyDotNetStream","streamId","stream","has","pendingStream","PendingStream","getDotNetStreamPromise","streamPromise","hasOwnProperty","asyncCall","message","stack","targetInstance","DotNetObject","_id","_callDispatcher","dispose","catch","console","serializeAsArg","value","index","byteArray","DotNetStream","_streamPromise","arrayBuffer","Response","returnValue","Default","JSObjectReference","JSStreamReference","JSVoidResult","nextByteArrayIndex","argReplacer","sendByteArray","jsonValue","EventFieldInfo","componentId","fieldValue","fromEvent","event","elem","target","Element","fieldData","HTMLInputElement","type","toLowerCase","checked","HTMLSelectElement","HTMLTextAreaElement","getFormFieldData","eventTypeRegistry","browserEventNamesToAliases","eventNameAliasRegisteredCallbacks","getEventTypeOptions","eventName","getBrowserEventName","possibleAliasEventName","eventOptions","browserEventName","registerBuiltInEventType","eventNames","options","parseTouch","touchList","touches","i","touch","clientX","clientY","screenX","screenY","pageX","pageY","parseMouseEvent","detail","offsetX","offsetY","movementX","movementY","button","buttons","ctrlKey","shiftKey","altKey","metaKey","createEventArgs","element","timeBasedInputs","indexOf","getAttribute","isTimeBasedInput","normalizedValue","normalizeTimeBasedValue","isMultipleSelectInput","selectElement","Array","from","filter","option","selected","map","targetIsCheckbox","tagName","isCheckbox","e","parseDragEvent","dataTransfer","dropEffect","effectAllowed","files","f","name","items","kind","types","parseKeyboardEvent","code","location","repeat","isComposing","parseErrorEvent","filename","lineno","colno","parseProgressEvent","lengthComputable","loaded","total","parseTouchEvent","targetTouches","changedTouches","parsePointerEvent","pointerId","width","height","pressure","tiltX","tiltY","pointerType","isPrimary","parseWheelEvent","deltaX","deltaY","deltaZ","deltaMode","pendingRootComponentContainers","manager","jsComponentParametersByIdentifier","nextPendingDynamicRootComponentIdentifier","RootComponentsFunctions","add","toElement","componentIdentifier","initialParameters","containerIdentifier","getRequiredManager","component","DynamicRootComponent","setParameters","EventCallbackWrapper","invoke","arg","_callback","setCallback","callback","_selfJSObjectReference","getJSObjectReference","parameters","_jsEventCallbackWrappers","_componentId","parameter","mappedParameters","entries","Object","parameterCount","callbackWrapper","jsEventCallbackWrapper","values","interopMethodsByRenderer","rendererAttachedListeners","rendererByIdResolverMap","dispatchEvent","browserRendererId","eventDescriptor","eventArgs","dispatchEventMiddleware","eventHandlerId","getInteropMethods","rendererId","interopMethods","continuation","nonBubblingEvents","toLookup","alwaysPreventDefaultEvents","submit","disableableEventNames","EventDelegator","afterClickCallbacks","eventDelegatorId","nextEventDelegatorId","eventsCollectionKey","eventInfoStore","EventInfoStore","onGlobalEvent","setListener","renderingComponentId","infoForElement","getEventHandlerInfosForElement","existingHandler","getHandler","update","newInfo","setHandler","removeListener","info","remove","elementEventInfos","removeHandler","notifyAfterClick","addGlobalListener","setStopPropagation","stopPropagation","setPreventDefault","preventDefault","evt","dispatchGlobalEventToAllElements","eventNameAliases","alias","browserEvent","path","composedPath","candidateEventTarget","shift","eventArgsIsPopulated","eventIsNonBubbling","prototype","call","stopPropagationWasRequested","candidateElement","handlerInfos","handlerInfo","rawBrowserEventName","HTMLButtonElement","disabled","eventOptionsIfRegistered","eventFieldInfo","createIfNeeded","EventHandlerInfosForElement","globalListener","infosByEventHandlerId","countByEventName","handleEventNameAliasAdded","useCapture","addEventListener","oldEventHandlerId","newEventHandlerId","removeEventListener","aliasEventName","countByAliasEventName","handlers","preventDefaultFlags","stopPropagationFlags","handler","setValue","logicalChildrenPropname","Symbol","logicalParentPropname","logicalRootDescriptorPropname","toLogicalElement","allowExistingContents","childrenArray","childNodes","child","childLogicalElement","emptyLogicalElement","getLogicalChildrenArray","removeLogicalChild","createAndInsertLogicalContainer","parent","childIndex","containerElement","createComment","insertLogicalChild","childAsLogicalElement","nodeToInsert","Comment","existingGranchildren","lastNodeToInsert","findLastDomNodeInRange","range","Range","setStartBefore","setEndAfter","extractContents","existingLogicalParent","getLogicalParent","existingSiblingArray","existingChildIndex","splice","newSiblings","nextSibling","parentNode","insertBefore","appendDomNode","childToRemove","grandchildrenArray","domNodeToRemove","removeChild","getLogicalChild","isSvgElement","closestElement","getClosestDomElement","namespaceURI","getLogicalNextSibling","siblings","permuteLogicalChildren","permutationList","listEntry","moveRangeStart","fromSiblingIndex","moveRangeEnd","marker","moveToBeforeMarker","insertBeforeNode","toSiblingIndex","parentDomNode","elementToMove","moveEndNode","nextToMove","nextNext","logicalElement","DocumentFragment","appendChild","parentLogicalNextSibling","previousSibling","logicalParent","lastChild","getCaptureIdAttributeName","referenceCaptureId","elementRefKey","selector","querySelector","getElementByCaptureId","deferredValuePropname","isMultipleSelectElement","setSingleSelectElementValue","setDeferredElementValue","setMultipleSelectElementValue","trySetSelectValueFromOptionElement","optionElement","selectElem","parentElement","findClosestAncestorSelectElement","isBlazorSelectElement","_blazorDeferredValue","sharedTemplateElemForParsing","createElement","sharedSvgElemForParsing","createElementNS","elementsToClearOnRootComponentRender","Set","interactiveRootComponentPropname","preserveContentOnDisposalPropname","BrowserRenderer","rootComponentIds","childComponentLocations","eventDelegator","hasInteractiveRouter","eventHasSpecialKey","defaultPrevented","anchorTarget","candidate","HTMLAnchorElement","SVGAElement","findAnchorTarget","targetAttributeValue","hasAttribute","canProcessAnchor","absoluteHref","toAbsoluteUri","isWithinBaseUriSpace","performInternalNavigation","handleClickForNavigationInterception","getRootComponentCount","attachRootComponentToLogicalElement","appendContent","isInteractiveRootComponentElement","markAsInteractiveRootComponentElement","attachComponentToElement","updateComponent","batch","edits","referenceFrames","textContent","ownerDocument","_a","getRootNode","activeElementBefore","activeElement","applyEdits","HTMLElement","focus","disposeComponent","disposeEventHandler","currentDepth","childIndexAtCurrentDepth","arrayBuilderSegmentReader","editReader","frameReader","editsValues","editsOffset","offset","maxEditIndexExcl","count","editIndex","edit","diffReader","editsEntry","editType","prependFrame","frameIndex","newTreeIndex","frame","referenceFramesEntry","siblingIndex","insertFrame","removeFrame","setAttribute","applyAttribute","removeAttribute","attributeName","removedAttributeName","setOrRemoveAttributeOrProperty","updateText","textNode","Text","updateMarkup","insertMarkup","stepIn","stepOut","permutationListEntry","moveToSiblingIndex","permutationListEnd","frames","frameType","insertElement","text","insertText","attribute","insertComponent","region","insertFrameRange","subtreeLength","elementReferenceCapture","elementReferenceCaptureId","markup","namedEvent","elementName","newDomElementRaw","newElement","inserted","descendantsEndIndexExcl","descendantIndex","descendantFrame","HTMLOptionElement","childComponentId","textFrame","createTextNode","markupFrame","markupContainer","parsedMarkup","markupContent","innerHTML","content","querySelectorAll","oldScriptElem","newScriptElem","getAttributeNames","attribName","replaceChild","logicalSiblingIndex","firstChild","toDomElement","attributeFrame","attributeEventHandlerId","stripOnPrefix","attributeValue","startIndex","endIndexExcl","origChildIndex","countDescendantFrames","valueOrNullToRemove","endsWith","normalizeInputValue","tryApplyValueProperty","tryApplyCheckedProperty","tryApplySpecialProperty","applyInternalAttribute","internalAttributeNamePrefix","internalAttributeName","eventStopPropagationAttributeNamePrefix","eventPreventDefaultAttributeNamePrefix","isInteractive","browserRenderers","interactiveRouterRendererId","testAnchor","shouldResetScrollAfterNextBatch","browserRenderer","href","baseUriWithoutTrailingSlash","baseUri","lastIndexOf","nextChar","charAt","scrollToElement","getElementById","scrollIntoView","relativeUri","getInteractiveRouterRendererId","hasRegisteredNavigationEventListeners","currentHistoryIndex","currentLocationChangingCallId","navigationCallbacks","popStateCallback","async","state","ignorePendingNavigation","callbacks","getInteractiveRouterNavigationCallbacks","hasLocationChangingEventListeners","_b","_index","userState","_c","delta","uri","navigateHistoryWithoutPopStateCallback","notifyLocationChanging","notifyLocationChanged","resolveCurrentNavigation","internalFunctions","listenForNavigationEvents","locationChangedCallback","locationChangingCallback","locationChanged","locationChanging","onPopState","history","enableNavigationInterception","setHasLocationChangingListeners","hasListeners","endLocationChanging","callId","shouldContinueNavigation","navigateTo","navigateToCore","refresh","forceReload","reload","getBaseURI","getLocationHref","skipLocationChangingCallback","absoluteUri","forceLoad","shouldUseClientSideRouting","replaceHistoryEntry","historyEntryState","performProgrammaticEnhancedNavigation","replace","temporaryUri","replaceState","performExternalNavigation","absoluteInternalHref","interceptedLink","hash","origin","pathname","search","isSamePageWithHash","saveToBrowserHistory","hashIndex","performScrollToElementOnTheSamePage","pushState","oldPopStateCallback","go","intercepted","internalDestinationHref","all","domFunctions","preventScroll","SVGElement","focusBySelector","tabIndex","Virtualize","dotNetHelper","spacerBefore","spacerAfter","rootMargin","scrollContainer","findClosestScrollContainer","documentElement","style","overflowAnchor","rangeBetweenSpacers","createRange","isValidTableElement","display","intersectionObserver","IntersectionObserver","entry","isIntersecting","setStartAfter","setEndBefore","spacerSeparation","getBoundingClientRect","containerSize","rootBounds","intersectionRect","top","boundingClientRect","offsetHeight","bottom","root","observe","mutationObserverBefore","createSpacerMutationObserver","mutationObserverAfter","observersByDotNetObjectId","getObserversMapEntry","spacer","observerOptions","attributes","mutationObserver","MutationObserver","mutations","observer","disconnect","unobserve","HTMLTableElement","HTMLTableSectionElement","observers","dispatcherObserversByDotNetIdPropname","body","getComputedStyle","overflowY","dotNetHelperDispatcher","dotNetHelperId","PageTitle","getAndRemoveExistingTitle","titleElements","head","getElementsByTagName","existingTitle","currentTitleElement","InputFile","init","_blazorInputFileNextFileId","_blazorFilesById","fileList","file","lastModified","Date","toISOString","contentType","readPromise","blob","toImageFile","fileId","format","maxWidth","maxHeight","originalFile","getFileById","loadedImage","originalFileImage","Image","onload","revokeObjectURL","src","onerror","createObjectURL","resizedImageBlob","desiredWidthRatio","Math","min","desiredHeightRatio","chosenSizeRatio","canvas","round","getContext","drawImage","toBlob","readFileData","registeredLocks","NavigationLock","enableNavigationPrompt","onBeforeUnload","disableNavigationPrompt","transmittingDotNetToJSStreams","Blazor","forceLoadOrOptions","replaceIfUsingOldOverload","registerCustomEventType","aliasGroup","rootComponents","runtime","_internal","navigationManager","navigationManagerInternalFunctions","domWrapper","getJSDataStreamChunk","position","nextChunkSize","chunkBlob","slice","getChunkFromBlob","byteOffset","getChunkFromArrayBufferView","attachWebRendererInterop","jsComponentParameters","jsComponentInitializers","keys","managerInstance","initializerIdentifier","componentIdentifiers","initializerFunc","enableJSRootComponents","listener","invokeRendererAttachedListeners","navigatorUA","navigator","brands","userAgentData","currentBrowserIsChromeOrEdge","some","b","brand","chrome","hasDebuggingEnabled","config","debugLevel","userAgent","includes","hasFailed","showErrorNotification","errorUi","onclick","dismiss","WebRendererId","LogLevel","JSInitializer","singleRuntime","logger","afterstartedCallbacks","webRendererId","afterStartedCallbacks","importInitializersAsync","initializerFiles","initializerArguments","jsInitializer","adjustedPath","base","adjustPath","initializer","beforeStart","afterStarted","beforeWebAssemblyStart","afterWebAssemblyStarted","beforeServerStart","afterServerStarted","finalBeforeStart","Server","WebAssembly","finalAfterStarted","runClassicInitializers","initializerModule","beforeWebStart","afterWebStarted","hasOnlyClassicInitializers","runLegacyInitializers","enableClassicInitializers","log","Warning","initializers","ensureInitializers","webAssembly","circuit","runMultiRuntimeInitializers","importAndInvokeInitializer","invokeAfterStartedCallbacks","blazor","attached","getRendererAttachedPromise","dispatcher","MONO_INTERNAL","currentHeapLock","monoPlatform","load","onConfigLoaded","dotnet","startOptions","validate","loadBootResource","resourceType","customSrc","absoluteSrc","importDotnetJs","moduleConfig","onConfigLoadedCallback","maxParallelDownloads","enableDownloadRetry","applicationEnvironment","environment","dotnetModuleConfig","loadedConfig","environmentVariables","globalizationMode","getApplicationEnvironment","resources","extensions","fetchAndInvokeInitializers","onDownloadResourceProgress","setProgress","out","print","err","printErr","prepareRuntimeConfig","applicationCulture","withApplicationCulture","withApplicationEnvironment","withResourceLoader","withModuleConfig","configureRuntime","create","createRuntimeInstance","start","setModuleImports","INTERNAL","mono_internal","getConfig","invokeLibraryInitializers","altKeyName","match","response","fetch","encodeURIComponent","status","warn","launchFirefoxDebugger","link","rel","click","launchDebugger","attachDebuggerHotkey","dotNetCriticalError","exports","getAssemblyExports","assign","dotNetExports","Microsoft","AspNetCore","Components","Services","DefaultWebAssemblyJSRuntime","assertHeapIsNotLocked","assemblyNameOrDotNetObjectId","BeginInvokeDotNet","succeeded","serializedArgs","EndInvokeJS","ReceiveByteArrayFromJS","InvokeDotNet","configureRuntimeInstance","callEntryPoint","runMain","mainAssemblyName","getArrayEntryPtr","array","itemSize","address","getArrayDataPointer","getObjectFieldsBaseAddress","referenceTypedObject","readInt16Field","baseAddress","fieldOffset","getHeapI16","readInt32Field","getHeapI32","readUint64Field","getHeapU52","readObjectField","getHeapU32","readStringField","readBoolValueAsString","unboxedValue","monoObjectAsBoolOrNullUnsafe","monoStringToStringUnsafe","readStructField","beginHeapLock","MonoHeapLock","invokeWhenHeapUnlocked","enqueuePostReleaseAction","resourcesLoaded","totalResources","percentage","setProperty","floor","suppressMessages","line","postReleaseActions","release","mono_wasm_gc_unlock","nextQueuedAction","mono_wasm_gc_lock","SharedMemoryRenderBatch","batchAddress","arrayRangeReader","updatedComponents","structLength","disposedComponentIds","disposedEventHandlerIds","updatedComponentsEntry","arrayValuesEntry","disposedComponentIdsEntry","pointer","disposedEventHandlerIdsEntry","arrayRange","arrayBuilderSegment","builder","builderFieldsAddress","diff","arrayValues","blazorWebAssemblyStateCommentRegularExpression","discoverWebAssemblyPersistedState","node","discoverBlazorComment","comment","captureName","nodeType","Node","COMMENT_NODE","parsedState","exec","groups","hasChildNodes","nodes","resolveComponentComments","childNodeIterator","ComponentCommentIterator","next","currentElement","componentComment","getComponentComment","childResults","j","childResult","blazorCommentRegularExpression","RegExp","commentNodeIterator","candidateStart","payload","end","definition","Document","assertNotDirectlyOnDocument","parseCommentPayload","candidateEnd","iterator","prerenderId","validateEndComponentPayload","getComponentEndComment","validateWebAssemblyComponentPayload","uniqueId","nextUniqueDescriptorId","validateServerComponentPayload","createServerComponentComment","createAutoComponentComment","platformLoadPromise","startPromise","resolveBootConfigPromise","descriptor","sequence","Number","isInteger","assembly","typeName","parameterDefinitions","atob","parameterValues","prerenderEndId","currentIndex","WebAssemblyComponentAttacher","componentManager","resolveRegisteredElement","parsedId","isNaN","existingDescriptor","parentLogicalElement","children","startLogicalElement","rootCommentChildren","startNextChildIndex","lastMovedChild","childToMove","toLogicalRootCommentElement","resolveRootComponent","getParameterValues","initialComponents","getParameterDefinitions","getTypeName","getAssembly","getCount","initialUpdatePromise","resolveInitializersPromise","initializersPromise","setWebAssemblyOptions","initializersReady","configuredOptions","setOptions","startWebAssembly","components","startCore","_","opener","frameElement","settingsJson","sessionStorage","settings","redirect_uri","inAuthRedirectIframe","loadWebAssemblyPlatformIfNotStarted","renderer","getRendererer","middleware","addDispatchEventMiddleware","applyHotReload","metadataDelta","ilDelta","pdbDelta","updatedTypes","getApplyUpdateCapabilities","invokeJSJson","receiveWebAssemblyDotNetDataStream","renderBatch","heapLock","updatedComponentsRange","updatedComponentsValues","updatedComponentsLength","referenceFramesValues","disposedComponentIdsRange","disposedComponentIdsValues","disposedComponentIdsLength","disposedEventHandlerIdsRange","disposedEventHandlerIdsValues","disposedEventHandlerIdsLength","scrollTo","componentAttacher","registeredComponents","getRegisteredComponentsCount","getPersistedState","getInitialComponentsUpdate","updateRootComponents","operations","UpdateRootComponentsCore","endUpdateRootComponents","batchId","onAfterUpdateRootComponents","attachRootComponentToElement","elementSelector","beforeElementSelector","afterElementSelector","container","getAndRemovePendingRootComponentContainer","finalOptions","existingConfig","resultJsonOrErrorMessage","bytesRead","errorMessage","streamController","readableStream","ReadableStream","controller","close","enqueue","subarray","receiveDotNetDataStream","InitialRootComponentsList","ssrComponentId","JSEventRegistry","_eventListeners","listenersForEventType","ev","started","boot","webAssemblyComponents","currentScript"],"mappings":"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"}